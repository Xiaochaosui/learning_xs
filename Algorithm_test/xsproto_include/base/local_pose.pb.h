// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/local_pose.proto

#ifndef PROTOBUF_base_2flocal_5fpose_2eproto__INCLUDED
#define PROTOBUF_base_2flocal_5fpose_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base/vehicle_status.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_base_2flocal_5fpose_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLocalPoseImpl();
void InitDefaultsLocalPose();
inline void InitDefaults() {
  InitDefaultsLocalPose();
}
}  // namespace protobuf_base_2flocal_5fpose_2eproto
namespace xsproto {
namespace base {
class LocalPose;
class LocalPoseDefaultTypeInternal;
extern LocalPoseDefaultTypeInternal _LocalPose_default_instance_;
}  // namespace base
}  // namespace xsproto
namespace xsproto {
namespace base {

// ===================================================================

class LocalPose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.base.LocalPose) */ {
 public:
  LocalPose();
  virtual ~LocalPose();

  LocalPose(const LocalPose& from);

  inline LocalPose& operator=(const LocalPose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalPose(LocalPose&& from) noexcept
    : LocalPose() {
    *this = ::std::move(from);
  }

  inline LocalPose& operator=(LocalPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalPose* internal_default_instance() {
    return reinterpret_cast<const LocalPose*>(
               &_LocalPose_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LocalPose* other);
  friend void swap(LocalPose& a, LocalPose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalPose* New() const PROTOBUF_FINAL { return New(NULL); }

  LocalPose* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocalPose& from);
  void MergeFrom(const LocalPose& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocalPose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 error_code = 32 [packed = true];
  int error_code_size() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 32;
  ::google::protobuf::uint32 error_code(int index) const;
  void set_error_code(int index, ::google::protobuf::uint32 value);
  void add_error_code(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      error_code() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_error_code();

  // .xsproto.base.VehicleStatus.Imu imu = 9;
  bool has_imu() const;
  void clear_imu();
  static const int kImuFieldNumber = 9;
  const ::xsproto::base::VehicleStatus_Imu& imu() const;
  ::xsproto::base::VehicleStatus_Imu* release_imu();
  ::xsproto::base::VehicleStatus_Imu* mutable_imu();
  void set_allocated_imu(::xsproto::base::VehicleStatus_Imu* imu);

  // .xsproto.base.VehicleStatus.Wheel left_front_wheel = 18;
  bool has_left_front_wheel() const;
  void clear_left_front_wheel();
  static const int kLeftFrontWheelFieldNumber = 18;
  const ::xsproto::base::VehicleStatus_Wheel& left_front_wheel() const;
  ::xsproto::base::VehicleStatus_Wheel* release_left_front_wheel();
  ::xsproto::base::VehicleStatus_Wheel* mutable_left_front_wheel();
  void set_allocated_left_front_wheel(::xsproto::base::VehicleStatus_Wheel* left_front_wheel);

  // .xsproto.base.VehicleStatus.Wheel right_front_wheel = 19;
  bool has_right_front_wheel() const;
  void clear_right_front_wheel();
  static const int kRightFrontWheelFieldNumber = 19;
  const ::xsproto::base::VehicleStatus_Wheel& right_front_wheel() const;
  ::xsproto::base::VehicleStatus_Wheel* release_right_front_wheel();
  ::xsproto::base::VehicleStatus_Wheel* mutable_right_front_wheel();
  void set_allocated_right_front_wheel(::xsproto::base::VehicleStatus_Wheel* right_front_wheel);

  // .xsproto.base.VehicleStatus.Wheel left_rear_wheel = 20;
  bool has_left_rear_wheel() const;
  void clear_left_rear_wheel();
  static const int kLeftRearWheelFieldNumber = 20;
  const ::xsproto::base::VehicleStatus_Wheel& left_rear_wheel() const;
  ::xsproto::base::VehicleStatus_Wheel* release_left_rear_wheel();
  ::xsproto::base::VehicleStatus_Wheel* mutable_left_rear_wheel();
  void set_allocated_left_rear_wheel(::xsproto::base::VehicleStatus_Wheel* left_rear_wheel);

  // .xsproto.base.VehicleStatus.Wheel right_rear_wheel = 21;
  bool has_right_rear_wheel() const;
  void clear_right_rear_wheel();
  static const int kRightRearWheelFieldNumber = 21;
  const ::xsproto::base::VehicleStatus_Wheel& right_rear_wheel() const;
  ::xsproto::base::VehicleStatus_Wheel* release_right_rear_wheel();
  ::xsproto::base::VehicleStatus_Wheel* mutable_right_rear_wheel();
  void set_allocated_right_rear_wheel(::xsproto::base::VehicleStatus_Wheel* right_rear_wheel);

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // double dr_x = 3;
  void clear_dr_x();
  static const int kDrXFieldNumber = 3;
  double dr_x() const;
  void set_dr_x(double value);

  // double dr_y = 4;
  void clear_dr_y();
  static const int kDrYFieldNumber = 4;
  double dr_y() const;
  void set_dr_y(double value);

  // double dr_z = 5;
  void clear_dr_z();
  static const int kDrZFieldNumber = 5;
  double dr_z() const;
  void set_dr_z(double value);

  // double dr_roll = 6;
  void clear_dr_roll();
  static const int kDrRollFieldNumber = 6;
  double dr_roll() const;
  void set_dr_roll(double value);

  // uint32 seq_id = 2;
  void clear_seq_id();
  static const int kSeqIdFieldNumber = 2;
  ::google::protobuf::uint32 seq_id() const;
  void set_seq_id(::google::protobuf::uint32 value);

  // .xsproto.base.VehicleStatus.Gear gear = 10;
  void clear_gear();
  static const int kGearFieldNumber = 10;
  ::xsproto::base::VehicleStatus_Gear gear() const;
  void set_gear(::xsproto::base::VehicleStatus_Gear value);

  // double dr_pitch = 7;
  void clear_dr_pitch();
  static const int kDrPitchFieldNumber = 7;
  double dr_pitch() const;
  void set_dr_pitch(double value);

  // double dr_heading = 8;
  void clear_dr_heading();
  static const int kDrHeadingFieldNumber = 8;
  double dr_heading() const;
  void set_dr_heading(double value);

  // .xsproto.base.VehicleStatus.MotionModel motion_model = 11;
  void clear_motion_model();
  static const int kMotionModelFieldNumber = 11;
  ::xsproto::base::VehicleStatus_MotionModel motion_model() const;
  void set_motion_model(::xsproto::base::VehicleStatus_MotionModel value);

  // .xsproto.base.VehicleStatus.DrivingMode driving_mode = 12;
  void clear_driving_mode();
  static const int kDrivingModeFieldNumber = 12;
  ::xsproto::base::VehicleStatus_DrivingMode driving_mode() const;
  void set_driving_mode(::xsproto::base::VehicleStatus_DrivingMode value);

  // double front_wheel_angle = 13;
  void clear_front_wheel_angle();
  static const int kFrontWheelAngleFieldNumber = 13;
  double front_wheel_angle() const;
  void set_front_wheel_angle(double value);

  // double linear_velocity = 14;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 14;
  double linear_velocity() const;
  void set_linear_velocity(double value);

  // double total_mileage = 15;
  void clear_total_mileage();
  static const int kTotalMileageFieldNumber = 15;
  double total_mileage() const;
  void set_total_mileage(double value);

  // double auto_mileage = 16;
  void clear_auto_mileage();
  static const int kAutoMileageFieldNumber = 16;
  double auto_mileage() const;
  void set_auto_mileage(double value);

  // double battery_soc = 17;
  void clear_battery_soc();
  static const int kBatterySocFieldNumber = 17;
  double battery_soc() const;
  void set_battery_soc(double value);

  // @@protoc_insertion_point(class_scope:xsproto.base.LocalPose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > error_code_;
  mutable int _error_code_cached_byte_size_;
  ::xsproto::base::VehicleStatus_Imu* imu_;
  ::xsproto::base::VehicleStatus_Wheel* left_front_wheel_;
  ::xsproto::base::VehicleStatus_Wheel* right_front_wheel_;
  ::xsproto::base::VehicleStatus_Wheel* left_rear_wheel_;
  ::xsproto::base::VehicleStatus_Wheel* right_rear_wheel_;
  double timestamp_;
  double dr_x_;
  double dr_y_;
  double dr_z_;
  double dr_roll_;
  ::google::protobuf::uint32 seq_id_;
  int gear_;
  double dr_pitch_;
  double dr_heading_;
  int motion_model_;
  int driving_mode_;
  double front_wheel_angle_;
  double linear_velocity_;
  double total_mileage_;
  double auto_mileage_;
  double battery_soc_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2flocal_5fpose_2eproto::TableStruct;
  friend void ::protobuf_base_2flocal_5fpose_2eproto::InitDefaultsLocalPoseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocalPose

// double timestamp = 1;
inline void LocalPose::clear_timestamp() {
  timestamp_ = 0;
}
inline double LocalPose::timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.timestamp)
  return timestamp_;
}
inline void LocalPose::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.timestamp)
}

// uint32 seq_id = 2;
inline void LocalPose::clear_seq_id() {
  seq_id_ = 0u;
}
inline ::google::protobuf::uint32 LocalPose::seq_id() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.seq_id)
  return seq_id_;
}
inline void LocalPose::set_seq_id(::google::protobuf::uint32 value) {
  
  seq_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.seq_id)
}

// double dr_x = 3;
inline void LocalPose::clear_dr_x() {
  dr_x_ = 0;
}
inline double LocalPose::dr_x() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.dr_x)
  return dr_x_;
}
inline void LocalPose::set_dr_x(double value) {
  
  dr_x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.dr_x)
}

// double dr_y = 4;
inline void LocalPose::clear_dr_y() {
  dr_y_ = 0;
}
inline double LocalPose::dr_y() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.dr_y)
  return dr_y_;
}
inline void LocalPose::set_dr_y(double value) {
  
  dr_y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.dr_y)
}

// double dr_z = 5;
inline void LocalPose::clear_dr_z() {
  dr_z_ = 0;
}
inline double LocalPose::dr_z() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.dr_z)
  return dr_z_;
}
inline void LocalPose::set_dr_z(double value) {
  
  dr_z_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.dr_z)
}

// double dr_roll = 6;
inline void LocalPose::clear_dr_roll() {
  dr_roll_ = 0;
}
inline double LocalPose::dr_roll() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.dr_roll)
  return dr_roll_;
}
inline void LocalPose::set_dr_roll(double value) {
  
  dr_roll_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.dr_roll)
}

// double dr_pitch = 7;
inline void LocalPose::clear_dr_pitch() {
  dr_pitch_ = 0;
}
inline double LocalPose::dr_pitch() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.dr_pitch)
  return dr_pitch_;
}
inline void LocalPose::set_dr_pitch(double value) {
  
  dr_pitch_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.dr_pitch)
}

// double dr_heading = 8;
inline void LocalPose::clear_dr_heading() {
  dr_heading_ = 0;
}
inline double LocalPose::dr_heading() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.dr_heading)
  return dr_heading_;
}
inline void LocalPose::set_dr_heading(double value) {
  
  dr_heading_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.dr_heading)
}

// .xsproto.base.VehicleStatus.Imu imu = 9;
inline bool LocalPose::has_imu() const {
  return this != internal_default_instance() && imu_ != NULL;
}
inline const ::xsproto::base::VehicleStatus_Imu& LocalPose::imu() const {
  const ::xsproto::base::VehicleStatus_Imu* p = imu_;
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.imu)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::VehicleStatus_Imu*>(
      &::xsproto::base::_VehicleStatus_Imu_default_instance_);
}
inline ::xsproto::base::VehicleStatus_Imu* LocalPose::release_imu() {
  // @@protoc_insertion_point(field_release:xsproto.base.LocalPose.imu)
  
  ::xsproto::base::VehicleStatus_Imu* temp = imu_;
  imu_ = NULL;
  return temp;
}
inline ::xsproto::base::VehicleStatus_Imu* LocalPose::mutable_imu() {
  
  if (imu_ == NULL) {
    imu_ = new ::xsproto::base::VehicleStatus_Imu;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.LocalPose.imu)
  return imu_;
}
inline void LocalPose::set_allocated_imu(::xsproto::base::VehicleStatus_Imu* imu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(imu_);
  }
  if (imu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      imu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    
  } else {
    
  }
  imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.LocalPose.imu)
}

// .xsproto.base.VehicleStatus.Gear gear = 10;
inline void LocalPose::clear_gear() {
  gear_ = 0;
}
inline ::xsproto::base::VehicleStatus_Gear LocalPose::gear() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.gear)
  return static_cast< ::xsproto::base::VehicleStatus_Gear >(gear_);
}
inline void LocalPose::set_gear(::xsproto::base::VehicleStatus_Gear value) {
  
  gear_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.gear)
}

// .xsproto.base.VehicleStatus.MotionModel motion_model = 11;
inline void LocalPose::clear_motion_model() {
  motion_model_ = 0;
}
inline ::xsproto::base::VehicleStatus_MotionModel LocalPose::motion_model() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.motion_model)
  return static_cast< ::xsproto::base::VehicleStatus_MotionModel >(motion_model_);
}
inline void LocalPose::set_motion_model(::xsproto::base::VehicleStatus_MotionModel value) {
  
  motion_model_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.motion_model)
}

// .xsproto.base.VehicleStatus.DrivingMode driving_mode = 12;
inline void LocalPose::clear_driving_mode() {
  driving_mode_ = 0;
}
inline ::xsproto::base::VehicleStatus_DrivingMode LocalPose::driving_mode() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.driving_mode)
  return static_cast< ::xsproto::base::VehicleStatus_DrivingMode >(driving_mode_);
}
inline void LocalPose::set_driving_mode(::xsproto::base::VehicleStatus_DrivingMode value) {
  
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.driving_mode)
}

// double front_wheel_angle = 13;
inline void LocalPose::clear_front_wheel_angle() {
  front_wheel_angle_ = 0;
}
inline double LocalPose::front_wheel_angle() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.front_wheel_angle)
  return front_wheel_angle_;
}
inline void LocalPose::set_front_wheel_angle(double value) {
  
  front_wheel_angle_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.front_wheel_angle)
}

// double linear_velocity = 14;
inline void LocalPose::clear_linear_velocity() {
  linear_velocity_ = 0;
}
inline double LocalPose::linear_velocity() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.linear_velocity)
  return linear_velocity_;
}
inline void LocalPose::set_linear_velocity(double value) {
  
  linear_velocity_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.linear_velocity)
}

// double total_mileage = 15;
inline void LocalPose::clear_total_mileage() {
  total_mileage_ = 0;
}
inline double LocalPose::total_mileage() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.total_mileage)
  return total_mileage_;
}
inline void LocalPose::set_total_mileage(double value) {
  
  total_mileage_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.total_mileage)
}

// double auto_mileage = 16;
inline void LocalPose::clear_auto_mileage() {
  auto_mileage_ = 0;
}
inline double LocalPose::auto_mileage() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.auto_mileage)
  return auto_mileage_;
}
inline void LocalPose::set_auto_mileage(double value) {
  
  auto_mileage_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.auto_mileage)
}

// double battery_soc = 17;
inline void LocalPose::clear_battery_soc() {
  battery_soc_ = 0;
}
inline double LocalPose::battery_soc() const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.battery_soc)
  return battery_soc_;
}
inline void LocalPose::set_battery_soc(double value) {
  
  battery_soc_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.battery_soc)
}

// .xsproto.base.VehicleStatus.Wheel left_front_wheel = 18;
inline bool LocalPose::has_left_front_wheel() const {
  return this != internal_default_instance() && left_front_wheel_ != NULL;
}
inline const ::xsproto::base::VehicleStatus_Wheel& LocalPose::left_front_wheel() const {
  const ::xsproto::base::VehicleStatus_Wheel* p = left_front_wheel_;
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.left_front_wheel)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::VehicleStatus_Wheel*>(
      &::xsproto::base::_VehicleStatus_Wheel_default_instance_);
}
inline ::xsproto::base::VehicleStatus_Wheel* LocalPose::release_left_front_wheel() {
  // @@protoc_insertion_point(field_release:xsproto.base.LocalPose.left_front_wheel)
  
  ::xsproto::base::VehicleStatus_Wheel* temp = left_front_wheel_;
  left_front_wheel_ = NULL;
  return temp;
}
inline ::xsproto::base::VehicleStatus_Wheel* LocalPose::mutable_left_front_wheel() {
  
  if (left_front_wheel_ == NULL) {
    left_front_wheel_ = new ::xsproto::base::VehicleStatus_Wheel;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.LocalPose.left_front_wheel)
  return left_front_wheel_;
}
inline void LocalPose::set_allocated_left_front_wheel(::xsproto::base::VehicleStatus_Wheel* left_front_wheel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(left_front_wheel_);
  }
  if (left_front_wheel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_front_wheel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_front_wheel, submessage_arena);
    }
    
  } else {
    
  }
  left_front_wheel_ = left_front_wheel;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.LocalPose.left_front_wheel)
}

// .xsproto.base.VehicleStatus.Wheel right_front_wheel = 19;
inline bool LocalPose::has_right_front_wheel() const {
  return this != internal_default_instance() && right_front_wheel_ != NULL;
}
inline const ::xsproto::base::VehicleStatus_Wheel& LocalPose::right_front_wheel() const {
  const ::xsproto::base::VehicleStatus_Wheel* p = right_front_wheel_;
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.right_front_wheel)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::VehicleStatus_Wheel*>(
      &::xsproto::base::_VehicleStatus_Wheel_default_instance_);
}
inline ::xsproto::base::VehicleStatus_Wheel* LocalPose::release_right_front_wheel() {
  // @@protoc_insertion_point(field_release:xsproto.base.LocalPose.right_front_wheel)
  
  ::xsproto::base::VehicleStatus_Wheel* temp = right_front_wheel_;
  right_front_wheel_ = NULL;
  return temp;
}
inline ::xsproto::base::VehicleStatus_Wheel* LocalPose::mutable_right_front_wheel() {
  
  if (right_front_wheel_ == NULL) {
    right_front_wheel_ = new ::xsproto::base::VehicleStatus_Wheel;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.LocalPose.right_front_wheel)
  return right_front_wheel_;
}
inline void LocalPose::set_allocated_right_front_wheel(::xsproto::base::VehicleStatus_Wheel* right_front_wheel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(right_front_wheel_);
  }
  if (right_front_wheel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_front_wheel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_front_wheel, submessage_arena);
    }
    
  } else {
    
  }
  right_front_wheel_ = right_front_wheel;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.LocalPose.right_front_wheel)
}

// .xsproto.base.VehicleStatus.Wheel left_rear_wheel = 20;
inline bool LocalPose::has_left_rear_wheel() const {
  return this != internal_default_instance() && left_rear_wheel_ != NULL;
}
inline const ::xsproto::base::VehicleStatus_Wheel& LocalPose::left_rear_wheel() const {
  const ::xsproto::base::VehicleStatus_Wheel* p = left_rear_wheel_;
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.left_rear_wheel)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::VehicleStatus_Wheel*>(
      &::xsproto::base::_VehicleStatus_Wheel_default_instance_);
}
inline ::xsproto::base::VehicleStatus_Wheel* LocalPose::release_left_rear_wheel() {
  // @@protoc_insertion_point(field_release:xsproto.base.LocalPose.left_rear_wheel)
  
  ::xsproto::base::VehicleStatus_Wheel* temp = left_rear_wheel_;
  left_rear_wheel_ = NULL;
  return temp;
}
inline ::xsproto::base::VehicleStatus_Wheel* LocalPose::mutable_left_rear_wheel() {
  
  if (left_rear_wheel_ == NULL) {
    left_rear_wheel_ = new ::xsproto::base::VehicleStatus_Wheel;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.LocalPose.left_rear_wheel)
  return left_rear_wheel_;
}
inline void LocalPose::set_allocated_left_rear_wheel(::xsproto::base::VehicleStatus_Wheel* left_rear_wheel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(left_rear_wheel_);
  }
  if (left_rear_wheel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_rear_wheel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_rear_wheel, submessage_arena);
    }
    
  } else {
    
  }
  left_rear_wheel_ = left_rear_wheel;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.LocalPose.left_rear_wheel)
}

// .xsproto.base.VehicleStatus.Wheel right_rear_wheel = 21;
inline bool LocalPose::has_right_rear_wheel() const {
  return this != internal_default_instance() && right_rear_wheel_ != NULL;
}
inline const ::xsproto::base::VehicleStatus_Wheel& LocalPose::right_rear_wheel() const {
  const ::xsproto::base::VehicleStatus_Wheel* p = right_rear_wheel_;
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.right_rear_wheel)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::VehicleStatus_Wheel*>(
      &::xsproto::base::_VehicleStatus_Wheel_default_instance_);
}
inline ::xsproto::base::VehicleStatus_Wheel* LocalPose::release_right_rear_wheel() {
  // @@protoc_insertion_point(field_release:xsproto.base.LocalPose.right_rear_wheel)
  
  ::xsproto::base::VehicleStatus_Wheel* temp = right_rear_wheel_;
  right_rear_wheel_ = NULL;
  return temp;
}
inline ::xsproto::base::VehicleStatus_Wheel* LocalPose::mutable_right_rear_wheel() {
  
  if (right_rear_wheel_ == NULL) {
    right_rear_wheel_ = new ::xsproto::base::VehicleStatus_Wheel;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.LocalPose.right_rear_wheel)
  return right_rear_wheel_;
}
inline void LocalPose::set_allocated_right_rear_wheel(::xsproto::base::VehicleStatus_Wheel* right_rear_wheel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(right_rear_wheel_);
  }
  if (right_rear_wheel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_rear_wheel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_rear_wheel, submessage_arena);
    }
    
  } else {
    
  }
  right_rear_wheel_ = right_rear_wheel;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.LocalPose.right_rear_wheel)
}

// repeated uint32 error_code = 32 [packed = true];
inline int LocalPose::error_code_size() const {
  return error_code_.size();
}
inline void LocalPose::clear_error_code() {
  error_code_.Clear();
}
inline ::google::protobuf::uint32 LocalPose::error_code(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.base.LocalPose.error_code)
  return error_code_.Get(index);
}
inline void LocalPose::set_error_code(int index, ::google::protobuf::uint32 value) {
  error_code_.Set(index, value);
  // @@protoc_insertion_point(field_set:xsproto.base.LocalPose.error_code)
}
inline void LocalPose::add_error_code(::google::protobuf::uint32 value) {
  error_code_.Add(value);
  // @@protoc_insertion_point(field_add:xsproto.base.LocalPose.error_code)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LocalPose::error_code() const {
  // @@protoc_insertion_point(field_list:xsproto.base.LocalPose.error_code)
  return error_code_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LocalPose::mutable_error_code() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.base.LocalPose.error_code)
  return &error_code_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_2flocal_5fpose_2eproto__INCLUDED
