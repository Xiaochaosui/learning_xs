// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/global_pose.proto

#ifndef PROTOBUF_base_2fglobal_5fpose_2eproto__INCLUDED
#define PROTOBUF_base_2fglobal_5fpose_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_base_2fglobal_5fpose_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGlobalPose_Vector3DImpl();
void InitDefaultsGlobalPose_Vector3D();
void InitDefaultsGlobalPose_GnssImpl();
void InitDefaultsGlobalPose_Gnss();
void InitDefaultsGlobalPose_InsImuImpl();
void InitDefaultsGlobalPose_InsImu();
void InitDefaultsGlobalPoseImpl();
void InitDefaultsGlobalPose();
inline void InitDefaults() {
  InitDefaultsGlobalPose_Vector3D();
  InitDefaultsGlobalPose_Gnss();
  InitDefaultsGlobalPose_InsImu();
  InitDefaultsGlobalPose();
}
}  // namespace protobuf_base_2fglobal_5fpose_2eproto
namespace xsproto {
namespace base {
class GlobalPose;
class GlobalPoseDefaultTypeInternal;
extern GlobalPoseDefaultTypeInternal _GlobalPose_default_instance_;
class GlobalPose_Gnss;
class GlobalPose_GnssDefaultTypeInternal;
extern GlobalPose_GnssDefaultTypeInternal _GlobalPose_Gnss_default_instance_;
class GlobalPose_InsImu;
class GlobalPose_InsImuDefaultTypeInternal;
extern GlobalPose_InsImuDefaultTypeInternal _GlobalPose_InsImu_default_instance_;
class GlobalPose_Vector3D;
class GlobalPose_Vector3DDefaultTypeInternal;
extern GlobalPose_Vector3DDefaultTypeInternal _GlobalPose_Vector3D_default_instance_;
}  // namespace base
}  // namespace xsproto
namespace xsproto {
namespace base {

enum GlobalPose_PositionModel {
  GlobalPose_PositionModel_POSITION_MODEL_SINGLE_ANT = 0,
  GlobalPose_PositionModel_POSITION_MODEL_DAUL_ANT = 1,
  GlobalPose_PositionModel_POSITION_MODEL_INS = 2,
  GlobalPose_PositionModel_GlobalPose_PositionModel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GlobalPose_PositionModel_GlobalPose_PositionModel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GlobalPose_PositionModel_IsValid(int value);
const GlobalPose_PositionModel GlobalPose_PositionModel_PositionModel_MIN = GlobalPose_PositionModel_POSITION_MODEL_SINGLE_ANT;
const GlobalPose_PositionModel GlobalPose_PositionModel_PositionModel_MAX = GlobalPose_PositionModel_POSITION_MODEL_INS;
const int GlobalPose_PositionModel_PositionModel_ARRAYSIZE = GlobalPose_PositionModel_PositionModel_MAX + 1;

const ::google::protobuf::EnumDescriptor* GlobalPose_PositionModel_descriptor();
inline const ::std::string& GlobalPose_PositionModel_Name(GlobalPose_PositionModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    GlobalPose_PositionModel_descriptor(), value);
}
inline bool GlobalPose_PositionModel_Parse(
    const ::std::string& name, GlobalPose_PositionModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GlobalPose_PositionModel>(
    GlobalPose_PositionModel_descriptor(), name, value);
}
enum GlobalPose_PositionState {
  GlobalPose_PositionState_POSITION_STATE_NONE = 0,
  GlobalPose_PositionState_POSITION_STATE_INIT = 1,
  GlobalPose_PositionState_POSITION_STATE_OK = 2,
  GlobalPose_PositionState_GlobalPose_PositionState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GlobalPose_PositionState_GlobalPose_PositionState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GlobalPose_PositionState_IsValid(int value);
const GlobalPose_PositionState GlobalPose_PositionState_PositionState_MIN = GlobalPose_PositionState_POSITION_STATE_NONE;
const GlobalPose_PositionState GlobalPose_PositionState_PositionState_MAX = GlobalPose_PositionState_POSITION_STATE_OK;
const int GlobalPose_PositionState_PositionState_ARRAYSIZE = GlobalPose_PositionState_PositionState_MAX + 1;

const ::google::protobuf::EnumDescriptor* GlobalPose_PositionState_descriptor();
inline const ::std::string& GlobalPose_PositionState_Name(GlobalPose_PositionState value) {
  return ::google::protobuf::internal::NameOfEnum(
    GlobalPose_PositionState_descriptor(), value);
}
inline bool GlobalPose_PositionState_Parse(
    const ::std::string& name, GlobalPose_PositionState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GlobalPose_PositionState>(
    GlobalPose_PositionState_descriptor(), name, value);
}
enum GlobalPose_PositionType {
  GlobalPose_PositionType_POSITION_TYPE_NONE = 0,
  GlobalPose_PositionType_POSITION_TYPE_FIXED_POS = 1,
  GlobalPose_PositionType_POSITION_TYPE_FIXED_HEIGHT = 2,
  GlobalPose_PositionType_POSITION_TYPE_INVALID_PPS = 3,
  GlobalPose_PositionType_POSITION_TYPE_DR = 6,
  GlobalPose_PositionType_POSITION_TYPE_DOPPLER_VELOCITY = 8,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_SINGLE = 16,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_PSRDIFF = 17,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_WAAS = 18,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_PROPAGATED = 19,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_L1_FLOAT = 32,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_FLOAT_RTK = 34,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_L1_INT = 48,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_WIDE_INT = 49,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_INT_RTK = 50,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_RTK_DIRECT_INS = 51,
  GlobalPose_PositionType_POSITION_TYPE_INS_SBAS = 52,
  GlobalPose_PositionType_POSITION_TYPE_INS_SINGLE = 53,
  GlobalPose_PositionType_POSITION_TYPE_INS_PSRDIFF = 54,
  GlobalPose_PositionType_POSITION_TYPE_INS_FLOAT = 55,
  GlobalPose_PositionType_POSITION_TYPE_INS_INT = 56,
  GlobalPose_PositionType_POSITION_TYPE_INS_ODO = 57,
  GlobalPose_PositionType_POSITION_TYPE_INS_MAP = 58,
  GlobalPose_PositionType_POSITION_TYPE_MAP = 60,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_PPP_CONVERGING = 68,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_PPP = 69,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_OPERATIONAL = 70,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_WARNING = 71,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_OUT_OF_BOUNDS = 72,
  GlobalPose_PositionType_POSITION_TYPE_INS_PPP_CONVERGING = 73,
  GlobalPose_PositionType_POSITION_TYPE_INS_PPP = 74,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_PPP_BASIC_CONVERGING = 77,
  GlobalPose_PositionType_POSITION_TYPE_GNSS_PPP_BASIC = 78,
  GlobalPose_PositionType_POSITION_TYPE_INS_PPP_BASIC_CONVERGING = 79,
  GlobalPose_PositionType_POSITION_TYPE_INS_PPP_BASIC = 80,
  GlobalPose_PositionType_GlobalPose_PositionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GlobalPose_PositionType_GlobalPose_PositionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GlobalPose_PositionType_IsValid(int value);
const GlobalPose_PositionType GlobalPose_PositionType_PositionType_MIN = GlobalPose_PositionType_POSITION_TYPE_NONE;
const GlobalPose_PositionType GlobalPose_PositionType_PositionType_MAX = GlobalPose_PositionType_POSITION_TYPE_INS_PPP_BASIC;
const int GlobalPose_PositionType_PositionType_ARRAYSIZE = GlobalPose_PositionType_PositionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GlobalPose_PositionType_descriptor();
inline const ::std::string& GlobalPose_PositionType_Name(GlobalPose_PositionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GlobalPose_PositionType_descriptor(), value);
}
inline bool GlobalPose_PositionType_Parse(
    const ::std::string& name, GlobalPose_PositionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GlobalPose_PositionType>(
    GlobalPose_PositionType_descriptor(), name, value);
}
// ===================================================================

class GlobalPose_Vector3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.base.GlobalPose.Vector3D) */ {
 public:
  GlobalPose_Vector3D();
  virtual ~GlobalPose_Vector3D();

  GlobalPose_Vector3D(const GlobalPose_Vector3D& from);

  inline GlobalPose_Vector3D& operator=(const GlobalPose_Vector3D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalPose_Vector3D(GlobalPose_Vector3D&& from) noexcept
    : GlobalPose_Vector3D() {
    *this = ::std::move(from);
  }

  inline GlobalPose_Vector3D& operator=(GlobalPose_Vector3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalPose_Vector3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalPose_Vector3D* internal_default_instance() {
    return reinterpret_cast<const GlobalPose_Vector3D*>(
               &_GlobalPose_Vector3D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GlobalPose_Vector3D* other);
  friend void swap(GlobalPose_Vector3D& a, GlobalPose_Vector3D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalPose_Vector3D* New() const PROTOBUF_FINAL { return New(NULL); }

  GlobalPose_Vector3D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlobalPose_Vector3D& from);
  void MergeFrom(const GlobalPose_Vector3D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlobalPose_Vector3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:xsproto.base.GlobalPose.Vector3D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2fglobal_5fpose_2eproto::TableStruct;
  friend void ::protobuf_base_2fglobal_5fpose_2eproto::InitDefaultsGlobalPose_Vector3DImpl();
};
// -------------------------------------------------------------------

class GlobalPose_Gnss : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.base.GlobalPose.Gnss) */ {
 public:
  GlobalPose_Gnss();
  virtual ~GlobalPose_Gnss();

  GlobalPose_Gnss(const GlobalPose_Gnss& from);

  inline GlobalPose_Gnss& operator=(const GlobalPose_Gnss& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalPose_Gnss(GlobalPose_Gnss&& from) noexcept
    : GlobalPose_Gnss() {
    *this = ::std::move(from);
  }

  inline GlobalPose_Gnss& operator=(GlobalPose_Gnss&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalPose_Gnss& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalPose_Gnss* internal_default_instance() {
    return reinterpret_cast<const GlobalPose_Gnss*>(
               &_GlobalPose_Gnss_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GlobalPose_Gnss* other);
  friend void swap(GlobalPose_Gnss& a, GlobalPose_Gnss& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalPose_Gnss* New() const PROTOBUF_FINAL { return New(NULL); }

  GlobalPose_Gnss* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlobalPose_Gnss& from);
  void MergeFrom(const GlobalPose_Gnss& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlobalPose_Gnss* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xsproto.base.GlobalPose.Vector3D gauss_pos = 11;
  bool has_gauss_pos() const;
  void clear_gauss_pos();
  static const int kGaussPosFieldNumber = 11;
  const ::xsproto::base::GlobalPose_Vector3D& gauss_pos() const;
  ::xsproto::base::GlobalPose_Vector3D* release_gauss_pos();
  ::xsproto::base::GlobalPose_Vector3D* mutable_gauss_pos();
  void set_allocated_gauss_pos(::xsproto::base::GlobalPose_Vector3D* gauss_pos);

  // double latitude = 1;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // double longitude = 2;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // double altitude = 3;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  double altitude() const;
  void set_altitude(double value);

  // double azimuth = 4;
  void clear_azimuth();
  static const int kAzimuthFieldNumber = 4;
  double azimuth() const;
  void set_azimuth(double value);

  // double latitude_dev = 5;
  void clear_latitude_dev();
  static const int kLatitudeDevFieldNumber = 5;
  double latitude_dev() const;
  void set_latitude_dev(double value);

  // double longitude_dev = 6;
  void clear_longitude_dev();
  static const int kLongitudeDevFieldNumber = 6;
  double longitude_dev() const;
  void set_longitude_dev(double value);

  // double altitude_dev = 7;
  void clear_altitude_dev();
  static const int kAltitudeDevFieldNumber = 7;
  double altitude_dev() const;
  void set_altitude_dev(double value);

  // double azimuth_dev = 8;
  void clear_azimuth_dev();
  static const int kAzimuthDevFieldNumber = 8;
  double azimuth_dev() const;
  void set_azimuth_dev(double value);

  // uint32 gps_week = 9;
  void clear_gps_week();
  static const int kGpsWeekFieldNumber = 9;
  ::google::protobuf::uint32 gps_week() const;
  void set_gps_week(::google::protobuf::uint32 value);

  // uint32 gps_millisecond = 10;
  void clear_gps_millisecond();
  static const int kGpsMillisecondFieldNumber = 10;
  ::google::protobuf::uint32 gps_millisecond() const;
  void set_gps_millisecond(::google::protobuf::uint32 value);

  // double roll = 12;
  void clear_roll();
  static const int kRollFieldNumber = 12;
  double roll() const;
  void set_roll(double value);

  // double pitch = 13;
  void clear_pitch();
  static const int kPitchFieldNumber = 13;
  double pitch() const;
  void set_pitch(double value);

  // .xsproto.base.GlobalPose.PositionType position_type = 14;
  void clear_position_type();
  static const int kPositionTypeFieldNumber = 14;
  ::xsproto::base::GlobalPose_PositionType position_type() const;
  void set_position_type(::xsproto::base::GlobalPose_PositionType value);

  // .xsproto.base.GlobalPose.PositionModel position_model = 15;
  void clear_position_model();
  static const int kPositionModelFieldNumber = 15;
  ::xsproto::base::GlobalPose_PositionModel position_model() const;
  void set_position_model(::xsproto::base::GlobalPose_PositionModel value);

  // double v_up = 17;
  void clear_v_up();
  static const int kVUpFieldNumber = 17;
  double v_up() const;
  void set_v_up(double value);

  // double v_east = 18;
  void clear_v_east();
  static const int kVEastFieldNumber = 18;
  double v_east() const;
  void set_v_east(double value);

  // uint32 satellites = 16;
  void clear_satellites();
  static const int kSatellitesFieldNumber = 16;
  ::google::protobuf::uint32 satellites() const;
  void set_satellites(::google::protobuf::uint32 value);

  // .xsproto.base.GlobalPose.PositionState position_state = 21;
  void clear_position_state();
  static const int kPositionStateFieldNumber = 21;
  ::xsproto::base::GlobalPose_PositionState position_state() const;
  void set_position_state(::xsproto::base::GlobalPose_PositionState value);

  // double v_north = 19;
  void clear_v_north();
  static const int kVNorthFieldNumber = 19;
  double v_north() const;
  void set_v_north(double value);

  // double timestamp = 20;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 20;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:xsproto.base.GlobalPose.Gnss)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::xsproto::base::GlobalPose_Vector3D* gauss_pos_;
  double latitude_;
  double longitude_;
  double altitude_;
  double azimuth_;
  double latitude_dev_;
  double longitude_dev_;
  double altitude_dev_;
  double azimuth_dev_;
  ::google::protobuf::uint32 gps_week_;
  ::google::protobuf::uint32 gps_millisecond_;
  double roll_;
  double pitch_;
  int position_type_;
  int position_model_;
  double v_up_;
  double v_east_;
  ::google::protobuf::uint32 satellites_;
  int position_state_;
  double v_north_;
  double timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2fglobal_5fpose_2eproto::TableStruct;
  friend void ::protobuf_base_2fglobal_5fpose_2eproto::InitDefaultsGlobalPose_GnssImpl();
};
// -------------------------------------------------------------------

class GlobalPose_InsImu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.base.GlobalPose.InsImu) */ {
 public:
  GlobalPose_InsImu();
  virtual ~GlobalPose_InsImu();

  GlobalPose_InsImu(const GlobalPose_InsImu& from);

  inline GlobalPose_InsImu& operator=(const GlobalPose_InsImu& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalPose_InsImu(GlobalPose_InsImu&& from) noexcept
    : GlobalPose_InsImu() {
    *this = ::std::move(from);
  }

  inline GlobalPose_InsImu& operator=(GlobalPose_InsImu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalPose_InsImu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalPose_InsImu* internal_default_instance() {
    return reinterpret_cast<const GlobalPose_InsImu*>(
               &_GlobalPose_InsImu_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GlobalPose_InsImu* other);
  friend void swap(GlobalPose_InsImu& a, GlobalPose_InsImu& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalPose_InsImu* New() const PROTOBUF_FINAL { return New(NULL); }

  GlobalPose_InsImu* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlobalPose_InsImu& from);
  void MergeFrom(const GlobalPose_InsImu& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlobalPose_InsImu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xsproto.base.GlobalPose.Vector3D accel = 1;
  bool has_accel() const;
  void clear_accel();
  static const int kAccelFieldNumber = 1;
  const ::xsproto::base::GlobalPose_Vector3D& accel() const;
  ::xsproto::base::GlobalPose_Vector3D* release_accel();
  ::xsproto::base::GlobalPose_Vector3D* mutable_accel();
  void set_allocated_accel(::xsproto::base::GlobalPose_Vector3D* accel);

  // .xsproto.base.GlobalPose.Vector3D gyro = 2;
  bool has_gyro() const;
  void clear_gyro();
  static const int kGyroFieldNumber = 2;
  const ::xsproto::base::GlobalPose_Vector3D& gyro() const;
  ::xsproto::base::GlobalPose_Vector3D* release_gyro();
  ::xsproto::base::GlobalPose_Vector3D* mutable_gyro();
  void set_allocated_gyro(::xsproto::base::GlobalPose_Vector3D* gyro);

  // @@protoc_insertion_point(class_scope:xsproto.base.GlobalPose.InsImu)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::xsproto::base::GlobalPose_Vector3D* accel_;
  ::xsproto::base::GlobalPose_Vector3D* gyro_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2fglobal_5fpose_2eproto::TableStruct;
  friend void ::protobuf_base_2fglobal_5fpose_2eproto::InitDefaultsGlobalPose_InsImuImpl();
};
// -------------------------------------------------------------------

class GlobalPose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.base.GlobalPose) */ {
 public:
  GlobalPose();
  virtual ~GlobalPose();

  GlobalPose(const GlobalPose& from);

  inline GlobalPose& operator=(const GlobalPose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalPose(GlobalPose&& from) noexcept
    : GlobalPose() {
    *this = ::std::move(from);
  }

  inline GlobalPose& operator=(GlobalPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalPose* internal_default_instance() {
    return reinterpret_cast<const GlobalPose*>(
               &_GlobalPose_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GlobalPose* other);
  friend void swap(GlobalPose& a, GlobalPose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalPose* New() const PROTOBUF_FINAL { return New(NULL); }

  GlobalPose* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlobalPose& from);
  void MergeFrom(const GlobalPose& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlobalPose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GlobalPose_Vector3D Vector3D;
  typedef GlobalPose_Gnss Gnss;
  typedef GlobalPose_InsImu InsImu;

  typedef GlobalPose_PositionModel PositionModel;
  static const PositionModel POSITION_MODEL_SINGLE_ANT =
    GlobalPose_PositionModel_POSITION_MODEL_SINGLE_ANT;
  static const PositionModel POSITION_MODEL_DAUL_ANT =
    GlobalPose_PositionModel_POSITION_MODEL_DAUL_ANT;
  static const PositionModel POSITION_MODEL_INS =
    GlobalPose_PositionModel_POSITION_MODEL_INS;
  static inline bool PositionModel_IsValid(int value) {
    return GlobalPose_PositionModel_IsValid(value);
  }
  static const PositionModel PositionModel_MIN =
    GlobalPose_PositionModel_PositionModel_MIN;
  static const PositionModel PositionModel_MAX =
    GlobalPose_PositionModel_PositionModel_MAX;
  static const int PositionModel_ARRAYSIZE =
    GlobalPose_PositionModel_PositionModel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PositionModel_descriptor() {
    return GlobalPose_PositionModel_descriptor();
  }
  static inline const ::std::string& PositionModel_Name(PositionModel value) {
    return GlobalPose_PositionModel_Name(value);
  }
  static inline bool PositionModel_Parse(const ::std::string& name,
      PositionModel* value) {
    return GlobalPose_PositionModel_Parse(name, value);
  }

  typedef GlobalPose_PositionState PositionState;
  static const PositionState POSITION_STATE_NONE =
    GlobalPose_PositionState_POSITION_STATE_NONE;
  static const PositionState POSITION_STATE_INIT =
    GlobalPose_PositionState_POSITION_STATE_INIT;
  static const PositionState POSITION_STATE_OK =
    GlobalPose_PositionState_POSITION_STATE_OK;
  static inline bool PositionState_IsValid(int value) {
    return GlobalPose_PositionState_IsValid(value);
  }
  static const PositionState PositionState_MIN =
    GlobalPose_PositionState_PositionState_MIN;
  static const PositionState PositionState_MAX =
    GlobalPose_PositionState_PositionState_MAX;
  static const int PositionState_ARRAYSIZE =
    GlobalPose_PositionState_PositionState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PositionState_descriptor() {
    return GlobalPose_PositionState_descriptor();
  }
  static inline const ::std::string& PositionState_Name(PositionState value) {
    return GlobalPose_PositionState_Name(value);
  }
  static inline bool PositionState_Parse(const ::std::string& name,
      PositionState* value) {
    return GlobalPose_PositionState_Parse(name, value);
  }

  typedef GlobalPose_PositionType PositionType;
  static const PositionType POSITION_TYPE_NONE =
    GlobalPose_PositionType_POSITION_TYPE_NONE;
  static const PositionType POSITION_TYPE_FIXED_POS =
    GlobalPose_PositionType_POSITION_TYPE_FIXED_POS;
  static const PositionType POSITION_TYPE_FIXED_HEIGHT =
    GlobalPose_PositionType_POSITION_TYPE_FIXED_HEIGHT;
  static const PositionType POSITION_TYPE_INVALID_PPS =
    GlobalPose_PositionType_POSITION_TYPE_INVALID_PPS;
  static const PositionType POSITION_TYPE_DR =
    GlobalPose_PositionType_POSITION_TYPE_DR;
  static const PositionType POSITION_TYPE_DOPPLER_VELOCITY =
    GlobalPose_PositionType_POSITION_TYPE_DOPPLER_VELOCITY;
  static const PositionType POSITION_TYPE_GNSS_SINGLE =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_SINGLE;
  static const PositionType POSITION_TYPE_GNSS_PSRDIFF =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_PSRDIFF;
  static const PositionType POSITION_TYPE_GNSS_WAAS =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_WAAS;
  static const PositionType POSITION_TYPE_GNSS_PROPAGATED =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_PROPAGATED;
  static const PositionType POSITION_TYPE_GNSS_L1_FLOAT =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_L1_FLOAT;
  static const PositionType POSITION_TYPE_GNSS_FLOAT_RTK =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_FLOAT_RTK;
  static const PositionType POSITION_TYPE_GNSS_L1_INT =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_L1_INT;
  static const PositionType POSITION_TYPE_GNSS_WIDE_INT =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_WIDE_INT;
  static const PositionType POSITION_TYPE_GNSS_INT_RTK =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_INT_RTK;
  static const PositionType POSITION_TYPE_GNSS_RTK_DIRECT_INS =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_RTK_DIRECT_INS;
  static const PositionType POSITION_TYPE_INS_SBAS =
    GlobalPose_PositionType_POSITION_TYPE_INS_SBAS;
  static const PositionType POSITION_TYPE_INS_SINGLE =
    GlobalPose_PositionType_POSITION_TYPE_INS_SINGLE;
  static const PositionType POSITION_TYPE_INS_PSRDIFF =
    GlobalPose_PositionType_POSITION_TYPE_INS_PSRDIFF;
  static const PositionType POSITION_TYPE_INS_FLOAT =
    GlobalPose_PositionType_POSITION_TYPE_INS_FLOAT;
  static const PositionType POSITION_TYPE_INS_INT =
    GlobalPose_PositionType_POSITION_TYPE_INS_INT;
  static const PositionType POSITION_TYPE_INS_ODO =
    GlobalPose_PositionType_POSITION_TYPE_INS_ODO;
  static const PositionType POSITION_TYPE_INS_MAP =
    GlobalPose_PositionType_POSITION_TYPE_INS_MAP;
  static const PositionType POSITION_TYPE_MAP =
    GlobalPose_PositionType_POSITION_TYPE_MAP;
  static const PositionType POSITION_TYPE_GNSS_PPP_CONVERGING =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_PPP_CONVERGING;
  static const PositionType POSITION_TYPE_GNSS_PPP =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_PPP;
  static const PositionType POSITION_TYPE_GNSS_OPERATIONAL =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_OPERATIONAL;
  static const PositionType POSITION_TYPE_GNSS_WARNING =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_WARNING;
  static const PositionType POSITION_TYPE_GNSS_OUT_OF_BOUNDS =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_OUT_OF_BOUNDS;
  static const PositionType POSITION_TYPE_INS_PPP_CONVERGING =
    GlobalPose_PositionType_POSITION_TYPE_INS_PPP_CONVERGING;
  static const PositionType POSITION_TYPE_INS_PPP =
    GlobalPose_PositionType_POSITION_TYPE_INS_PPP;
  static const PositionType POSITION_TYPE_GNSS_PPP_BASIC_CONVERGING =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_PPP_BASIC_CONVERGING;
  static const PositionType POSITION_TYPE_GNSS_PPP_BASIC =
    GlobalPose_PositionType_POSITION_TYPE_GNSS_PPP_BASIC;
  static const PositionType POSITION_TYPE_INS_PPP_BASIC_CONVERGING =
    GlobalPose_PositionType_POSITION_TYPE_INS_PPP_BASIC_CONVERGING;
  static const PositionType POSITION_TYPE_INS_PPP_BASIC =
    GlobalPose_PositionType_POSITION_TYPE_INS_PPP_BASIC;
  static inline bool PositionType_IsValid(int value) {
    return GlobalPose_PositionType_IsValid(value);
  }
  static const PositionType PositionType_MIN =
    GlobalPose_PositionType_PositionType_MIN;
  static const PositionType PositionType_MAX =
    GlobalPose_PositionType_PositionType_MAX;
  static const int PositionType_ARRAYSIZE =
    GlobalPose_PositionType_PositionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PositionType_descriptor() {
    return GlobalPose_PositionType_descriptor();
  }
  static inline const ::std::string& PositionType_Name(PositionType value) {
    return GlobalPose_PositionType_Name(value);
  }
  static inline bool PositionType_Parse(const ::std::string& name,
      PositionType* value) {
    return GlobalPose_PositionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .xsproto.base.GlobalPose.Gnss gnss = 26;
  bool has_gnss() const;
  void clear_gnss();
  static const int kGnssFieldNumber = 26;
  const ::xsproto::base::GlobalPose_Gnss& gnss() const;
  ::xsproto::base::GlobalPose_Gnss* release_gnss();
  ::xsproto::base::GlobalPose_Gnss* mutable_gnss();
  void set_allocated_gnss(::xsproto::base::GlobalPose_Gnss* gnss);

  // .xsproto.base.GlobalPose.InsImu imu = 27;
  bool has_imu() const;
  void clear_imu();
  static const int kImuFieldNumber = 27;
  const ::xsproto::base::GlobalPose_InsImu& imu() const;
  ::xsproto::base::GlobalPose_InsImu* release_imu();
  ::xsproto::base::GlobalPose_InsImu* mutable_imu();
  void set_allocated_imu(::xsproto::base::GlobalPose_InsImu* imu);

  // .xsproto.base.GlobalPose.Vector3D gauss_pos = 29;
  bool has_gauss_pos() const;
  void clear_gauss_pos();
  static const int kGaussPosFieldNumber = 29;
  const ::xsproto::base::GlobalPose_Vector3D& gauss_pos() const;
  ::xsproto::base::GlobalPose_Vector3D* release_gauss_pos();
  ::xsproto::base::GlobalPose_Vector3D* mutable_gauss_pos();
  void set_allocated_gauss_pos(::xsproto::base::GlobalPose_Vector3D* gauss_pos);

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // double lp_timestamp = 2;
  void clear_lp_timestamp();
  static const int kLpTimestampFieldNumber = 2;
  double lp_timestamp() const;
  void set_lp_timestamp(double value);

  // uint32 seq_id = 3;
  void clear_seq_id();
  static const int kSeqIdFieldNumber = 3;
  ::google::protobuf::uint32 seq_id() const;
  void set_seq_id(::google::protobuf::uint32 value);

  // uint32 gps_week = 4;
  void clear_gps_week();
  static const int kGpsWeekFieldNumber = 4;
  ::google::protobuf::uint32 gps_week() const;
  void set_gps_week(::google::protobuf::uint32 value);

  // uint32 gps_millisecond = 5;
  void clear_gps_millisecond();
  static const int kGpsMillisecondFieldNumber = 5;
  ::google::protobuf::uint32 gps_millisecond() const;
  void set_gps_millisecond(::google::protobuf::uint32 value);

  // uint32 satellites = 6;
  void clear_satellites();
  static const int kSatellitesFieldNumber = 6;
  ::google::protobuf::uint32 satellites() const;
  void set_satellites(::google::protobuf::uint32 value);

  // .xsproto.base.GlobalPose.PositionModel position_model = 7;
  void clear_position_model();
  static const int kPositionModelFieldNumber = 7;
  ::xsproto::base::GlobalPose_PositionModel position_model() const;
  void set_position_model(::xsproto::base::GlobalPose_PositionModel value);

  // .xsproto.base.GlobalPose.PositionState position_state = 8;
  void clear_position_state();
  static const int kPositionStateFieldNumber = 8;
  ::xsproto::base::GlobalPose_PositionState position_state() const;
  void set_position_state(::xsproto::base::GlobalPose_PositionState value);

  // double latitude = 10;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 10;
  double latitude() const;
  void set_latitude(double value);

  // double longitude = 11;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 11;
  double longitude() const;
  void set_longitude(double value);

  // double altitude = 12;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 12;
  double altitude() const;
  void set_altitude(double value);

  // double roll = 13;
  void clear_roll();
  static const int kRollFieldNumber = 13;
  double roll() const;
  void set_roll(double value);

  // double pitch = 14;
  void clear_pitch();
  static const int kPitchFieldNumber = 14;
  double pitch() const;
  void set_pitch(double value);

  // double azimuth = 15;
  void clear_azimuth();
  static const int kAzimuthFieldNumber = 15;
  double azimuth() const;
  void set_azimuth(double value);

  // double speed = 16;
  void clear_speed();
  static const int kSpeedFieldNumber = 16;
  double speed() const;
  void set_speed(double value);

  // double v_up = 17;
  void clear_v_up();
  static const int kVUpFieldNumber = 17;
  double v_up() const;
  void set_v_up(double value);

  // double v_east = 18;
  void clear_v_east();
  static const int kVEastFieldNumber = 18;
  double v_east() const;
  void set_v_east(double value);

  // .xsproto.base.GlobalPose.PositionType position_type = 9;
  void clear_position_type();
  static const int kPositionTypeFieldNumber = 9;
  ::xsproto::base::GlobalPose_PositionType position_type() const;
  void set_position_type(::xsproto::base::GlobalPose_PositionType value);

  // uint32 zone = 28;
  void clear_zone();
  static const int kZoneFieldNumber = 28;
  ::google::protobuf::uint32 zone() const;
  void set_zone(::google::protobuf::uint32 value);

  // double v_north = 19;
  void clear_v_north();
  static const int kVNorthFieldNumber = 19;
  double v_north() const;
  void set_v_north(double value);

  // double latitude_dev = 20;
  void clear_latitude_dev();
  static const int kLatitudeDevFieldNumber = 20;
  double latitude_dev() const;
  void set_latitude_dev(double value);

  // double longitude_dev = 21;
  void clear_longitude_dev();
  static const int kLongitudeDevFieldNumber = 21;
  double longitude_dev() const;
  void set_longitude_dev(double value);

  // double altitude_dev = 22;
  void clear_altitude_dev();
  static const int kAltitudeDevFieldNumber = 22;
  double altitude_dev() const;
  void set_altitude_dev(double value);

  // double roll_dev = 23;
  void clear_roll_dev();
  static const int kRollDevFieldNumber = 23;
  double roll_dev() const;
  void set_roll_dev(double value);

  // double pitch_dev = 24;
  void clear_pitch_dev();
  static const int kPitchDevFieldNumber = 24;
  double pitch_dev() const;
  void set_pitch_dev(double value);

  // double azimuth_dev = 25;
  void clear_azimuth_dev();
  static const int kAzimuthDevFieldNumber = 25;
  double azimuth_dev() const;
  void set_azimuth_dev(double value);

  // double arm_body_imu_rx = 30;
  void clear_arm_body_imu_rx();
  static const int kArmBodyImuRxFieldNumber = 30;
  double arm_body_imu_rx() const;
  void set_arm_body_imu_rx(double value);

  // double arm_body_imu_ry = 31;
  void clear_arm_body_imu_ry();
  static const int kArmBodyImuRyFieldNumber = 31;
  double arm_body_imu_ry() const;
  void set_arm_body_imu_ry(double value);

  // double arm_body_imu_rz = 32;
  void clear_arm_body_imu_rz();
  static const int kArmBodyImuRzFieldNumber = 32;
  double arm_body_imu_rz() const;
  void set_arm_body_imu_rz(double value);

  // double arm_body_imu_tx = 33;
  void clear_arm_body_imu_tx();
  static const int kArmBodyImuTxFieldNumber = 33;
  double arm_body_imu_tx() const;
  void set_arm_body_imu_tx(double value);

  // double arm_body_imu_ty = 34;
  void clear_arm_body_imu_ty();
  static const int kArmBodyImuTyFieldNumber = 34;
  double arm_body_imu_ty() const;
  void set_arm_body_imu_ty(double value);

  // double arm_body_imu_tz = 35;
  void clear_arm_body_imu_tz();
  static const int kArmBodyImuTzFieldNumber = 35;
  double arm_body_imu_tz() const;
  void set_arm_body_imu_tz(double value);

  // @@protoc_insertion_point(class_scope:xsproto.base.GlobalPose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::xsproto::base::GlobalPose_Gnss* gnss_;
  ::xsproto::base::GlobalPose_InsImu* imu_;
  ::xsproto::base::GlobalPose_Vector3D* gauss_pos_;
  double timestamp_;
  double lp_timestamp_;
  ::google::protobuf::uint32 seq_id_;
  ::google::protobuf::uint32 gps_week_;
  ::google::protobuf::uint32 gps_millisecond_;
  ::google::protobuf::uint32 satellites_;
  int position_model_;
  int position_state_;
  double latitude_;
  double longitude_;
  double altitude_;
  double roll_;
  double pitch_;
  double azimuth_;
  double speed_;
  double v_up_;
  double v_east_;
  int position_type_;
  ::google::protobuf::uint32 zone_;
  double v_north_;
  double latitude_dev_;
  double longitude_dev_;
  double altitude_dev_;
  double roll_dev_;
  double pitch_dev_;
  double azimuth_dev_;
  double arm_body_imu_rx_;
  double arm_body_imu_ry_;
  double arm_body_imu_rz_;
  double arm_body_imu_tx_;
  double arm_body_imu_ty_;
  double arm_body_imu_tz_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2fglobal_5fpose_2eproto::TableStruct;
  friend void ::protobuf_base_2fglobal_5fpose_2eproto::InitDefaultsGlobalPoseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GlobalPose_Vector3D

// double x = 1;
inline void GlobalPose_Vector3D::clear_x() {
  x_ = 0;
}
inline double GlobalPose_Vector3D::x() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Vector3D.x)
  return x_;
}
inline void GlobalPose_Vector3D::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Vector3D.x)
}

// double y = 2;
inline void GlobalPose_Vector3D::clear_y() {
  y_ = 0;
}
inline double GlobalPose_Vector3D::y() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Vector3D.y)
  return y_;
}
inline void GlobalPose_Vector3D::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Vector3D.y)
}

// double z = 3;
inline void GlobalPose_Vector3D::clear_z() {
  z_ = 0;
}
inline double GlobalPose_Vector3D::z() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Vector3D.z)
  return z_;
}
inline void GlobalPose_Vector3D::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Vector3D.z)
}

// -------------------------------------------------------------------

// GlobalPose_Gnss

// double latitude = 1;
inline void GlobalPose_Gnss::clear_latitude() {
  latitude_ = 0;
}
inline double GlobalPose_Gnss::latitude() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.latitude)
  return latitude_;
}
inline void GlobalPose_Gnss::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.latitude)
}

// double longitude = 2;
inline void GlobalPose_Gnss::clear_longitude() {
  longitude_ = 0;
}
inline double GlobalPose_Gnss::longitude() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.longitude)
  return longitude_;
}
inline void GlobalPose_Gnss::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.longitude)
}

// double altitude = 3;
inline void GlobalPose_Gnss::clear_altitude() {
  altitude_ = 0;
}
inline double GlobalPose_Gnss::altitude() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.altitude)
  return altitude_;
}
inline void GlobalPose_Gnss::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.altitude)
}

// double azimuth = 4;
inline void GlobalPose_Gnss::clear_azimuth() {
  azimuth_ = 0;
}
inline double GlobalPose_Gnss::azimuth() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.azimuth)
  return azimuth_;
}
inline void GlobalPose_Gnss::set_azimuth(double value) {
  
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.azimuth)
}

// double latitude_dev = 5;
inline void GlobalPose_Gnss::clear_latitude_dev() {
  latitude_dev_ = 0;
}
inline double GlobalPose_Gnss::latitude_dev() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.latitude_dev)
  return latitude_dev_;
}
inline void GlobalPose_Gnss::set_latitude_dev(double value) {
  
  latitude_dev_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.latitude_dev)
}

// double longitude_dev = 6;
inline void GlobalPose_Gnss::clear_longitude_dev() {
  longitude_dev_ = 0;
}
inline double GlobalPose_Gnss::longitude_dev() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.longitude_dev)
  return longitude_dev_;
}
inline void GlobalPose_Gnss::set_longitude_dev(double value) {
  
  longitude_dev_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.longitude_dev)
}

// double altitude_dev = 7;
inline void GlobalPose_Gnss::clear_altitude_dev() {
  altitude_dev_ = 0;
}
inline double GlobalPose_Gnss::altitude_dev() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.altitude_dev)
  return altitude_dev_;
}
inline void GlobalPose_Gnss::set_altitude_dev(double value) {
  
  altitude_dev_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.altitude_dev)
}

// double azimuth_dev = 8;
inline void GlobalPose_Gnss::clear_azimuth_dev() {
  azimuth_dev_ = 0;
}
inline double GlobalPose_Gnss::azimuth_dev() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.azimuth_dev)
  return azimuth_dev_;
}
inline void GlobalPose_Gnss::set_azimuth_dev(double value) {
  
  azimuth_dev_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.azimuth_dev)
}

// uint32 gps_week = 9;
inline void GlobalPose_Gnss::clear_gps_week() {
  gps_week_ = 0u;
}
inline ::google::protobuf::uint32 GlobalPose_Gnss::gps_week() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.gps_week)
  return gps_week_;
}
inline void GlobalPose_Gnss::set_gps_week(::google::protobuf::uint32 value) {
  
  gps_week_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.gps_week)
}

// uint32 gps_millisecond = 10;
inline void GlobalPose_Gnss::clear_gps_millisecond() {
  gps_millisecond_ = 0u;
}
inline ::google::protobuf::uint32 GlobalPose_Gnss::gps_millisecond() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.gps_millisecond)
  return gps_millisecond_;
}
inline void GlobalPose_Gnss::set_gps_millisecond(::google::protobuf::uint32 value) {
  
  gps_millisecond_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.gps_millisecond)
}

// .xsproto.base.GlobalPose.Vector3D gauss_pos = 11;
inline bool GlobalPose_Gnss::has_gauss_pos() const {
  return this != internal_default_instance() && gauss_pos_ != NULL;
}
inline void GlobalPose_Gnss::clear_gauss_pos() {
  if (GetArenaNoVirtual() == NULL && gauss_pos_ != NULL) {
    delete gauss_pos_;
  }
  gauss_pos_ = NULL;
}
inline const ::xsproto::base::GlobalPose_Vector3D& GlobalPose_Gnss::gauss_pos() const {
  const ::xsproto::base::GlobalPose_Vector3D* p = gauss_pos_;
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.gauss_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::GlobalPose_Vector3D*>(
      &::xsproto::base::_GlobalPose_Vector3D_default_instance_);
}
inline ::xsproto::base::GlobalPose_Vector3D* GlobalPose_Gnss::release_gauss_pos() {
  // @@protoc_insertion_point(field_release:xsproto.base.GlobalPose.Gnss.gauss_pos)
  
  ::xsproto::base::GlobalPose_Vector3D* temp = gauss_pos_;
  gauss_pos_ = NULL;
  return temp;
}
inline ::xsproto::base::GlobalPose_Vector3D* GlobalPose_Gnss::mutable_gauss_pos() {
  
  if (gauss_pos_ == NULL) {
    gauss_pos_ = new ::xsproto::base::GlobalPose_Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.GlobalPose.Gnss.gauss_pos)
  return gauss_pos_;
}
inline void GlobalPose_Gnss::set_allocated_gauss_pos(::xsproto::base::GlobalPose_Vector3D* gauss_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gauss_pos_;
  }
  if (gauss_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gauss_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gauss_pos, submessage_arena);
    }
    
  } else {
    
  }
  gauss_pos_ = gauss_pos;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.GlobalPose.Gnss.gauss_pos)
}

// double roll = 12;
inline void GlobalPose_Gnss::clear_roll() {
  roll_ = 0;
}
inline double GlobalPose_Gnss::roll() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.roll)
  return roll_;
}
inline void GlobalPose_Gnss::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.roll)
}

// double pitch = 13;
inline void GlobalPose_Gnss::clear_pitch() {
  pitch_ = 0;
}
inline double GlobalPose_Gnss::pitch() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.pitch)
  return pitch_;
}
inline void GlobalPose_Gnss::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.pitch)
}

// .xsproto.base.GlobalPose.PositionType position_type = 14;
inline void GlobalPose_Gnss::clear_position_type() {
  position_type_ = 0;
}
inline ::xsproto::base::GlobalPose_PositionType GlobalPose_Gnss::position_type() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.position_type)
  return static_cast< ::xsproto::base::GlobalPose_PositionType >(position_type_);
}
inline void GlobalPose_Gnss::set_position_type(::xsproto::base::GlobalPose_PositionType value) {
  
  position_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.position_type)
}

// .xsproto.base.GlobalPose.PositionModel position_model = 15;
inline void GlobalPose_Gnss::clear_position_model() {
  position_model_ = 0;
}
inline ::xsproto::base::GlobalPose_PositionModel GlobalPose_Gnss::position_model() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.position_model)
  return static_cast< ::xsproto::base::GlobalPose_PositionModel >(position_model_);
}
inline void GlobalPose_Gnss::set_position_model(::xsproto::base::GlobalPose_PositionModel value) {
  
  position_model_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.position_model)
}

// uint32 satellites = 16;
inline void GlobalPose_Gnss::clear_satellites() {
  satellites_ = 0u;
}
inline ::google::protobuf::uint32 GlobalPose_Gnss::satellites() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.satellites)
  return satellites_;
}
inline void GlobalPose_Gnss::set_satellites(::google::protobuf::uint32 value) {
  
  satellites_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.satellites)
}

// double v_up = 17;
inline void GlobalPose_Gnss::clear_v_up() {
  v_up_ = 0;
}
inline double GlobalPose_Gnss::v_up() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.v_up)
  return v_up_;
}
inline void GlobalPose_Gnss::set_v_up(double value) {
  
  v_up_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.v_up)
}

// double v_east = 18;
inline void GlobalPose_Gnss::clear_v_east() {
  v_east_ = 0;
}
inline double GlobalPose_Gnss::v_east() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.v_east)
  return v_east_;
}
inline void GlobalPose_Gnss::set_v_east(double value) {
  
  v_east_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.v_east)
}

// double v_north = 19;
inline void GlobalPose_Gnss::clear_v_north() {
  v_north_ = 0;
}
inline double GlobalPose_Gnss::v_north() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.v_north)
  return v_north_;
}
inline void GlobalPose_Gnss::set_v_north(double value) {
  
  v_north_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.v_north)
}

// double timestamp = 20;
inline void GlobalPose_Gnss::clear_timestamp() {
  timestamp_ = 0;
}
inline double GlobalPose_Gnss::timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.timestamp)
  return timestamp_;
}
inline void GlobalPose_Gnss::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.timestamp)
}

// .xsproto.base.GlobalPose.PositionState position_state = 21;
inline void GlobalPose_Gnss::clear_position_state() {
  position_state_ = 0;
}
inline ::xsproto::base::GlobalPose_PositionState GlobalPose_Gnss::position_state() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.Gnss.position_state)
  return static_cast< ::xsproto::base::GlobalPose_PositionState >(position_state_);
}
inline void GlobalPose_Gnss::set_position_state(::xsproto::base::GlobalPose_PositionState value) {
  
  position_state_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.Gnss.position_state)
}

// -------------------------------------------------------------------

// GlobalPose_InsImu

// .xsproto.base.GlobalPose.Vector3D accel = 1;
inline bool GlobalPose_InsImu::has_accel() const {
  return this != internal_default_instance() && accel_ != NULL;
}
inline void GlobalPose_InsImu::clear_accel() {
  if (GetArenaNoVirtual() == NULL && accel_ != NULL) {
    delete accel_;
  }
  accel_ = NULL;
}
inline const ::xsproto::base::GlobalPose_Vector3D& GlobalPose_InsImu::accel() const {
  const ::xsproto::base::GlobalPose_Vector3D* p = accel_;
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.InsImu.accel)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::GlobalPose_Vector3D*>(
      &::xsproto::base::_GlobalPose_Vector3D_default_instance_);
}
inline ::xsproto::base::GlobalPose_Vector3D* GlobalPose_InsImu::release_accel() {
  // @@protoc_insertion_point(field_release:xsproto.base.GlobalPose.InsImu.accel)
  
  ::xsproto::base::GlobalPose_Vector3D* temp = accel_;
  accel_ = NULL;
  return temp;
}
inline ::xsproto::base::GlobalPose_Vector3D* GlobalPose_InsImu::mutable_accel() {
  
  if (accel_ == NULL) {
    accel_ = new ::xsproto::base::GlobalPose_Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.GlobalPose.InsImu.accel)
  return accel_;
}
inline void GlobalPose_InsImu::set_allocated_accel(::xsproto::base::GlobalPose_Vector3D* accel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accel_;
  }
  if (accel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accel, submessage_arena);
    }
    
  } else {
    
  }
  accel_ = accel;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.GlobalPose.InsImu.accel)
}

// .xsproto.base.GlobalPose.Vector3D gyro = 2;
inline bool GlobalPose_InsImu::has_gyro() const {
  return this != internal_default_instance() && gyro_ != NULL;
}
inline void GlobalPose_InsImu::clear_gyro() {
  if (GetArenaNoVirtual() == NULL && gyro_ != NULL) {
    delete gyro_;
  }
  gyro_ = NULL;
}
inline const ::xsproto::base::GlobalPose_Vector3D& GlobalPose_InsImu::gyro() const {
  const ::xsproto::base::GlobalPose_Vector3D* p = gyro_;
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.InsImu.gyro)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::GlobalPose_Vector3D*>(
      &::xsproto::base::_GlobalPose_Vector3D_default_instance_);
}
inline ::xsproto::base::GlobalPose_Vector3D* GlobalPose_InsImu::release_gyro() {
  // @@protoc_insertion_point(field_release:xsproto.base.GlobalPose.InsImu.gyro)
  
  ::xsproto::base::GlobalPose_Vector3D* temp = gyro_;
  gyro_ = NULL;
  return temp;
}
inline ::xsproto::base::GlobalPose_Vector3D* GlobalPose_InsImu::mutable_gyro() {
  
  if (gyro_ == NULL) {
    gyro_ = new ::xsproto::base::GlobalPose_Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.GlobalPose.InsImu.gyro)
  return gyro_;
}
inline void GlobalPose_InsImu::set_allocated_gyro(::xsproto::base::GlobalPose_Vector3D* gyro) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gyro_;
  }
  if (gyro) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gyro = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gyro, submessage_arena);
    }
    
  } else {
    
  }
  gyro_ = gyro;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.GlobalPose.InsImu.gyro)
}

// -------------------------------------------------------------------

// GlobalPose

// double timestamp = 1;
inline void GlobalPose::clear_timestamp() {
  timestamp_ = 0;
}
inline double GlobalPose::timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.timestamp)
  return timestamp_;
}
inline void GlobalPose::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.timestamp)
}

// double lp_timestamp = 2;
inline void GlobalPose::clear_lp_timestamp() {
  lp_timestamp_ = 0;
}
inline double GlobalPose::lp_timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.lp_timestamp)
  return lp_timestamp_;
}
inline void GlobalPose::set_lp_timestamp(double value) {
  
  lp_timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.lp_timestamp)
}

// uint32 seq_id = 3;
inline void GlobalPose::clear_seq_id() {
  seq_id_ = 0u;
}
inline ::google::protobuf::uint32 GlobalPose::seq_id() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.seq_id)
  return seq_id_;
}
inline void GlobalPose::set_seq_id(::google::protobuf::uint32 value) {
  
  seq_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.seq_id)
}

// uint32 gps_week = 4;
inline void GlobalPose::clear_gps_week() {
  gps_week_ = 0u;
}
inline ::google::protobuf::uint32 GlobalPose::gps_week() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.gps_week)
  return gps_week_;
}
inline void GlobalPose::set_gps_week(::google::protobuf::uint32 value) {
  
  gps_week_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.gps_week)
}

// uint32 gps_millisecond = 5;
inline void GlobalPose::clear_gps_millisecond() {
  gps_millisecond_ = 0u;
}
inline ::google::protobuf::uint32 GlobalPose::gps_millisecond() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.gps_millisecond)
  return gps_millisecond_;
}
inline void GlobalPose::set_gps_millisecond(::google::protobuf::uint32 value) {
  
  gps_millisecond_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.gps_millisecond)
}

// uint32 satellites = 6;
inline void GlobalPose::clear_satellites() {
  satellites_ = 0u;
}
inline ::google::protobuf::uint32 GlobalPose::satellites() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.satellites)
  return satellites_;
}
inline void GlobalPose::set_satellites(::google::protobuf::uint32 value) {
  
  satellites_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.satellites)
}

// .xsproto.base.GlobalPose.PositionModel position_model = 7;
inline void GlobalPose::clear_position_model() {
  position_model_ = 0;
}
inline ::xsproto::base::GlobalPose_PositionModel GlobalPose::position_model() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.position_model)
  return static_cast< ::xsproto::base::GlobalPose_PositionModel >(position_model_);
}
inline void GlobalPose::set_position_model(::xsproto::base::GlobalPose_PositionModel value) {
  
  position_model_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.position_model)
}

// .xsproto.base.GlobalPose.PositionState position_state = 8;
inline void GlobalPose::clear_position_state() {
  position_state_ = 0;
}
inline ::xsproto::base::GlobalPose_PositionState GlobalPose::position_state() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.position_state)
  return static_cast< ::xsproto::base::GlobalPose_PositionState >(position_state_);
}
inline void GlobalPose::set_position_state(::xsproto::base::GlobalPose_PositionState value) {
  
  position_state_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.position_state)
}

// .xsproto.base.GlobalPose.PositionType position_type = 9;
inline void GlobalPose::clear_position_type() {
  position_type_ = 0;
}
inline ::xsproto::base::GlobalPose_PositionType GlobalPose::position_type() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.position_type)
  return static_cast< ::xsproto::base::GlobalPose_PositionType >(position_type_);
}
inline void GlobalPose::set_position_type(::xsproto::base::GlobalPose_PositionType value) {
  
  position_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.position_type)
}

// double latitude = 10;
inline void GlobalPose::clear_latitude() {
  latitude_ = 0;
}
inline double GlobalPose::latitude() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.latitude)
  return latitude_;
}
inline void GlobalPose::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.latitude)
}

// double longitude = 11;
inline void GlobalPose::clear_longitude() {
  longitude_ = 0;
}
inline double GlobalPose::longitude() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.longitude)
  return longitude_;
}
inline void GlobalPose::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.longitude)
}

// double altitude = 12;
inline void GlobalPose::clear_altitude() {
  altitude_ = 0;
}
inline double GlobalPose::altitude() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.altitude)
  return altitude_;
}
inline void GlobalPose::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.altitude)
}

// double roll = 13;
inline void GlobalPose::clear_roll() {
  roll_ = 0;
}
inline double GlobalPose::roll() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.roll)
  return roll_;
}
inline void GlobalPose::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.roll)
}

// double pitch = 14;
inline void GlobalPose::clear_pitch() {
  pitch_ = 0;
}
inline double GlobalPose::pitch() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.pitch)
  return pitch_;
}
inline void GlobalPose::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.pitch)
}

// double azimuth = 15;
inline void GlobalPose::clear_azimuth() {
  azimuth_ = 0;
}
inline double GlobalPose::azimuth() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.azimuth)
  return azimuth_;
}
inline void GlobalPose::set_azimuth(double value) {
  
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.azimuth)
}

// double speed = 16;
inline void GlobalPose::clear_speed() {
  speed_ = 0;
}
inline double GlobalPose::speed() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.speed)
  return speed_;
}
inline void GlobalPose::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.speed)
}

// double v_up = 17;
inline void GlobalPose::clear_v_up() {
  v_up_ = 0;
}
inline double GlobalPose::v_up() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.v_up)
  return v_up_;
}
inline void GlobalPose::set_v_up(double value) {
  
  v_up_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.v_up)
}

// double v_east = 18;
inline void GlobalPose::clear_v_east() {
  v_east_ = 0;
}
inline double GlobalPose::v_east() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.v_east)
  return v_east_;
}
inline void GlobalPose::set_v_east(double value) {
  
  v_east_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.v_east)
}

// double v_north = 19;
inline void GlobalPose::clear_v_north() {
  v_north_ = 0;
}
inline double GlobalPose::v_north() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.v_north)
  return v_north_;
}
inline void GlobalPose::set_v_north(double value) {
  
  v_north_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.v_north)
}

// double latitude_dev = 20;
inline void GlobalPose::clear_latitude_dev() {
  latitude_dev_ = 0;
}
inline double GlobalPose::latitude_dev() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.latitude_dev)
  return latitude_dev_;
}
inline void GlobalPose::set_latitude_dev(double value) {
  
  latitude_dev_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.latitude_dev)
}

// double longitude_dev = 21;
inline void GlobalPose::clear_longitude_dev() {
  longitude_dev_ = 0;
}
inline double GlobalPose::longitude_dev() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.longitude_dev)
  return longitude_dev_;
}
inline void GlobalPose::set_longitude_dev(double value) {
  
  longitude_dev_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.longitude_dev)
}

// double altitude_dev = 22;
inline void GlobalPose::clear_altitude_dev() {
  altitude_dev_ = 0;
}
inline double GlobalPose::altitude_dev() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.altitude_dev)
  return altitude_dev_;
}
inline void GlobalPose::set_altitude_dev(double value) {
  
  altitude_dev_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.altitude_dev)
}

// double roll_dev = 23;
inline void GlobalPose::clear_roll_dev() {
  roll_dev_ = 0;
}
inline double GlobalPose::roll_dev() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.roll_dev)
  return roll_dev_;
}
inline void GlobalPose::set_roll_dev(double value) {
  
  roll_dev_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.roll_dev)
}

// double pitch_dev = 24;
inline void GlobalPose::clear_pitch_dev() {
  pitch_dev_ = 0;
}
inline double GlobalPose::pitch_dev() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.pitch_dev)
  return pitch_dev_;
}
inline void GlobalPose::set_pitch_dev(double value) {
  
  pitch_dev_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.pitch_dev)
}

// double azimuth_dev = 25;
inline void GlobalPose::clear_azimuth_dev() {
  azimuth_dev_ = 0;
}
inline double GlobalPose::azimuth_dev() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.azimuth_dev)
  return azimuth_dev_;
}
inline void GlobalPose::set_azimuth_dev(double value) {
  
  azimuth_dev_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.azimuth_dev)
}

// .xsproto.base.GlobalPose.Gnss gnss = 26;
inline bool GlobalPose::has_gnss() const {
  return this != internal_default_instance() && gnss_ != NULL;
}
inline void GlobalPose::clear_gnss() {
  if (GetArenaNoVirtual() == NULL && gnss_ != NULL) {
    delete gnss_;
  }
  gnss_ = NULL;
}
inline const ::xsproto::base::GlobalPose_Gnss& GlobalPose::gnss() const {
  const ::xsproto::base::GlobalPose_Gnss* p = gnss_;
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.gnss)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::GlobalPose_Gnss*>(
      &::xsproto::base::_GlobalPose_Gnss_default_instance_);
}
inline ::xsproto::base::GlobalPose_Gnss* GlobalPose::release_gnss() {
  // @@protoc_insertion_point(field_release:xsproto.base.GlobalPose.gnss)
  
  ::xsproto::base::GlobalPose_Gnss* temp = gnss_;
  gnss_ = NULL;
  return temp;
}
inline ::xsproto::base::GlobalPose_Gnss* GlobalPose::mutable_gnss() {
  
  if (gnss_ == NULL) {
    gnss_ = new ::xsproto::base::GlobalPose_Gnss;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.GlobalPose.gnss)
  return gnss_;
}
inline void GlobalPose::set_allocated_gnss(::xsproto::base::GlobalPose_Gnss* gnss) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gnss_;
  }
  if (gnss) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gnss = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gnss, submessage_arena);
    }
    
  } else {
    
  }
  gnss_ = gnss;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.GlobalPose.gnss)
}

// .xsproto.base.GlobalPose.InsImu imu = 27;
inline bool GlobalPose::has_imu() const {
  return this != internal_default_instance() && imu_ != NULL;
}
inline void GlobalPose::clear_imu() {
  if (GetArenaNoVirtual() == NULL && imu_ != NULL) {
    delete imu_;
  }
  imu_ = NULL;
}
inline const ::xsproto::base::GlobalPose_InsImu& GlobalPose::imu() const {
  const ::xsproto::base::GlobalPose_InsImu* p = imu_;
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.imu)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::GlobalPose_InsImu*>(
      &::xsproto::base::_GlobalPose_InsImu_default_instance_);
}
inline ::xsproto::base::GlobalPose_InsImu* GlobalPose::release_imu() {
  // @@protoc_insertion_point(field_release:xsproto.base.GlobalPose.imu)
  
  ::xsproto::base::GlobalPose_InsImu* temp = imu_;
  imu_ = NULL;
  return temp;
}
inline ::xsproto::base::GlobalPose_InsImu* GlobalPose::mutable_imu() {
  
  if (imu_ == NULL) {
    imu_ = new ::xsproto::base::GlobalPose_InsImu;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.GlobalPose.imu)
  return imu_;
}
inline void GlobalPose::set_allocated_imu(::xsproto::base::GlobalPose_InsImu* imu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete imu_;
  }
  if (imu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      imu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    
  } else {
    
  }
  imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.GlobalPose.imu)
}

// uint32 zone = 28;
inline void GlobalPose::clear_zone() {
  zone_ = 0u;
}
inline ::google::protobuf::uint32 GlobalPose::zone() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.zone)
  return zone_;
}
inline void GlobalPose::set_zone(::google::protobuf::uint32 value) {
  
  zone_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.zone)
}

// .xsproto.base.GlobalPose.Vector3D gauss_pos = 29;
inline bool GlobalPose::has_gauss_pos() const {
  return this != internal_default_instance() && gauss_pos_ != NULL;
}
inline void GlobalPose::clear_gauss_pos() {
  if (GetArenaNoVirtual() == NULL && gauss_pos_ != NULL) {
    delete gauss_pos_;
  }
  gauss_pos_ = NULL;
}
inline const ::xsproto::base::GlobalPose_Vector3D& GlobalPose::gauss_pos() const {
  const ::xsproto::base::GlobalPose_Vector3D* p = gauss_pos_;
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.gauss_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::GlobalPose_Vector3D*>(
      &::xsproto::base::_GlobalPose_Vector3D_default_instance_);
}
inline ::xsproto::base::GlobalPose_Vector3D* GlobalPose::release_gauss_pos() {
  // @@protoc_insertion_point(field_release:xsproto.base.GlobalPose.gauss_pos)
  
  ::xsproto::base::GlobalPose_Vector3D* temp = gauss_pos_;
  gauss_pos_ = NULL;
  return temp;
}
inline ::xsproto::base::GlobalPose_Vector3D* GlobalPose::mutable_gauss_pos() {
  
  if (gauss_pos_ == NULL) {
    gauss_pos_ = new ::xsproto::base::GlobalPose_Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.GlobalPose.gauss_pos)
  return gauss_pos_;
}
inline void GlobalPose::set_allocated_gauss_pos(::xsproto::base::GlobalPose_Vector3D* gauss_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gauss_pos_;
  }
  if (gauss_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gauss_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gauss_pos, submessage_arena);
    }
    
  } else {
    
  }
  gauss_pos_ = gauss_pos;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.GlobalPose.gauss_pos)
}

// double arm_body_imu_rx = 30;
inline void GlobalPose::clear_arm_body_imu_rx() {
  arm_body_imu_rx_ = 0;
}
inline double GlobalPose::arm_body_imu_rx() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.arm_body_imu_rx)
  return arm_body_imu_rx_;
}
inline void GlobalPose::set_arm_body_imu_rx(double value) {
  
  arm_body_imu_rx_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.arm_body_imu_rx)
}

// double arm_body_imu_ry = 31;
inline void GlobalPose::clear_arm_body_imu_ry() {
  arm_body_imu_ry_ = 0;
}
inline double GlobalPose::arm_body_imu_ry() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.arm_body_imu_ry)
  return arm_body_imu_ry_;
}
inline void GlobalPose::set_arm_body_imu_ry(double value) {
  
  arm_body_imu_ry_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.arm_body_imu_ry)
}

// double arm_body_imu_rz = 32;
inline void GlobalPose::clear_arm_body_imu_rz() {
  arm_body_imu_rz_ = 0;
}
inline double GlobalPose::arm_body_imu_rz() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.arm_body_imu_rz)
  return arm_body_imu_rz_;
}
inline void GlobalPose::set_arm_body_imu_rz(double value) {
  
  arm_body_imu_rz_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.arm_body_imu_rz)
}

// double arm_body_imu_tx = 33;
inline void GlobalPose::clear_arm_body_imu_tx() {
  arm_body_imu_tx_ = 0;
}
inline double GlobalPose::arm_body_imu_tx() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.arm_body_imu_tx)
  return arm_body_imu_tx_;
}
inline void GlobalPose::set_arm_body_imu_tx(double value) {
  
  arm_body_imu_tx_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.arm_body_imu_tx)
}

// double arm_body_imu_ty = 34;
inline void GlobalPose::clear_arm_body_imu_ty() {
  arm_body_imu_ty_ = 0;
}
inline double GlobalPose::arm_body_imu_ty() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.arm_body_imu_ty)
  return arm_body_imu_ty_;
}
inline void GlobalPose::set_arm_body_imu_ty(double value) {
  
  arm_body_imu_ty_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.arm_body_imu_ty)
}

// double arm_body_imu_tz = 35;
inline void GlobalPose::clear_arm_body_imu_tz() {
  arm_body_imu_tz_ = 0;
}
inline double GlobalPose::arm_body_imu_tz() const {
  // @@protoc_insertion_point(field_get:xsproto.base.GlobalPose.arm_body_imu_tz)
  return arm_body_imu_tz_;
}
inline void GlobalPose::set_arm_body_imu_tz(double value) {
  
  arm_body_imu_tz_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.GlobalPose.arm_body_imu_tz)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace xsproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xsproto::base::GlobalPose_PositionModel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::base::GlobalPose_PositionModel>() {
  return ::xsproto::base::GlobalPose_PositionModel_descriptor();
}
template <> struct is_proto_enum< ::xsproto::base::GlobalPose_PositionState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::base::GlobalPose_PositionState>() {
  return ::xsproto::base::GlobalPose_PositionState_descriptor();
}
template <> struct is_proto_enum< ::xsproto::base::GlobalPose_PositionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::base::GlobalPose_PositionType>() {
  return ::xsproto::base::GlobalPose_PositionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_2fglobal_5fpose_2eproto__INCLUDED
