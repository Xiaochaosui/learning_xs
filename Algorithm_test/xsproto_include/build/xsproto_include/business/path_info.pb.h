// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business/path_info.proto

#ifndef PROTOBUF_business_2fpath_5finfo_2eproto__INCLUDED
#define PROTOBUF_business_2fpath_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_business_2fpath_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPathInfoImpl();
void InitDefaultsPathInfo();
void InitDefaultsGPSLocationImpl();
void InitDefaultsGPSLocation();
inline void InitDefaults() {
  InitDefaultsPathInfo();
  InitDefaultsGPSLocation();
}
}  // namespace protobuf_business_2fpath_5finfo_2eproto
namespace xsproto {
namespace communication {
class GPSLocation;
class GPSLocationDefaultTypeInternal;
extern GPSLocationDefaultTypeInternal _GPSLocation_default_instance_;
class PathInfo;
class PathInfoDefaultTypeInternal;
extern PathInfoDefaultTypeInternal _PathInfo_default_instance_;
}  // namespace communication
}  // namespace xsproto
namespace xsproto {
namespace communication {

// ===================================================================

class PathInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.PathInfo) */ {
 public:
  PathInfo();
  virtual ~PathInfo();

  PathInfo(const PathInfo& from);

  inline PathInfo& operator=(const PathInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathInfo(PathInfo&& from) noexcept
    : PathInfo() {
    *this = ::std::move(from);
  }

  inline PathInfo& operator=(PathInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PathInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathInfo* internal_default_instance() {
    return reinterpret_cast<const PathInfo*>(
               &_PathInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PathInfo* other);
  friend void swap(PathInfo& a, PathInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PathInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PathInfo& from);
  void MergeFrom(const PathInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PathInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path_id = 1;
  void clear_path_id();
  static const int kPathIdFieldNumber = 1;
  const ::std::string& path_id() const;
  void set_path_id(const ::std::string& value);
  #if LANG_CXX11
  void set_path_id(::std::string&& value);
  #endif
  void set_path_id(const char* value);
  void set_path_id(const char* value, size_t size);
  ::std::string* mutable_path_id();
  ::std::string* release_path_id();
  void set_allocated_path_id(::std::string* path_id);

  // string path_name = 2;
  void clear_path_name();
  static const int kPathNameFieldNumber = 2;
  const ::std::string& path_name() const;
  void set_path_name(const ::std::string& value);
  #if LANG_CXX11
  void set_path_name(::std::string&& value);
  #endif
  void set_path_name(const char* value);
  void set_path_name(const char* value, size_t size);
  ::std::string* mutable_path_name();
  ::std::string* release_path_name();
  void set_allocated_path_name(::std::string* path_name);

  // .xsproto.communication.GPSLocation start_point = 4;
  bool has_start_point() const;
  void clear_start_point();
  static const int kStartPointFieldNumber = 4;
  const ::xsproto::communication::GPSLocation& start_point() const;
  ::xsproto::communication::GPSLocation* release_start_point();
  ::xsproto::communication::GPSLocation* mutable_start_point();
  void set_allocated_start_point(::xsproto::communication::GPSLocation* start_point);

  // .xsproto.communication.GPSLocation end_point = 5;
  bool has_end_point() const;
  void clear_end_point();
  static const int kEndPointFieldNumber = 5;
  const ::xsproto::communication::GPSLocation& end_point() const;
  ::xsproto::communication::GPSLocation* release_end_point();
  ::xsproto::communication::GPSLocation* mutable_end_point();
  void set_allocated_end_point(::xsproto::communication::GPSLocation* end_point);

  // int32 point_num = 3;
  void clear_point_num();
  static const int kPointNumFieldNumber = 3;
  ::google::protobuf::int32 point_num() const;
  void set_point_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.PathInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_id_;
  ::google::protobuf::internal::ArenaStringPtr path_name_;
  ::xsproto::communication::GPSLocation* start_point_;
  ::xsproto::communication::GPSLocation* end_point_;
  ::google::protobuf::int32 point_num_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fpath_5finfo_2eproto::TableStruct;
  friend void ::protobuf_business_2fpath_5finfo_2eproto::InitDefaultsPathInfoImpl();
};
// -------------------------------------------------------------------

class GPSLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.GPSLocation) */ {
 public:
  GPSLocation();
  virtual ~GPSLocation();

  GPSLocation(const GPSLocation& from);

  inline GPSLocation& operator=(const GPSLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GPSLocation(GPSLocation&& from) noexcept
    : GPSLocation() {
    *this = ::std::move(from);
  }

  inline GPSLocation& operator=(GPSLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GPSLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPSLocation* internal_default_instance() {
    return reinterpret_cast<const GPSLocation*>(
               &_GPSLocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GPSLocation* other);
  friend void swap(GPSLocation& a, GPSLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GPSLocation* New() const PROTOBUF_FINAL { return New(NULL); }

  GPSLocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GPSLocation& from);
  void MergeFrom(const GPSLocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GPSLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double longitude = 1;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 1;
  double longitude() const;
  void set_longitude(double value);

  // double latitude = 2;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  double latitude() const;
  void set_latitude(double value);

  // double azimuth = 3;
  void clear_azimuth();
  static const int kAzimuthFieldNumber = 3;
  double azimuth() const;
  void set_azimuth(double value);

  // double altitude = 4;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 4;
  double altitude() const;
  void set_altitude(double value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.GPSLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double longitude_;
  double latitude_;
  double azimuth_;
  double altitude_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fpath_5finfo_2eproto::TableStruct;
  friend void ::protobuf_business_2fpath_5finfo_2eproto::InitDefaultsGPSLocationImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PathInfo

// string path_id = 1;
inline void PathInfo::clear_path_id() {
  path_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PathInfo::path_id() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.PathInfo.path_id)
  return path_id_.GetNoArena();
}
inline void PathInfo::set_path_id(const ::std::string& value) {
  
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.PathInfo.path_id)
}
#if LANG_CXX11
inline void PathInfo::set_path_id(::std::string&& value) {
  
  path_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.PathInfo.path_id)
}
#endif
inline void PathInfo::set_path_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.PathInfo.path_id)
}
inline void PathInfo::set_path_id(const char* value, size_t size) {
  
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.PathInfo.path_id)
}
inline ::std::string* PathInfo::mutable_path_id() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.PathInfo.path_id)
  return path_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PathInfo::release_path_id() {
  // @@protoc_insertion_point(field_release:xsproto.communication.PathInfo.path_id)
  
  return path_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathInfo::set_allocated_path_id(::std::string* path_id) {
  if (path_id != NULL) {
    
  } else {
    
  }
  path_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_id);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.PathInfo.path_id)
}

// string path_name = 2;
inline void PathInfo::clear_path_name() {
  path_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PathInfo::path_name() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.PathInfo.path_name)
  return path_name_.GetNoArena();
}
inline void PathInfo::set_path_name(const ::std::string& value) {
  
  path_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.PathInfo.path_name)
}
#if LANG_CXX11
inline void PathInfo::set_path_name(::std::string&& value) {
  
  path_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.PathInfo.path_name)
}
#endif
inline void PathInfo::set_path_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.PathInfo.path_name)
}
inline void PathInfo::set_path_name(const char* value, size_t size) {
  
  path_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.PathInfo.path_name)
}
inline ::std::string* PathInfo::mutable_path_name() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.PathInfo.path_name)
  return path_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PathInfo::release_path_name() {
  // @@protoc_insertion_point(field_release:xsproto.communication.PathInfo.path_name)
  
  return path_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathInfo::set_allocated_path_name(::std::string* path_name) {
  if (path_name != NULL) {
    
  } else {
    
  }
  path_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_name);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.PathInfo.path_name)
}

// int32 point_num = 3;
inline void PathInfo::clear_point_num() {
  point_num_ = 0;
}
inline ::google::protobuf::int32 PathInfo::point_num() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.PathInfo.point_num)
  return point_num_;
}
inline void PathInfo::set_point_num(::google::protobuf::int32 value) {
  
  point_num_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.PathInfo.point_num)
}

// .xsproto.communication.GPSLocation start_point = 4;
inline bool PathInfo::has_start_point() const {
  return this != internal_default_instance() && start_point_ != NULL;
}
inline void PathInfo::clear_start_point() {
  if (GetArenaNoVirtual() == NULL && start_point_ != NULL) {
    delete start_point_;
  }
  start_point_ = NULL;
}
inline const ::xsproto::communication::GPSLocation& PathInfo::start_point() const {
  const ::xsproto::communication::GPSLocation* p = start_point_;
  // @@protoc_insertion_point(field_get:xsproto.communication.PathInfo.start_point)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::communication::GPSLocation*>(
      &::xsproto::communication::_GPSLocation_default_instance_);
}
inline ::xsproto::communication::GPSLocation* PathInfo::release_start_point() {
  // @@protoc_insertion_point(field_release:xsproto.communication.PathInfo.start_point)
  
  ::xsproto::communication::GPSLocation* temp = start_point_;
  start_point_ = NULL;
  return temp;
}
inline ::xsproto::communication::GPSLocation* PathInfo::mutable_start_point() {
  
  if (start_point_ == NULL) {
    start_point_ = new ::xsproto::communication::GPSLocation;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.PathInfo.start_point)
  return start_point_;
}
inline void PathInfo::set_allocated_start_point(::xsproto::communication::GPSLocation* start_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_point_;
  }
  if (start_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_point, submessage_arena);
    }
    
  } else {
    
  }
  start_point_ = start_point;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.PathInfo.start_point)
}

// .xsproto.communication.GPSLocation end_point = 5;
inline bool PathInfo::has_end_point() const {
  return this != internal_default_instance() && end_point_ != NULL;
}
inline void PathInfo::clear_end_point() {
  if (GetArenaNoVirtual() == NULL && end_point_ != NULL) {
    delete end_point_;
  }
  end_point_ = NULL;
}
inline const ::xsproto::communication::GPSLocation& PathInfo::end_point() const {
  const ::xsproto::communication::GPSLocation* p = end_point_;
  // @@protoc_insertion_point(field_get:xsproto.communication.PathInfo.end_point)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::communication::GPSLocation*>(
      &::xsproto::communication::_GPSLocation_default_instance_);
}
inline ::xsproto::communication::GPSLocation* PathInfo::release_end_point() {
  // @@protoc_insertion_point(field_release:xsproto.communication.PathInfo.end_point)
  
  ::xsproto::communication::GPSLocation* temp = end_point_;
  end_point_ = NULL;
  return temp;
}
inline ::xsproto::communication::GPSLocation* PathInfo::mutable_end_point() {
  
  if (end_point_ == NULL) {
    end_point_ = new ::xsproto::communication::GPSLocation;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.PathInfo.end_point)
  return end_point_;
}
inline void PathInfo::set_allocated_end_point(::xsproto::communication::GPSLocation* end_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete end_point_;
  }
  if (end_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_point, submessage_arena);
    }
    
  } else {
    
  }
  end_point_ = end_point;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.PathInfo.end_point)
}

// -------------------------------------------------------------------

// GPSLocation

// double longitude = 1;
inline void GPSLocation::clear_longitude() {
  longitude_ = 0;
}
inline double GPSLocation::longitude() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.GPSLocation.longitude)
  return longitude_;
}
inline void GPSLocation::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.GPSLocation.longitude)
}

// double latitude = 2;
inline void GPSLocation::clear_latitude() {
  latitude_ = 0;
}
inline double GPSLocation::latitude() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.GPSLocation.latitude)
  return latitude_;
}
inline void GPSLocation::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.GPSLocation.latitude)
}

// double azimuth = 3;
inline void GPSLocation::clear_azimuth() {
  azimuth_ = 0;
}
inline double GPSLocation::azimuth() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.GPSLocation.azimuth)
  return azimuth_;
}
inline void GPSLocation::set_azimuth(double value) {
  
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.GPSLocation.azimuth)
}

// double altitude = 4;
inline void GPSLocation::clear_altitude() {
  altitude_ = 0;
}
inline double GPSLocation::altitude() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.GPSLocation.altitude)
  return altitude_;
}
inline void GPSLocation::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.GPSLocation.altitude)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_business_2fpath_5finfo_2eproto__INCLUDED
