// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business/sync_map_info.proto

#ifndef PROTOBUF_business_2fsync_5fmap_5finfo_2eproto__INCLUDED
#define PROTOBUF_business_2fsync_5fmap_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_business_2fsync_5fmap_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSyncMapInfoResponseImpl();
void InitDefaultsSyncMapInfoResponse();
void InitDefaultsSyncMapInfoRequestImpl();
void InitDefaultsSyncMapInfoRequest();
inline void InitDefaults() {
  InitDefaultsSyncMapInfoResponse();
  InitDefaultsSyncMapInfoRequest();
}
}  // namespace protobuf_business_2fsync_5fmap_5finfo_2eproto
namespace xsproto {
namespace communication {
class SyncMapInfoRequest;
class SyncMapInfoRequestDefaultTypeInternal;
extern SyncMapInfoRequestDefaultTypeInternal _SyncMapInfoRequest_default_instance_;
class SyncMapInfoResponse;
class SyncMapInfoResponseDefaultTypeInternal;
extern SyncMapInfoResponseDefaultTypeInternal _SyncMapInfoResponse_default_instance_;
}  // namespace communication
}  // namespace xsproto
namespace xsproto {
namespace communication {

// ===================================================================

class SyncMapInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.SyncMapInfoResponse) */ {
 public:
  SyncMapInfoResponse();
  virtual ~SyncMapInfoResponse();

  SyncMapInfoResponse(const SyncMapInfoResponse& from);

  inline SyncMapInfoResponse& operator=(const SyncMapInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncMapInfoResponse(SyncMapInfoResponse&& from) noexcept
    : SyncMapInfoResponse() {
    *this = ::std::move(from);
  }

  inline SyncMapInfoResponse& operator=(SyncMapInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMapInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncMapInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SyncMapInfoResponse*>(
               &_SyncMapInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SyncMapInfoResponse* other);
  friend void swap(SyncMapInfoResponse& a, SyncMapInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncMapInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncMapInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncMapInfoResponse& from);
  void MergeFrom(const SyncMapInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncMapInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string local_sync_version = 2;
  void clear_local_sync_version();
  static const int kLocalSyncVersionFieldNumber = 2;
  const ::std::string& local_sync_version() const;
  void set_local_sync_version(const ::std::string& value);
  #if LANG_CXX11
  void set_local_sync_version(::std::string&& value);
  #endif
  void set_local_sync_version(const char* value);
  void set_local_sync_version(const char* value, size_t size);
  ::std::string* mutable_local_sync_version();
  ::std::string* release_local_sync_version();
  void set_allocated_local_sync_version(::std::string* local_sync_version);

  // string remote_sync_version = 3;
  void clear_remote_sync_version();
  static const int kRemoteSyncVersionFieldNumber = 3;
  const ::std::string& remote_sync_version() const;
  void set_remote_sync_version(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_sync_version(::std::string&& value);
  #endif
  void set_remote_sync_version(const char* value);
  void set_remote_sync_version(const char* value, size_t size);
  ::std::string* mutable_remote_sync_version();
  ::std::string* release_remote_sync_version();
  void set_allocated_remote_sync_version(::std::string* remote_sync_version);

  // bool is_sync_map = 1;
  void clear_is_sync_map();
  static const int kIsSyncMapFieldNumber = 1;
  bool is_sync_map() const;
  void set_is_sync_map(bool value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.SyncMapInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr local_sync_version_;
  ::google::protobuf::internal::ArenaStringPtr remote_sync_version_;
  bool is_sync_map_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fsync_5fmap_5finfo_2eproto::TableStruct;
  friend void ::protobuf_business_2fsync_5fmap_5finfo_2eproto::InitDefaultsSyncMapInfoResponseImpl();
};
// -------------------------------------------------------------------

class SyncMapInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.SyncMapInfoRequest) */ {
 public:
  SyncMapInfoRequest();
  virtual ~SyncMapInfoRequest();

  SyncMapInfoRequest(const SyncMapInfoRequest& from);

  inline SyncMapInfoRequest& operator=(const SyncMapInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncMapInfoRequest(SyncMapInfoRequest&& from) noexcept
    : SyncMapInfoRequest() {
    *this = ::std::move(from);
  }

  inline SyncMapInfoRequest& operator=(SyncMapInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMapInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncMapInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SyncMapInfoRequest*>(
               &_SyncMapInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SyncMapInfoRequest* other);
  friend void swap(SyncMapInfoRequest& a, SyncMapInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncMapInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncMapInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncMapInfoRequest& from);
  void MergeFrom(const SyncMapInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncMapInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cur_map_path = 1;
  void clear_cur_map_path();
  static const int kCurMapPathFieldNumber = 1;
  const ::std::string& cur_map_path() const;
  void set_cur_map_path(const ::std::string& value);
  #if LANG_CXX11
  void set_cur_map_path(::std::string&& value);
  #endif
  void set_cur_map_path(const char* value);
  void set_cur_map_path(const char* value, size_t size);
  ::std::string* mutable_cur_map_path();
  ::std::string* release_cur_map_path();
  void set_allocated_cur_map_path(::std::string* cur_map_path);

  // @@protoc_insertion_point(class_scope:xsproto.communication.SyncMapInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cur_map_path_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fsync_5fmap_5finfo_2eproto::TableStruct;
  friend void ::protobuf_business_2fsync_5fmap_5finfo_2eproto::InitDefaultsSyncMapInfoRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncMapInfoResponse

// bool is_sync_map = 1;
inline void SyncMapInfoResponse::clear_is_sync_map() {
  is_sync_map_ = false;
}
inline bool SyncMapInfoResponse::is_sync_map() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SyncMapInfoResponse.is_sync_map)
  return is_sync_map_;
}
inline void SyncMapInfoResponse::set_is_sync_map(bool value) {
  
  is_sync_map_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.SyncMapInfoResponse.is_sync_map)
}

// string local_sync_version = 2;
inline void SyncMapInfoResponse::clear_local_sync_version() {
  local_sync_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncMapInfoResponse::local_sync_version() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SyncMapInfoResponse.local_sync_version)
  return local_sync_version_.GetNoArena();
}
inline void SyncMapInfoResponse::set_local_sync_version(const ::std::string& value) {
  
  local_sync_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.SyncMapInfoResponse.local_sync_version)
}
#if LANG_CXX11
inline void SyncMapInfoResponse::set_local_sync_version(::std::string&& value) {
  
  local_sync_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.SyncMapInfoResponse.local_sync_version)
}
#endif
inline void SyncMapInfoResponse::set_local_sync_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_sync_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.SyncMapInfoResponse.local_sync_version)
}
inline void SyncMapInfoResponse::set_local_sync_version(const char* value, size_t size) {
  
  local_sync_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.SyncMapInfoResponse.local_sync_version)
}
inline ::std::string* SyncMapInfoResponse::mutable_local_sync_version() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.SyncMapInfoResponse.local_sync_version)
  return local_sync_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncMapInfoResponse::release_local_sync_version() {
  // @@protoc_insertion_point(field_release:xsproto.communication.SyncMapInfoResponse.local_sync_version)
  
  return local_sync_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncMapInfoResponse::set_allocated_local_sync_version(::std::string* local_sync_version) {
  if (local_sync_version != NULL) {
    
  } else {
    
  }
  local_sync_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_sync_version);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.SyncMapInfoResponse.local_sync_version)
}

// string remote_sync_version = 3;
inline void SyncMapInfoResponse::clear_remote_sync_version() {
  remote_sync_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncMapInfoResponse::remote_sync_version() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SyncMapInfoResponse.remote_sync_version)
  return remote_sync_version_.GetNoArena();
}
inline void SyncMapInfoResponse::set_remote_sync_version(const ::std::string& value) {
  
  remote_sync_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.SyncMapInfoResponse.remote_sync_version)
}
#if LANG_CXX11
inline void SyncMapInfoResponse::set_remote_sync_version(::std::string&& value) {
  
  remote_sync_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.SyncMapInfoResponse.remote_sync_version)
}
#endif
inline void SyncMapInfoResponse::set_remote_sync_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_sync_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.SyncMapInfoResponse.remote_sync_version)
}
inline void SyncMapInfoResponse::set_remote_sync_version(const char* value, size_t size) {
  
  remote_sync_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.SyncMapInfoResponse.remote_sync_version)
}
inline ::std::string* SyncMapInfoResponse::mutable_remote_sync_version() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.SyncMapInfoResponse.remote_sync_version)
  return remote_sync_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncMapInfoResponse::release_remote_sync_version() {
  // @@protoc_insertion_point(field_release:xsproto.communication.SyncMapInfoResponse.remote_sync_version)
  
  return remote_sync_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncMapInfoResponse::set_allocated_remote_sync_version(::std::string* remote_sync_version) {
  if (remote_sync_version != NULL) {
    
  } else {
    
  }
  remote_sync_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_sync_version);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.SyncMapInfoResponse.remote_sync_version)
}

// -------------------------------------------------------------------

// SyncMapInfoRequest

// string cur_map_path = 1;
inline void SyncMapInfoRequest::clear_cur_map_path() {
  cur_map_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncMapInfoRequest::cur_map_path() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SyncMapInfoRequest.cur_map_path)
  return cur_map_path_.GetNoArena();
}
inline void SyncMapInfoRequest::set_cur_map_path(const ::std::string& value) {
  
  cur_map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.SyncMapInfoRequest.cur_map_path)
}
#if LANG_CXX11
inline void SyncMapInfoRequest::set_cur_map_path(::std::string&& value) {
  
  cur_map_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.SyncMapInfoRequest.cur_map_path)
}
#endif
inline void SyncMapInfoRequest::set_cur_map_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cur_map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.SyncMapInfoRequest.cur_map_path)
}
inline void SyncMapInfoRequest::set_cur_map_path(const char* value, size_t size) {
  
  cur_map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.SyncMapInfoRequest.cur_map_path)
}
inline ::std::string* SyncMapInfoRequest::mutable_cur_map_path() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.SyncMapInfoRequest.cur_map_path)
  return cur_map_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncMapInfoRequest::release_cur_map_path() {
  // @@protoc_insertion_point(field_release:xsproto.communication.SyncMapInfoRequest.cur_map_path)
  
  return cur_map_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncMapInfoRequest::set_allocated_cur_map_path(::std::string* cur_map_path) {
  if (cur_map_path != NULL) {
    
  } else {
    
  }
  cur_map_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cur_map_path);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.SyncMapInfoRequest.cur_map_path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_business_2fsync_5fmap_5finfo_2eproto__INCLUDED
