// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business/data_collect_request.proto

#ifndef PROTOBUF_business_2fdata_5fcollect_5frequest_2eproto__INCLUDED
#define PROTOBUF_business_2fdata_5fcollect_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_business_2fdata_5fcollect_5frequest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDataCollectRequestImpl();
void InitDefaultsDataCollectRequest();
void InitDefaultsStartCollectImpl();
void InitDefaultsStartCollect();
void InitDefaultsChannelParamImpl();
void InitDefaultsChannelParam();
inline void InitDefaults() {
  InitDefaultsDataCollectRequest();
  InitDefaultsStartCollect();
  InitDefaultsChannelParam();
}
}  // namespace protobuf_business_2fdata_5fcollect_5frequest_2eproto
namespace xsproto {
namespace communication {
class ChannelParam;
class ChannelParamDefaultTypeInternal;
extern ChannelParamDefaultTypeInternal _ChannelParam_default_instance_;
class DataCollectRequest;
class DataCollectRequestDefaultTypeInternal;
extern DataCollectRequestDefaultTypeInternal _DataCollectRequest_default_instance_;
class StartCollect;
class StartCollectDefaultTypeInternal;
extern StartCollectDefaultTypeInternal _StartCollect_default_instance_;
}  // namespace communication
}  // namespace xsproto
namespace xsproto {
namespace communication {

enum StartCollect_CollectMode {
  StartCollect_CollectMode_FixScheme = 0,
  StartCollect_CollectMode_CurstomScheme = 1,
  StartCollect_CollectMode_StartCollect_CollectMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StartCollect_CollectMode_StartCollect_CollectMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StartCollect_CollectMode_IsValid(int value);
const StartCollect_CollectMode StartCollect_CollectMode_CollectMode_MIN = StartCollect_CollectMode_FixScheme;
const StartCollect_CollectMode StartCollect_CollectMode_CollectMode_MAX = StartCollect_CollectMode_CurstomScheme;
const int StartCollect_CollectMode_CollectMode_ARRAYSIZE = StartCollect_CollectMode_CollectMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StartCollect_CollectMode_descriptor();
inline const ::std::string& StartCollect_CollectMode_Name(StartCollect_CollectMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StartCollect_CollectMode_descriptor(), value);
}
inline bool StartCollect_CollectMode_Parse(
    const ::std::string& name, StartCollect_CollectMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StartCollect_CollectMode>(
    StartCollect_CollectMode_descriptor(), name, value);
}
enum StartCollect_FixSchemeType {
  StartCollect_FixSchemeType_TASK_NONE = 0,
  StartCollect_FixSchemeType_TASK_ALL = 1,
  StartCollect_FixSchemeType_TASK_Plan = 2,
  StartCollect_FixSchemeType_TASK_BuildMap = 3,
  StartCollect_FixSchemeType_TASK_Camera = 4,
  StartCollect_FixSchemeType_TASK_Sensor = 5,
  StartCollect_FixSchemeType_StartCollect_FixSchemeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StartCollect_FixSchemeType_StartCollect_FixSchemeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StartCollect_FixSchemeType_IsValid(int value);
const StartCollect_FixSchemeType StartCollect_FixSchemeType_FixSchemeType_MIN = StartCollect_FixSchemeType_TASK_NONE;
const StartCollect_FixSchemeType StartCollect_FixSchemeType_FixSchemeType_MAX = StartCollect_FixSchemeType_TASK_Sensor;
const int StartCollect_FixSchemeType_FixSchemeType_ARRAYSIZE = StartCollect_FixSchemeType_FixSchemeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StartCollect_FixSchemeType_descriptor();
inline const ::std::string& StartCollect_FixSchemeType_Name(StartCollect_FixSchemeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StartCollect_FixSchemeType_descriptor(), value);
}
inline bool StartCollect_FixSchemeType_Parse(
    const ::std::string& name, StartCollect_FixSchemeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StartCollect_FixSchemeType>(
    StartCollect_FixSchemeType_descriptor(), name, value);
}
// ===================================================================

class DataCollectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.DataCollectRequest) */ {
 public:
  DataCollectRequest();
  virtual ~DataCollectRequest();

  DataCollectRequest(const DataCollectRequest& from);

  inline DataCollectRequest& operator=(const DataCollectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataCollectRequest(DataCollectRequest&& from) noexcept
    : DataCollectRequest() {
    *this = ::std::move(from);
  }

  inline DataCollectRequest& operator=(DataCollectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCollectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataCollectRequest* internal_default_instance() {
    return reinterpret_cast<const DataCollectRequest*>(
               &_DataCollectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DataCollectRequest* other);
  friend void swap(DataCollectRequest& a, DataCollectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataCollectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DataCollectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataCollectRequest& from);
  void MergeFrom(const DataCollectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataCollectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename_day = 6;
  void clear_filename_day();
  static const int kFilenameDayFieldNumber = 6;
  const ::std::string& filename_day() const;
  void set_filename_day(const ::std::string& value);
  #if LANG_CXX11
  void set_filename_day(::std::string&& value);
  #endif
  void set_filename_day(const char* value);
  void set_filename_day(const char* value, size_t size);
  ::std::string* mutable_filename_day();
  ::std::string* release_filename_day();
  void set_allocated_filename_day(::std::string* filename_day);

  // string filename_sec = 7;
  void clear_filename_sec();
  static const int kFilenameSecFieldNumber = 7;
  const ::std::string& filename_sec() const;
  void set_filename_sec(const ::std::string& value);
  #if LANG_CXX11
  void set_filename_sec(::std::string&& value);
  #endif
  void set_filename_sec(const char* value);
  void set_filename_sec(const char* value, size_t size);
  ::std::string* mutable_filename_sec();
  ::std::string* release_filename_sec();
  void set_allocated_filename_sec(::std::string* filename_sec);

  // string sender_ip = 8;
  void clear_sender_ip();
  static const int kSenderIpFieldNumber = 8;
  const ::std::string& sender_ip() const;
  void set_sender_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_ip(::std::string&& value);
  #endif
  void set_sender_ip(const char* value);
  void set_sender_ip(const char* value, size_t size);
  ::std::string* mutable_sender_ip();
  ::std::string* release_sender_ip();
  void set_allocated_sender_ip(::std::string* sender_ip);

  // string message = 9;
  void clear_message();
  static const int kMessageFieldNumber = 9;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // .xsproto.communication.StartCollect start_param = 10;
  bool has_start_param() const;
  void clear_start_param();
  static const int kStartParamFieldNumber = 10;
  const ::xsproto::communication::StartCollect& start_param() const;
  ::xsproto::communication::StartCollect* release_start_param();
  ::xsproto::communication::StartCollect* mutable_start_param();
  void set_allocated_start_param(::xsproto::communication::StartCollect* start_param);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int32 seq_num = 3;
  void clear_seq_num();
  static const int kSeqNumFieldNumber = 3;
  ::google::protobuf::int32 seq_num() const;
  void set_seq_num(::google::protobuf::int32 value);

  // int32 cmd = 4;
  void clear_cmd();
  static const int kCmdFieldNumber = 4;
  ::google::protobuf::int32 cmd() const;
  void set_cmd(::google::protobuf::int32 value);

  // int32 sender = 5;
  void clear_sender();
  static const int kSenderFieldNumber = 5;
  ::google::protobuf::int32 sender() const;
  void set_sender(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.DataCollectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_day_;
  ::google::protobuf::internal::ArenaStringPtr filename_sec_;
  ::google::protobuf::internal::ArenaStringPtr sender_ip_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::xsproto::base::Header* header_;
  ::xsproto::communication::StartCollect* start_param_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 seq_num_;
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 sender_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fdata_5fcollect_5frequest_2eproto::TableStruct;
  friend void ::protobuf_business_2fdata_5fcollect_5frequest_2eproto::InitDefaultsDataCollectRequestImpl();
};
// -------------------------------------------------------------------

class StartCollect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.StartCollect) */ {
 public:
  StartCollect();
  virtual ~StartCollect();

  StartCollect(const StartCollect& from);

  inline StartCollect& operator=(const StartCollect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartCollect(StartCollect&& from) noexcept
    : StartCollect() {
    *this = ::std::move(from);
  }

  inline StartCollect& operator=(StartCollect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartCollect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartCollect* internal_default_instance() {
    return reinterpret_cast<const StartCollect*>(
               &_StartCollect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(StartCollect* other);
  friend void swap(StartCollect& a, StartCollect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartCollect* New() const PROTOBUF_FINAL { return New(NULL); }

  StartCollect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartCollect& from);
  void MergeFrom(const StartCollect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartCollect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StartCollect_CollectMode CollectMode;
  static const CollectMode FixScheme =
    StartCollect_CollectMode_FixScheme;
  static const CollectMode CurstomScheme =
    StartCollect_CollectMode_CurstomScheme;
  static inline bool CollectMode_IsValid(int value) {
    return StartCollect_CollectMode_IsValid(value);
  }
  static const CollectMode CollectMode_MIN =
    StartCollect_CollectMode_CollectMode_MIN;
  static const CollectMode CollectMode_MAX =
    StartCollect_CollectMode_CollectMode_MAX;
  static const int CollectMode_ARRAYSIZE =
    StartCollect_CollectMode_CollectMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CollectMode_descriptor() {
    return StartCollect_CollectMode_descriptor();
  }
  static inline const ::std::string& CollectMode_Name(CollectMode value) {
    return StartCollect_CollectMode_Name(value);
  }
  static inline bool CollectMode_Parse(const ::std::string& name,
      CollectMode* value) {
    return StartCollect_CollectMode_Parse(name, value);
  }

  typedef StartCollect_FixSchemeType FixSchemeType;
  static const FixSchemeType TASK_NONE =
    StartCollect_FixSchemeType_TASK_NONE;
  static const FixSchemeType TASK_ALL =
    StartCollect_FixSchemeType_TASK_ALL;
  static const FixSchemeType TASK_Plan =
    StartCollect_FixSchemeType_TASK_Plan;
  static const FixSchemeType TASK_BuildMap =
    StartCollect_FixSchemeType_TASK_BuildMap;
  static const FixSchemeType TASK_Camera =
    StartCollect_FixSchemeType_TASK_Camera;
  static const FixSchemeType TASK_Sensor =
    StartCollect_FixSchemeType_TASK_Sensor;
  static inline bool FixSchemeType_IsValid(int value) {
    return StartCollect_FixSchemeType_IsValid(value);
  }
  static const FixSchemeType FixSchemeType_MIN =
    StartCollect_FixSchemeType_FixSchemeType_MIN;
  static const FixSchemeType FixSchemeType_MAX =
    StartCollect_FixSchemeType_FixSchemeType_MAX;
  static const int FixSchemeType_ARRAYSIZE =
    StartCollect_FixSchemeType_FixSchemeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FixSchemeType_descriptor() {
    return StartCollect_FixSchemeType_descriptor();
  }
  static inline const ::std::string& FixSchemeType_Name(FixSchemeType value) {
    return StartCollect_FixSchemeType_Name(value);
  }
  static inline bool FixSchemeType_Parse(const ::std::string& name,
      FixSchemeType* value) {
    return StartCollect_FixSchemeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .xsproto.communication.ChannelParam param_list = 3;
  int param_list_size() const;
  void clear_param_list();
  static const int kParamListFieldNumber = 3;
  const ::xsproto::communication::ChannelParam& param_list(int index) const;
  ::xsproto::communication::ChannelParam* mutable_param_list(int index);
  ::xsproto::communication::ChannelParam* add_param_list();
  ::google::protobuf::RepeatedPtrField< ::xsproto::communication::ChannelParam >*
      mutable_param_list();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::communication::ChannelParam >&
      param_list() const;

  // .xsproto.communication.StartCollect.CollectMode collect_mode = 1;
  void clear_collect_mode();
  static const int kCollectModeFieldNumber = 1;
  ::xsproto::communication::StartCollect_CollectMode collect_mode() const;
  void set_collect_mode(::xsproto::communication::StartCollect_CollectMode value);

  // .xsproto.communication.StartCollect.FixSchemeType fix_scheme_type = 2;
  void clear_fix_scheme_type();
  static const int kFixSchemeTypeFieldNumber = 2;
  ::xsproto::communication::StartCollect_FixSchemeType fix_scheme_type() const;
  void set_fix_scheme_type(::xsproto::communication::StartCollect_FixSchemeType value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.StartCollect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::communication::ChannelParam > param_list_;
  int collect_mode_;
  int fix_scheme_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fdata_5fcollect_5frequest_2eproto::TableStruct;
  friend void ::protobuf_business_2fdata_5fcollect_5frequest_2eproto::InitDefaultsStartCollectImpl();
};
// -------------------------------------------------------------------

class ChannelParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.ChannelParam) */ {
 public:
  ChannelParam();
  virtual ~ChannelParam();

  ChannelParam(const ChannelParam& from);

  inline ChannelParam& operator=(const ChannelParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelParam(ChannelParam&& from) noexcept
    : ChannelParam() {
    *this = ::std::move(from);
  }

  inline ChannelParam& operator=(ChannelParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelParam* internal_default_instance() {
    return reinterpret_cast<const ChannelParam*>(
               &_ChannelParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ChannelParam* other);
  friend void swap(ChannelParam& a, ChannelParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelParam& from);
  void MergeFrom(const ChannelParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel_name = 1;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // sint32 interval = 2;
  void clear_interval();
  static const int kIntervalFieldNumber = 2;
  ::google::protobuf::int32 interval() const;
  void set_interval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.ChannelParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::int32 interval_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fdata_5fcollect_5frequest_2eproto::TableStruct;
  friend void ::protobuf_business_2fdata_5fcollect_5frequest_2eproto::InitDefaultsChannelParamImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataCollectRequest

// .xsproto.base.Header header = 1;
inline bool DataCollectRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& DataCollectRequest::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* DataCollectRequest::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.communication.DataCollectRequest.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* DataCollectRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.DataCollectRequest.header)
  return header_;
}
inline void DataCollectRequest::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.DataCollectRequest.header)
}

// int64 timestamp = 2;
inline void DataCollectRequest::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataCollectRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectRequest.timestamp)
  return timestamp_;
}
inline void DataCollectRequest::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.DataCollectRequest.timestamp)
}

// int32 seq_num = 3;
inline void DataCollectRequest::clear_seq_num() {
  seq_num_ = 0;
}
inline ::google::protobuf::int32 DataCollectRequest::seq_num() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectRequest.seq_num)
  return seq_num_;
}
inline void DataCollectRequest::set_seq_num(::google::protobuf::int32 value) {
  
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.DataCollectRequest.seq_num)
}

// int32 cmd = 4;
inline void DataCollectRequest::clear_cmd() {
  cmd_ = 0;
}
inline ::google::protobuf::int32 DataCollectRequest::cmd() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectRequest.cmd)
  return cmd_;
}
inline void DataCollectRequest::set_cmd(::google::protobuf::int32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.DataCollectRequest.cmd)
}

// int32 sender = 5;
inline void DataCollectRequest::clear_sender() {
  sender_ = 0;
}
inline ::google::protobuf::int32 DataCollectRequest::sender() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectRequest.sender)
  return sender_;
}
inline void DataCollectRequest::set_sender(::google::protobuf::int32 value) {
  
  sender_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.DataCollectRequest.sender)
}

// string filename_day = 6;
inline void DataCollectRequest::clear_filename_day() {
  filename_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataCollectRequest::filename_day() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectRequest.filename_day)
  return filename_day_.GetNoArena();
}
inline void DataCollectRequest::set_filename_day(const ::std::string& value) {
  
  filename_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.DataCollectRequest.filename_day)
}
#if LANG_CXX11
inline void DataCollectRequest::set_filename_day(::std::string&& value) {
  
  filename_day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.DataCollectRequest.filename_day)
}
#endif
inline void DataCollectRequest::set_filename_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.DataCollectRequest.filename_day)
}
inline void DataCollectRequest::set_filename_day(const char* value, size_t size) {
  
  filename_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.DataCollectRequest.filename_day)
}
inline ::std::string* DataCollectRequest::mutable_filename_day() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.DataCollectRequest.filename_day)
  return filename_day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataCollectRequest::release_filename_day() {
  // @@protoc_insertion_point(field_release:xsproto.communication.DataCollectRequest.filename_day)
  
  return filename_day_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataCollectRequest::set_allocated_filename_day(::std::string* filename_day) {
  if (filename_day != NULL) {
    
  } else {
    
  }
  filename_day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename_day);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.DataCollectRequest.filename_day)
}

// string filename_sec = 7;
inline void DataCollectRequest::clear_filename_sec() {
  filename_sec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataCollectRequest::filename_sec() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectRequest.filename_sec)
  return filename_sec_.GetNoArena();
}
inline void DataCollectRequest::set_filename_sec(const ::std::string& value) {
  
  filename_sec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.DataCollectRequest.filename_sec)
}
#if LANG_CXX11
inline void DataCollectRequest::set_filename_sec(::std::string&& value) {
  
  filename_sec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.DataCollectRequest.filename_sec)
}
#endif
inline void DataCollectRequest::set_filename_sec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_sec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.DataCollectRequest.filename_sec)
}
inline void DataCollectRequest::set_filename_sec(const char* value, size_t size) {
  
  filename_sec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.DataCollectRequest.filename_sec)
}
inline ::std::string* DataCollectRequest::mutable_filename_sec() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.DataCollectRequest.filename_sec)
  return filename_sec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataCollectRequest::release_filename_sec() {
  // @@protoc_insertion_point(field_release:xsproto.communication.DataCollectRequest.filename_sec)
  
  return filename_sec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataCollectRequest::set_allocated_filename_sec(::std::string* filename_sec) {
  if (filename_sec != NULL) {
    
  } else {
    
  }
  filename_sec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename_sec);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.DataCollectRequest.filename_sec)
}

// string sender_ip = 8;
inline void DataCollectRequest::clear_sender_ip() {
  sender_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataCollectRequest::sender_ip() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectRequest.sender_ip)
  return sender_ip_.GetNoArena();
}
inline void DataCollectRequest::set_sender_ip(const ::std::string& value) {
  
  sender_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.DataCollectRequest.sender_ip)
}
#if LANG_CXX11
inline void DataCollectRequest::set_sender_ip(::std::string&& value) {
  
  sender_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.DataCollectRequest.sender_ip)
}
#endif
inline void DataCollectRequest::set_sender_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.DataCollectRequest.sender_ip)
}
inline void DataCollectRequest::set_sender_ip(const char* value, size_t size) {
  
  sender_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.DataCollectRequest.sender_ip)
}
inline ::std::string* DataCollectRequest::mutable_sender_ip() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.DataCollectRequest.sender_ip)
  return sender_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataCollectRequest::release_sender_ip() {
  // @@protoc_insertion_point(field_release:xsproto.communication.DataCollectRequest.sender_ip)
  
  return sender_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataCollectRequest::set_allocated_sender_ip(::std::string* sender_ip) {
  if (sender_ip != NULL) {
    
  } else {
    
  }
  sender_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_ip);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.DataCollectRequest.sender_ip)
}

// string message = 9;
inline void DataCollectRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataCollectRequest::message() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectRequest.message)
  return message_.GetNoArena();
}
inline void DataCollectRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.DataCollectRequest.message)
}
#if LANG_CXX11
inline void DataCollectRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.DataCollectRequest.message)
}
#endif
inline void DataCollectRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.DataCollectRequest.message)
}
inline void DataCollectRequest::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.DataCollectRequest.message)
}
inline ::std::string* DataCollectRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.DataCollectRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataCollectRequest::release_message() {
  // @@protoc_insertion_point(field_release:xsproto.communication.DataCollectRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataCollectRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.DataCollectRequest.message)
}

// .xsproto.communication.StartCollect start_param = 10;
inline bool DataCollectRequest::has_start_param() const {
  return this != internal_default_instance() && start_param_ != NULL;
}
inline void DataCollectRequest::clear_start_param() {
  if (GetArenaNoVirtual() == NULL && start_param_ != NULL) {
    delete start_param_;
  }
  start_param_ = NULL;
}
inline const ::xsproto::communication::StartCollect& DataCollectRequest::start_param() const {
  const ::xsproto::communication::StartCollect* p = start_param_;
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectRequest.start_param)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::communication::StartCollect*>(
      &::xsproto::communication::_StartCollect_default_instance_);
}
inline ::xsproto::communication::StartCollect* DataCollectRequest::release_start_param() {
  // @@protoc_insertion_point(field_release:xsproto.communication.DataCollectRequest.start_param)
  
  ::xsproto::communication::StartCollect* temp = start_param_;
  start_param_ = NULL;
  return temp;
}
inline ::xsproto::communication::StartCollect* DataCollectRequest::mutable_start_param() {
  
  if (start_param_ == NULL) {
    start_param_ = new ::xsproto::communication::StartCollect;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.DataCollectRequest.start_param)
  return start_param_;
}
inline void DataCollectRequest::set_allocated_start_param(::xsproto::communication::StartCollect* start_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_param_;
  }
  if (start_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_param, submessage_arena);
    }
    
  } else {
    
  }
  start_param_ = start_param;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.DataCollectRequest.start_param)
}

// -------------------------------------------------------------------

// StartCollect

// .xsproto.communication.StartCollect.CollectMode collect_mode = 1;
inline void StartCollect::clear_collect_mode() {
  collect_mode_ = 0;
}
inline ::xsproto::communication::StartCollect_CollectMode StartCollect::collect_mode() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.StartCollect.collect_mode)
  return static_cast< ::xsproto::communication::StartCollect_CollectMode >(collect_mode_);
}
inline void StartCollect::set_collect_mode(::xsproto::communication::StartCollect_CollectMode value) {
  
  collect_mode_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.StartCollect.collect_mode)
}

// .xsproto.communication.StartCollect.FixSchemeType fix_scheme_type = 2;
inline void StartCollect::clear_fix_scheme_type() {
  fix_scheme_type_ = 0;
}
inline ::xsproto::communication::StartCollect_FixSchemeType StartCollect::fix_scheme_type() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.StartCollect.fix_scheme_type)
  return static_cast< ::xsproto::communication::StartCollect_FixSchemeType >(fix_scheme_type_);
}
inline void StartCollect::set_fix_scheme_type(::xsproto::communication::StartCollect_FixSchemeType value) {
  
  fix_scheme_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.StartCollect.fix_scheme_type)
}

// repeated .xsproto.communication.ChannelParam param_list = 3;
inline int StartCollect::param_list_size() const {
  return param_list_.size();
}
inline void StartCollect::clear_param_list() {
  param_list_.Clear();
}
inline const ::xsproto::communication::ChannelParam& StartCollect::param_list(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.communication.StartCollect.param_list)
  return param_list_.Get(index);
}
inline ::xsproto::communication::ChannelParam* StartCollect::mutable_param_list(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.communication.StartCollect.param_list)
  return param_list_.Mutable(index);
}
inline ::xsproto::communication::ChannelParam* StartCollect::add_param_list() {
  // @@protoc_insertion_point(field_add:xsproto.communication.StartCollect.param_list)
  return param_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::communication::ChannelParam >*
StartCollect::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.communication.StartCollect.param_list)
  return &param_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::communication::ChannelParam >&
StartCollect::param_list() const {
  // @@protoc_insertion_point(field_list:xsproto.communication.StartCollect.param_list)
  return param_list_;
}

// -------------------------------------------------------------------

// ChannelParam

// string channel_name = 1;
inline void ChannelParam::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelParam::channel_name() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.ChannelParam.channel_name)
  return channel_name_.GetNoArena();
}
inline void ChannelParam::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.ChannelParam.channel_name)
}
#if LANG_CXX11
inline void ChannelParam::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.ChannelParam.channel_name)
}
#endif
inline void ChannelParam::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.ChannelParam.channel_name)
}
inline void ChannelParam::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.ChannelParam.channel_name)
}
inline ::std::string* ChannelParam::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.ChannelParam.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelParam::release_channel_name() {
  // @@protoc_insertion_point(field_release:xsproto.communication.ChannelParam.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelParam::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.ChannelParam.channel_name)
}

// sint32 interval = 2;
inline void ChannelParam::clear_interval() {
  interval_ = 0;
}
inline ::google::protobuf::int32 ChannelParam::interval() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.ChannelParam.interval)
  return interval_;
}
inline void ChannelParam::set_interval(::google::protobuf::int32 value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.ChannelParam.interval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication
}  // namespace xsproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xsproto::communication::StartCollect_CollectMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::communication::StartCollect_CollectMode>() {
  return ::xsproto::communication::StartCollect_CollectMode_descriptor();
}
template <> struct is_proto_enum< ::xsproto::communication::StartCollect_FixSchemeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::communication::StartCollect_FixSchemeType>() {
  return ::xsproto::communication::StartCollect_FixSchemeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_business_2fdata_5fcollect_5frequest_2eproto__INCLUDED
