// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business/data_collect_response.proto

#ifndef PROTOBUF_business_2fdata_5fcollect_5fresponse_2eproto__INCLUDED
#define PROTOBUF_business_2fdata_5fcollect_5fresponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_business_2fdata_5fcollect_5fresponse_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDataCollectResponseImpl();
void InitDefaultsDataCollectResponse();
void InitDefaultsStatusResImpl();
void InitDefaultsStatusRes();
void InitDefaultsChannelListImpl();
void InitDefaultsChannelList();
inline void InitDefaults() {
  InitDefaultsDataCollectResponse();
  InitDefaultsStatusRes();
  InitDefaultsChannelList();
}
}  // namespace protobuf_business_2fdata_5fcollect_5fresponse_2eproto
namespace xsproto {
namespace communication {
class ChannelList;
class ChannelListDefaultTypeInternal;
extern ChannelListDefaultTypeInternal _ChannelList_default_instance_;
class DataCollectResponse;
class DataCollectResponseDefaultTypeInternal;
extern DataCollectResponseDefaultTypeInternal _DataCollectResponse_default_instance_;
class StatusRes;
class StatusResDefaultTypeInternal;
extern StatusResDefaultTypeInternal _StatusRes_default_instance_;
}  // namespace communication
}  // namespace xsproto
namespace xsproto {
namespace communication {

enum StatusRes_StatusType {
  StatusRes_StatusType_TASK_NONE = 0,
  StatusRes_StatusType_TASK_ALL = 1,
  StatusRes_StatusType_TASK_Plan = 2,
  StatusRes_StatusType_TASK_BuildMap = 3,
  StatusRes_StatusType_TASK_Camera = 4,
  StatusRes_StatusType_TASK_Sensor = 5,
  StatusRes_StatusType_TASK_Config = 11,
  StatusRes_StatusType_TASK_Custom = 12,
  StatusRes_StatusType_StatusRes_StatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatusRes_StatusType_StatusRes_StatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatusRes_StatusType_IsValid(int value);
const StatusRes_StatusType StatusRes_StatusType_StatusType_MIN = StatusRes_StatusType_TASK_NONE;
const StatusRes_StatusType StatusRes_StatusType_StatusType_MAX = StatusRes_StatusType_TASK_Custom;
const int StatusRes_StatusType_StatusType_ARRAYSIZE = StatusRes_StatusType_StatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusRes_StatusType_descriptor();
inline const ::std::string& StatusRes_StatusType_Name(StatusRes_StatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusRes_StatusType_descriptor(), value);
}
inline bool StatusRes_StatusType_Parse(
    const ::std::string& name, StatusRes_StatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusRes_StatusType>(
    StatusRes_StatusType_descriptor(), name, value);
}
// ===================================================================

class DataCollectResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.DataCollectResponse) */ {
 public:
  DataCollectResponse();
  virtual ~DataCollectResponse();

  DataCollectResponse(const DataCollectResponse& from);

  inline DataCollectResponse& operator=(const DataCollectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataCollectResponse(DataCollectResponse&& from) noexcept
    : DataCollectResponse() {
    *this = ::std::move(from);
  }

  inline DataCollectResponse& operator=(DataCollectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCollectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataCollectResponse* internal_default_instance() {
    return reinterpret_cast<const DataCollectResponse*>(
               &_DataCollectResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DataCollectResponse* other);
  friend void swap(DataCollectResponse& a, DataCollectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataCollectResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DataCollectResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataCollectResponse& from);
  void MergeFrom(const DataCollectResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataCollectResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 6;
  void clear_message();
  static const int kMessageFieldNumber = 6;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // .xsproto.communication.StatusRes collect_status = 10;
  bool has_collect_status() const;
  void clear_collect_status();
  static const int kCollectStatusFieldNumber = 10;
  const ::xsproto::communication::StatusRes& collect_status() const;
  ::xsproto::communication::StatusRes* release_collect_status();
  ::xsproto::communication::StatusRes* mutable_collect_status();
  void set_allocated_collect_status(::xsproto::communication::StatusRes* collect_status);

  // .xsproto.communication.ChannelList channel_list = 11;
  bool has_channel_list() const;
  void clear_channel_list();
  static const int kChannelListFieldNumber = 11;
  const ::xsproto::communication::ChannelList& channel_list() const;
  ::xsproto::communication::ChannelList* release_channel_list();
  ::xsproto::communication::ChannelList* mutable_channel_list();
  void set_allocated_channel_list(::xsproto::communication::ChannelList* channel_list);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int32 seq_num = 3;
  void clear_seq_num();
  static const int kSeqNumFieldNumber = 3;
  ::google::protobuf::int32 seq_num() const;
  void set_seq_num(::google::protobuf::int32 value);

  // int32 cmd = 4;
  void clear_cmd();
  static const int kCmdFieldNumber = 4;
  ::google::protobuf::int32 cmd() const;
  void set_cmd(::google::protobuf::int32 value);

  // int32 result = 5;
  void clear_result();
  static const int kResultFieldNumber = 5;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 receiver = 7;
  void clear_receiver();
  static const int kReceiverFieldNumber = 7;
  ::google::protobuf::int32 receiver() const;
  void set_receiver(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.DataCollectResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::xsproto::base::Header* header_;
  ::xsproto::communication::StatusRes* collect_status_;
  ::xsproto::communication::ChannelList* channel_list_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 seq_num_;
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 receiver_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fdata_5fcollect_5fresponse_2eproto::TableStruct;
  friend void ::protobuf_business_2fdata_5fcollect_5fresponse_2eproto::InitDefaultsDataCollectResponseImpl();
};
// -------------------------------------------------------------------

class StatusRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.StatusRes) */ {
 public:
  StatusRes();
  virtual ~StatusRes();

  StatusRes(const StatusRes& from);

  inline StatusRes& operator=(const StatusRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusRes(StatusRes&& from) noexcept
    : StatusRes() {
    *this = ::std::move(from);
  }

  inline StatusRes& operator=(StatusRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusRes* internal_default_instance() {
    return reinterpret_cast<const StatusRes*>(
               &_StatusRes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(StatusRes* other);
  friend void swap(StatusRes& a, StatusRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusRes* New() const PROTOBUF_FINAL { return New(NULL); }

  StatusRes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatusRes& from);
  void MergeFrom(const StatusRes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatusRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StatusRes_StatusType StatusType;
  static const StatusType TASK_NONE =
    StatusRes_StatusType_TASK_NONE;
  static const StatusType TASK_ALL =
    StatusRes_StatusType_TASK_ALL;
  static const StatusType TASK_Plan =
    StatusRes_StatusType_TASK_Plan;
  static const StatusType TASK_BuildMap =
    StatusRes_StatusType_TASK_BuildMap;
  static const StatusType TASK_Camera =
    StatusRes_StatusType_TASK_Camera;
  static const StatusType TASK_Sensor =
    StatusRes_StatusType_TASK_Sensor;
  static const StatusType TASK_Config =
    StatusRes_StatusType_TASK_Config;
  static const StatusType TASK_Custom =
    StatusRes_StatusType_TASK_Custom;
  static inline bool StatusType_IsValid(int value) {
    return StatusRes_StatusType_IsValid(value);
  }
  static const StatusType StatusType_MIN =
    StatusRes_StatusType_StatusType_MIN;
  static const StatusType StatusType_MAX =
    StatusRes_StatusType_StatusType_MAX;
  static const int StatusType_ARRAYSIZE =
    StatusRes_StatusType_StatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StatusType_descriptor() {
    return StatusRes_StatusType_descriptor();
  }
  static inline const ::std::string& StatusType_Name(StatusType value) {
    return StatusRes_StatusType_Name(value);
  }
  static inline bool StatusType_Parse(const ::std::string& name,
      StatusType* value) {
    return StatusRes_StatusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .xsproto.communication.StatusRes.StatusType status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::xsproto::communication::StatusRes_StatusType status() const;
  void set_status(::xsproto::communication::StatusRes_StatusType value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.StatusRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fdata_5fcollect_5fresponse_2eproto::TableStruct;
  friend void ::protobuf_business_2fdata_5fcollect_5fresponse_2eproto::InitDefaultsStatusResImpl();
};
// -------------------------------------------------------------------

class ChannelList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.ChannelList) */ {
 public:
  ChannelList();
  virtual ~ChannelList();

  ChannelList(const ChannelList& from);

  inline ChannelList& operator=(const ChannelList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelList(ChannelList&& from) noexcept
    : ChannelList() {
    *this = ::std::move(from);
  }

  inline ChannelList& operator=(ChannelList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelList* internal_default_instance() {
    return reinterpret_cast<const ChannelList*>(
               &_ChannelList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ChannelList* other);
  friend void swap(ChannelList& a, ChannelList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelList* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelList& from);
  void MergeFrom(const ChannelList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string channel_name = 1;
  int channel_name_size() const;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channel_name(int index) const;
  ::std::string* mutable_channel_name(int index);
  void set_channel_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(int index, ::std::string&& value);
  #endif
  void set_channel_name(int index, const char* value);
  void set_channel_name(int index, const char* value, size_t size);
  ::std::string* add_channel_name();
  void add_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void add_channel_name(::std::string&& value);
  #endif
  void add_channel_name(const char* value);
  void add_channel_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& channel_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_channel_name();

  // @@protoc_insertion_point(class_scope:xsproto.communication.ChannelList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> channel_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fdata_5fcollect_5fresponse_2eproto::TableStruct;
  friend void ::protobuf_business_2fdata_5fcollect_5fresponse_2eproto::InitDefaultsChannelListImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataCollectResponse

// .xsproto.base.Header header = 1;
inline bool DataCollectResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& DataCollectResponse::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* DataCollectResponse::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.communication.DataCollectResponse.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* DataCollectResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.DataCollectResponse.header)
  return header_;
}
inline void DataCollectResponse::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.DataCollectResponse.header)
}

// int64 timestamp = 2;
inline void DataCollectResponse::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataCollectResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectResponse.timestamp)
  return timestamp_;
}
inline void DataCollectResponse::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.DataCollectResponse.timestamp)
}

// int32 seq_num = 3;
inline void DataCollectResponse::clear_seq_num() {
  seq_num_ = 0;
}
inline ::google::protobuf::int32 DataCollectResponse::seq_num() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectResponse.seq_num)
  return seq_num_;
}
inline void DataCollectResponse::set_seq_num(::google::protobuf::int32 value) {
  
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.DataCollectResponse.seq_num)
}

// int32 cmd = 4;
inline void DataCollectResponse::clear_cmd() {
  cmd_ = 0;
}
inline ::google::protobuf::int32 DataCollectResponse::cmd() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectResponse.cmd)
  return cmd_;
}
inline void DataCollectResponse::set_cmd(::google::protobuf::int32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.DataCollectResponse.cmd)
}

// int32 result = 5;
inline void DataCollectResponse::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 DataCollectResponse::result() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectResponse.result)
  return result_;
}
inline void DataCollectResponse::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.DataCollectResponse.result)
}

// string message = 6;
inline void DataCollectResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataCollectResponse::message() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectResponse.message)
  return message_.GetNoArena();
}
inline void DataCollectResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.DataCollectResponse.message)
}
#if LANG_CXX11
inline void DataCollectResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.DataCollectResponse.message)
}
#endif
inline void DataCollectResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.DataCollectResponse.message)
}
inline void DataCollectResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.DataCollectResponse.message)
}
inline ::std::string* DataCollectResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.DataCollectResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataCollectResponse::release_message() {
  // @@protoc_insertion_point(field_release:xsproto.communication.DataCollectResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataCollectResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.DataCollectResponse.message)
}

// int32 receiver = 7;
inline void DataCollectResponse::clear_receiver() {
  receiver_ = 0;
}
inline ::google::protobuf::int32 DataCollectResponse::receiver() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectResponse.receiver)
  return receiver_;
}
inline void DataCollectResponse::set_receiver(::google::protobuf::int32 value) {
  
  receiver_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.DataCollectResponse.receiver)
}

// .xsproto.communication.StatusRes collect_status = 10;
inline bool DataCollectResponse::has_collect_status() const {
  return this != internal_default_instance() && collect_status_ != NULL;
}
inline void DataCollectResponse::clear_collect_status() {
  if (GetArenaNoVirtual() == NULL && collect_status_ != NULL) {
    delete collect_status_;
  }
  collect_status_ = NULL;
}
inline const ::xsproto::communication::StatusRes& DataCollectResponse::collect_status() const {
  const ::xsproto::communication::StatusRes* p = collect_status_;
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectResponse.collect_status)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::communication::StatusRes*>(
      &::xsproto::communication::_StatusRes_default_instance_);
}
inline ::xsproto::communication::StatusRes* DataCollectResponse::release_collect_status() {
  // @@protoc_insertion_point(field_release:xsproto.communication.DataCollectResponse.collect_status)
  
  ::xsproto::communication::StatusRes* temp = collect_status_;
  collect_status_ = NULL;
  return temp;
}
inline ::xsproto::communication::StatusRes* DataCollectResponse::mutable_collect_status() {
  
  if (collect_status_ == NULL) {
    collect_status_ = new ::xsproto::communication::StatusRes;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.DataCollectResponse.collect_status)
  return collect_status_;
}
inline void DataCollectResponse::set_allocated_collect_status(::xsproto::communication::StatusRes* collect_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete collect_status_;
  }
  if (collect_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      collect_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, collect_status, submessage_arena);
    }
    
  } else {
    
  }
  collect_status_ = collect_status;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.DataCollectResponse.collect_status)
}

// .xsproto.communication.ChannelList channel_list = 11;
inline bool DataCollectResponse::has_channel_list() const {
  return this != internal_default_instance() && channel_list_ != NULL;
}
inline void DataCollectResponse::clear_channel_list() {
  if (GetArenaNoVirtual() == NULL && channel_list_ != NULL) {
    delete channel_list_;
  }
  channel_list_ = NULL;
}
inline const ::xsproto::communication::ChannelList& DataCollectResponse::channel_list() const {
  const ::xsproto::communication::ChannelList* p = channel_list_;
  // @@protoc_insertion_point(field_get:xsproto.communication.DataCollectResponse.channel_list)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::communication::ChannelList*>(
      &::xsproto::communication::_ChannelList_default_instance_);
}
inline ::xsproto::communication::ChannelList* DataCollectResponse::release_channel_list() {
  // @@protoc_insertion_point(field_release:xsproto.communication.DataCollectResponse.channel_list)
  
  ::xsproto::communication::ChannelList* temp = channel_list_;
  channel_list_ = NULL;
  return temp;
}
inline ::xsproto::communication::ChannelList* DataCollectResponse::mutable_channel_list() {
  
  if (channel_list_ == NULL) {
    channel_list_ = new ::xsproto::communication::ChannelList;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.DataCollectResponse.channel_list)
  return channel_list_;
}
inline void DataCollectResponse::set_allocated_channel_list(::xsproto::communication::ChannelList* channel_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete channel_list_;
  }
  if (channel_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel_list, submessage_arena);
    }
    
  } else {
    
  }
  channel_list_ = channel_list;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.DataCollectResponse.channel_list)
}

// -------------------------------------------------------------------

// StatusRes

// .xsproto.communication.StatusRes.StatusType status = 1;
inline void StatusRes::clear_status() {
  status_ = 0;
}
inline ::xsproto::communication::StatusRes_StatusType StatusRes::status() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.StatusRes.status)
  return static_cast< ::xsproto::communication::StatusRes_StatusType >(status_);
}
inline void StatusRes::set_status(::xsproto::communication::StatusRes_StatusType value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.StatusRes.status)
}

// -------------------------------------------------------------------

// ChannelList

// repeated string channel_name = 1;
inline int ChannelList::channel_name_size() const {
  return channel_name_.size();
}
inline void ChannelList::clear_channel_name() {
  channel_name_.Clear();
}
inline const ::std::string& ChannelList::channel_name(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.communication.ChannelList.channel_name)
  return channel_name_.Get(index);
}
inline ::std::string* ChannelList::mutable_channel_name(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.communication.ChannelList.channel_name)
  return channel_name_.Mutable(index);
}
inline void ChannelList::set_channel_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xsproto.communication.ChannelList.channel_name)
  channel_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChannelList::set_channel_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:xsproto.communication.ChannelList.channel_name)
  channel_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChannelList::set_channel_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  channel_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xsproto.communication.ChannelList.channel_name)
}
inline void ChannelList::set_channel_name(int index, const char* value, size_t size) {
  channel_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.ChannelList.channel_name)
}
inline ::std::string* ChannelList::add_channel_name() {
  // @@protoc_insertion_point(field_add_mutable:xsproto.communication.ChannelList.channel_name)
  return channel_name_.Add();
}
inline void ChannelList::add_channel_name(const ::std::string& value) {
  channel_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xsproto.communication.ChannelList.channel_name)
}
#if LANG_CXX11
inline void ChannelList::add_channel_name(::std::string&& value) {
  channel_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xsproto.communication.ChannelList.channel_name)
}
#endif
inline void ChannelList::add_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  channel_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xsproto.communication.ChannelList.channel_name)
}
inline void ChannelList::add_channel_name(const char* value, size_t size) {
  channel_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xsproto.communication.ChannelList.channel_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChannelList::channel_name() const {
  // @@protoc_insertion_point(field_list:xsproto.communication.ChannelList.channel_name)
  return channel_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChannelList::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.communication.ChannelList.channel_name)
  return &channel_name_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication
}  // namespace xsproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xsproto::communication::StatusRes_StatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::communication::StatusRes_StatusType>() {
  return ::xsproto::communication::StatusRes_StatusType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_business_2fdata_5fcollect_5fresponse_2eproto__INCLUDED
