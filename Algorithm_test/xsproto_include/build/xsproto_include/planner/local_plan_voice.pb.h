// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planner/local_plan_voice.proto

#ifndef PROTOBUF_planner_2flocal_5fplan_5fvoice_2eproto__INCLUDED
#define PROTOBUF_planner_2flocal_5fplan_5fvoice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_planner_2flocal_5fplan_5fvoice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLocalPlanVoiceImpl();
void InitDefaultsLocalPlanVoice();
inline void InitDefaults() {
  InitDefaultsLocalPlanVoice();
}
}  // namespace protobuf_planner_2flocal_5fplan_5fvoice_2eproto
namespace xsproto {
namespace planner {
class LocalPlanVoice;
class LocalPlanVoiceDefaultTypeInternal;
extern LocalPlanVoiceDefaultTypeInternal _LocalPlanVoice_default_instance_;
}  // namespace planner
}  // namespace xsproto
namespace xsproto {
namespace planner {

enum VoiceType {
  Voice_Unknown = 0,
  Voice_StopByPedestrian = 1,
  Voice_StopByTrafficLight = 2,
  Voice_AdvoidObstacle = 3,
  Voice_CleanSideWalk = 4,
  Voice_Slope = 5,
  Voice_Uturn = 6,
  Voice_Curb = 7,
  VoiceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VoiceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VoiceType_IsValid(int value);
const VoiceType VoiceType_MIN = Voice_Unknown;
const VoiceType VoiceType_MAX = Voice_Curb;
const int VoiceType_ARRAYSIZE = VoiceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VoiceType_descriptor();
inline const ::std::string& VoiceType_Name(VoiceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VoiceType_descriptor(), value);
}
inline bool VoiceType_Parse(
    const ::std::string& name, VoiceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VoiceType>(
    VoiceType_descriptor(), name, value);
}
enum GlobalTaskControl {
  TaskControl_Unknown = 0,
  TaskControl_Reset = 1,
  GlobalTaskControl_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GlobalTaskControl_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GlobalTaskControl_IsValid(int value);
const GlobalTaskControl GlobalTaskControl_MIN = TaskControl_Unknown;
const GlobalTaskControl GlobalTaskControl_MAX = TaskControl_Reset;
const int GlobalTaskControl_ARRAYSIZE = GlobalTaskControl_MAX + 1;

const ::google::protobuf::EnumDescriptor* GlobalTaskControl_descriptor();
inline const ::std::string& GlobalTaskControl_Name(GlobalTaskControl value) {
  return ::google::protobuf::internal::NameOfEnum(
    GlobalTaskControl_descriptor(), value);
}
inline bool GlobalTaskControl_Parse(
    const ::std::string& name, GlobalTaskControl* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GlobalTaskControl>(
    GlobalTaskControl_descriptor(), name, value);
}
// ===================================================================

class LocalPlanVoice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.planner.LocalPlanVoice) */ {
 public:
  LocalPlanVoice();
  virtual ~LocalPlanVoice();

  LocalPlanVoice(const LocalPlanVoice& from);

  inline LocalPlanVoice& operator=(const LocalPlanVoice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalPlanVoice(LocalPlanVoice&& from) noexcept
    : LocalPlanVoice() {
    *this = ::std::move(from);
  }

  inline LocalPlanVoice& operator=(LocalPlanVoice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalPlanVoice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalPlanVoice* internal_default_instance() {
    return reinterpret_cast<const LocalPlanVoice*>(
               &_LocalPlanVoice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LocalPlanVoice* other);
  friend void swap(LocalPlanVoice& a, LocalPlanVoice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalPlanVoice* New() const PROTOBUF_FINAL { return New(NULL); }

  LocalPlanVoice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocalPlanVoice& from);
  void MergeFrom(const LocalPlanVoice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocalPlanVoice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // .xsproto.planner.VoiceType voice = 2;
  void clear_voice();
  static const int kVoiceFieldNumber = 2;
  ::xsproto::planner::VoiceType voice() const;
  void set_voice(::xsproto::planner::VoiceType value);

  // .xsproto.planner.GlobalTaskControl global_task_control = 3;
  void clear_global_task_control();
  static const int kGlobalTaskControlFieldNumber = 3;
  ::xsproto::planner::GlobalTaskControl global_task_control() const;
  void set_global_task_control(::xsproto::planner::GlobalTaskControl value);

  // @@protoc_insertion_point(class_scope:xsproto.planner.LocalPlanVoice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::xsproto::base::Header* header_;
  int voice_;
  int global_task_control_;
  mutable int _cached_size_;
  friend struct ::protobuf_planner_2flocal_5fplan_5fvoice_2eproto::TableStruct;
  friend void ::protobuf_planner_2flocal_5fplan_5fvoice_2eproto::InitDefaultsLocalPlanVoiceImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocalPlanVoice

// .xsproto.base.Header header = 1;
inline bool LocalPlanVoice::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& LocalPlanVoice::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.planner.LocalPlanVoice.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* LocalPlanVoice::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.planner.LocalPlanVoice.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* LocalPlanVoice::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.planner.LocalPlanVoice.header)
  return header_;
}
inline void LocalPlanVoice::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.planner.LocalPlanVoice.header)
}

// .xsproto.planner.VoiceType voice = 2;
inline void LocalPlanVoice::clear_voice() {
  voice_ = 0;
}
inline ::xsproto::planner::VoiceType LocalPlanVoice::voice() const {
  // @@protoc_insertion_point(field_get:xsproto.planner.LocalPlanVoice.voice)
  return static_cast< ::xsproto::planner::VoiceType >(voice_);
}
inline void LocalPlanVoice::set_voice(::xsproto::planner::VoiceType value) {
  
  voice_ = value;
  // @@protoc_insertion_point(field_set:xsproto.planner.LocalPlanVoice.voice)
}

// .xsproto.planner.GlobalTaskControl global_task_control = 3;
inline void LocalPlanVoice::clear_global_task_control() {
  global_task_control_ = 0;
}
inline ::xsproto::planner::GlobalTaskControl LocalPlanVoice::global_task_control() const {
  // @@protoc_insertion_point(field_get:xsproto.planner.LocalPlanVoice.global_task_control)
  return static_cast< ::xsproto::planner::GlobalTaskControl >(global_task_control_);
}
inline void LocalPlanVoice::set_global_task_control(::xsproto::planner::GlobalTaskControl value) {
  
  global_task_control_ = value;
  // @@protoc_insertion_point(field_set:xsproto.planner.LocalPlanVoice.global_task_control)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planner
}  // namespace xsproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xsproto::planner::VoiceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::planner::VoiceType>() {
  return ::xsproto::planner::VoiceType_descriptor();
}
template <> struct is_proto_enum< ::xsproto::planner::GlobalTaskControl> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::planner::GlobalTaskControl>() {
  return ::xsproto::planner::GlobalTaskControl_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planner_2flocal_5fplan_5fvoice_2eproto__INCLUDED
