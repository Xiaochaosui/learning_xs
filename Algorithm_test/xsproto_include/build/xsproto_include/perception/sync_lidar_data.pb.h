// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/sync_lidar_data.proto

#ifndef PROTOBUF_perception_2fsync_5flidar_5fdata_2eproto__INCLUDED
#define PROTOBUF_perception_2fsync_5flidar_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_perception_2fsync_5flidar_5fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSyncLidarDataImpl();
void InitDefaultsSyncLidarData();
inline void InitDefaults() {
  InitDefaultsSyncLidarData();
}
}  // namespace protobuf_perception_2fsync_5flidar_5fdata_2eproto
namespace xsproto {
namespace perception {
class SyncLidarData;
class SyncLidarDataDefaultTypeInternal;
extern SyncLidarDataDefaultTypeInternal _SyncLidarData_default_instance_;
}  // namespace perception
}  // namespace xsproto
namespace xsproto {
namespace perception {

enum LidarPosition {
  MiddleMiddleTop = 0,
  MiddleFrontBottom = 1,
  RightFrontBottom = 2,
  RightMiddleBottom = 3,
  RightRearBottom = 4,
  MiddleRearBottom = 5,
  LeftRearBottom = 6,
  LeftMiddleBottom = 7,
  LeftFrontBottom = 8,
  MiddleFrontTop = 9,
  RightFrontTop = 10,
  RightMiddleTop = 11,
  RightRearTop = 12,
  MiddleRearTop = 13,
  LeftRearTop = 14,
  LeftMiddleTop = 15,
  LeftFrontTop = 16,
  LidarPosition_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LidarPosition_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LidarPosition_IsValid(int value);
const LidarPosition LidarPosition_MIN = MiddleMiddleTop;
const LidarPosition LidarPosition_MAX = LeftFrontTop;
const int LidarPosition_ARRAYSIZE = LidarPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* LidarPosition_descriptor();
inline const ::std::string& LidarPosition_Name(LidarPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    LidarPosition_descriptor(), value);
}
inline bool LidarPosition_Parse(
    const ::std::string& name, LidarPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LidarPosition>(
    LidarPosition_descriptor(), name, value);
}
// ===================================================================

class SyncLidarData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.SyncLidarData) */ {
 public:
  SyncLidarData();
  virtual ~SyncLidarData();

  SyncLidarData(const SyncLidarData& from);

  inline SyncLidarData& operator=(const SyncLidarData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncLidarData(SyncLidarData&& from) noexcept
    : SyncLidarData() {
    *this = ::std::move(from);
  }

  inline SyncLidarData& operator=(SyncLidarData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncLidarData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncLidarData* internal_default_instance() {
    return reinterpret_cast<const SyncLidarData*>(
               &_SyncLidarData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SyncLidarData* other);
  friend void swap(SyncLidarData& a, SyncLidarData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncLidarData* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncLidarData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncLidarData& from);
  void MergeFrom(const SyncLidarData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncLidarData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 sensor_position_list = 3;
  int sensor_position_list_size() const;
  void clear_sensor_position_list();
  static const int kSensorPositionListFieldNumber = 3;
  ::google::protobuf::uint32 sensor_position_list(int index) const;
  void set_sensor_position_list(int index, ::google::protobuf::uint32 value);
  void add_sensor_position_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      sensor_position_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_sensor_position_list();

  // repeated uint32 line_num = 4;
  int line_num_size() const;
  void clear_line_num();
  static const int kLineNumFieldNumber = 4;
  ::google::protobuf::uint32 line_num(int index) const;
  void set_line_num(int index, ::google::protobuf::uint32 value);
  void add_line_num(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      line_num() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_line_num();

  // repeated uint32 scan_num = 5;
  int scan_num_size() const;
  void clear_scan_num();
  static const int kScanNumFieldNumber = 5;
  ::google::protobuf::uint32 scan_num(int index) const;
  void set_scan_num(int index, ::google::protobuf::uint32 value);
  void add_scan_num(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      scan_num() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_scan_num();

  // bytes data = 8;
  void clear_data();
  static const int kDataFieldNumber = 8;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // double start_time = 6;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  double start_time() const;
  void set_start_time(double value);

  // double end_time = 7;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 7;
  double end_time() const;
  void set_end_time(double value);

  // uint32 sensor_num = 2;
  void clear_sensor_num();
  static const int kSensorNumFieldNumber = 2;
  ::google::protobuf::uint32 sensor_num() const;
  void set_sensor_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xsproto.perception.SyncLidarData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > sensor_position_list_;
  mutable int _sensor_position_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > line_num_;
  mutable int _line_num_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > scan_num_;
  mutable int _scan_num_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::xsproto::base::Header* header_;
  double start_time_;
  double end_time_;
  ::google::protobuf::uint32 sensor_num_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2fsync_5flidar_5fdata_2eproto::TableStruct;
  friend void ::protobuf_perception_2fsync_5flidar_5fdata_2eproto::InitDefaultsSyncLidarDataImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncLidarData

// .xsproto.base.Header header = 1;
inline bool SyncLidarData::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& SyncLidarData::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.perception.SyncLidarData.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* SyncLidarData::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.perception.SyncLidarData.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* SyncLidarData::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.SyncLidarData.header)
  return header_;
}
inline void SyncLidarData::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.SyncLidarData.header)
}

// uint32 sensor_num = 2;
inline void SyncLidarData::clear_sensor_num() {
  sensor_num_ = 0u;
}
inline ::google::protobuf::uint32 SyncLidarData::sensor_num() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.SyncLidarData.sensor_num)
  return sensor_num_;
}
inline void SyncLidarData::set_sensor_num(::google::protobuf::uint32 value) {
  
  sensor_num_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.SyncLidarData.sensor_num)
}

// repeated uint32 sensor_position_list = 3;
inline int SyncLidarData::sensor_position_list_size() const {
  return sensor_position_list_.size();
}
inline void SyncLidarData::clear_sensor_position_list() {
  sensor_position_list_.Clear();
}
inline ::google::protobuf::uint32 SyncLidarData::sensor_position_list(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.SyncLidarData.sensor_position_list)
  return sensor_position_list_.Get(index);
}
inline void SyncLidarData::set_sensor_position_list(int index, ::google::protobuf::uint32 value) {
  sensor_position_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:xsproto.perception.SyncLidarData.sensor_position_list)
}
inline void SyncLidarData::add_sensor_position_list(::google::protobuf::uint32 value) {
  sensor_position_list_.Add(value);
  // @@protoc_insertion_point(field_add:xsproto.perception.SyncLidarData.sensor_position_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SyncLidarData::sensor_position_list() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.SyncLidarData.sensor_position_list)
  return sensor_position_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SyncLidarData::mutable_sensor_position_list() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.SyncLidarData.sensor_position_list)
  return &sensor_position_list_;
}

// repeated uint32 line_num = 4;
inline int SyncLidarData::line_num_size() const {
  return line_num_.size();
}
inline void SyncLidarData::clear_line_num() {
  line_num_.Clear();
}
inline ::google::protobuf::uint32 SyncLidarData::line_num(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.SyncLidarData.line_num)
  return line_num_.Get(index);
}
inline void SyncLidarData::set_line_num(int index, ::google::protobuf::uint32 value) {
  line_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:xsproto.perception.SyncLidarData.line_num)
}
inline void SyncLidarData::add_line_num(::google::protobuf::uint32 value) {
  line_num_.Add(value);
  // @@protoc_insertion_point(field_add:xsproto.perception.SyncLidarData.line_num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SyncLidarData::line_num() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.SyncLidarData.line_num)
  return line_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SyncLidarData::mutable_line_num() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.SyncLidarData.line_num)
  return &line_num_;
}

// repeated uint32 scan_num = 5;
inline int SyncLidarData::scan_num_size() const {
  return scan_num_.size();
}
inline void SyncLidarData::clear_scan_num() {
  scan_num_.Clear();
}
inline ::google::protobuf::uint32 SyncLidarData::scan_num(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.SyncLidarData.scan_num)
  return scan_num_.Get(index);
}
inline void SyncLidarData::set_scan_num(int index, ::google::protobuf::uint32 value) {
  scan_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:xsproto.perception.SyncLidarData.scan_num)
}
inline void SyncLidarData::add_scan_num(::google::protobuf::uint32 value) {
  scan_num_.Add(value);
  // @@protoc_insertion_point(field_add:xsproto.perception.SyncLidarData.scan_num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SyncLidarData::scan_num() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.SyncLidarData.scan_num)
  return scan_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SyncLidarData::mutable_scan_num() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.SyncLidarData.scan_num)
  return &scan_num_;
}

// double start_time = 6;
inline void SyncLidarData::clear_start_time() {
  start_time_ = 0;
}
inline double SyncLidarData::start_time() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.SyncLidarData.start_time)
  return start_time_;
}
inline void SyncLidarData::set_start_time(double value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.SyncLidarData.start_time)
}

// double end_time = 7;
inline void SyncLidarData::clear_end_time() {
  end_time_ = 0;
}
inline double SyncLidarData::end_time() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.SyncLidarData.end_time)
  return end_time_;
}
inline void SyncLidarData::set_end_time(double value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.SyncLidarData.end_time)
}

// bytes data = 8;
inline void SyncLidarData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncLidarData::data() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.SyncLidarData.data)
  return data_.GetNoArena();
}
inline void SyncLidarData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.perception.SyncLidarData.data)
}
#if LANG_CXX11
inline void SyncLidarData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.perception.SyncLidarData.data)
}
#endif
inline void SyncLidarData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.perception.SyncLidarData.data)
}
inline void SyncLidarData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.perception.SyncLidarData.data)
}
inline ::std::string* SyncLidarData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.perception.SyncLidarData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncLidarData::release_data() {
  // @@protoc_insertion_point(field_release:xsproto.perception.SyncLidarData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncLidarData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.SyncLidarData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace xsproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xsproto::perception::LidarPosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::perception::LidarPosition>() {
  return ::xsproto::perception::LidarPosition_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2fsync_5flidar_5fdata_2eproto__INCLUDED
