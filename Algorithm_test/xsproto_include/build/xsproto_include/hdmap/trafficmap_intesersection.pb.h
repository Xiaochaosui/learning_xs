// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hdmap/trafficmap_intesersection.proto

#ifndef PROTOBUF_hdmap_2ftrafficmap_5fintesersection_2eproto__INCLUDED
#define PROTOBUF_hdmap_2ftrafficmap_5fintesersection_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
#include "common/geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_hdmap_2ftrafficmap_5fintesersection_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLanemarkingImpl();
void InitDefaultsLanemarking();
void InitDefaultsInterSectionPathImpl();
void InitDefaultsInterSectionPath();
void InitDefaultsTrafficMapIntersectionMsgImpl();
void InitDefaultsTrafficMapIntersectionMsg();
inline void InitDefaults() {
  InitDefaultsLanemarking();
  InitDefaultsInterSectionPath();
  InitDefaultsTrafficMapIntersectionMsg();
}
}  // namespace protobuf_hdmap_2ftrafficmap_5fintesersection_2eproto
namespace xsproto {
namespace hdmap {
class InterSectionPath;
class InterSectionPathDefaultTypeInternal;
extern InterSectionPathDefaultTypeInternal _InterSectionPath_default_instance_;
class Lanemarking;
class LanemarkingDefaultTypeInternal;
extern LanemarkingDefaultTypeInternal _Lanemarking_default_instance_;
class TrafficMapIntersectionMsg;
class TrafficMapIntersectionMsgDefaultTypeInternal;
extern TrafficMapIntersectionMsgDefaultTypeInternal _TrafficMapIntersectionMsg_default_instance_;
}  // namespace hdmap
}  // namespace xsproto
namespace xsproto {
namespace hdmap {

enum IntersectionType {
  IT_TEN_WORD = 0,
  IT_Y_WORD = 1,
  IT_T_WORD = 2,
  IntersectionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IntersectionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IntersectionType_IsValid(int value);
const IntersectionType IntersectionType_MIN = IT_TEN_WORD;
const IntersectionType IntersectionType_MAX = IT_T_WORD;
const int IntersectionType_ARRAYSIZE = IntersectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IntersectionType_descriptor();
inline const ::std::string& IntersectionType_Name(IntersectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IntersectionType_descriptor(), value);
}
inline bool IntersectionType_Parse(
    const ::std::string& name, IntersectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IntersectionType>(
    IntersectionType_descriptor(), name, value);
}
enum IntersectionPathType {
  IPT_NULL = 0,
  IPT_STRAIGHT = 1,
  IPT_U_TURN = 2,
  IPT_RL_TURN = 3,
  IntersectionPathType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IntersectionPathType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IntersectionPathType_IsValid(int value);
const IntersectionPathType IntersectionPathType_MIN = IPT_NULL;
const IntersectionPathType IntersectionPathType_MAX = IPT_RL_TURN;
const int IntersectionPathType_ARRAYSIZE = IntersectionPathType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IntersectionPathType_descriptor();
inline const ::std::string& IntersectionPathType_Name(IntersectionPathType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IntersectionPathType_descriptor(), value);
}
inline bool IntersectionPathType_Parse(
    const ::std::string& name, IntersectionPathType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IntersectionPathType>(
    IntersectionPathType_descriptor(), name, value);
}
// ===================================================================

class Lanemarking : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.hdmap.Lanemarking) */ {
 public:
  Lanemarking();
  virtual ~Lanemarking();

  Lanemarking(const Lanemarking& from);

  inline Lanemarking& operator=(const Lanemarking& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lanemarking(Lanemarking&& from) noexcept
    : Lanemarking() {
    *this = ::std::move(from);
  }

  inline Lanemarking& operator=(Lanemarking&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lanemarking& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lanemarking* internal_default_instance() {
    return reinterpret_cast<const Lanemarking*>(
               &_Lanemarking_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Lanemarking* other);
  friend void swap(Lanemarking& a, Lanemarking& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lanemarking* New() const PROTOBUF_FINAL { return New(NULL); }

  Lanemarking* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lanemarking& from);
  void MergeFrom(const Lanemarking& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lanemarking* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xsproto.common.Point3D points = 2;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 2;
  const ::xsproto::common::Point3D& points(int index) const;
  ::xsproto::common::Point3D* mutable_points(int index);
  ::xsproto::common::Point3D* add_points();
  ::google::protobuf::RepeatedPtrField< ::xsproto::common::Point3D >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::common::Point3D >&
      points() const;

  // int32 line_id = 1;
  void clear_line_id();
  static const int kLineIdFieldNumber = 1;
  ::google::protobuf::int32 line_id() const;
  void set_line_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.hdmap.Lanemarking)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::common::Point3D > points_;
  ::google::protobuf::int32 line_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_hdmap_2ftrafficmap_5fintesersection_2eproto::TableStruct;
  friend void ::protobuf_hdmap_2ftrafficmap_5fintesersection_2eproto::InitDefaultsLanemarkingImpl();
};
// -------------------------------------------------------------------

class InterSectionPath : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.hdmap.InterSectionPath) */ {
 public:
  InterSectionPath();
  virtual ~InterSectionPath();

  InterSectionPath(const InterSectionPath& from);

  inline InterSectionPath& operator=(const InterSectionPath& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterSectionPath(InterSectionPath&& from) noexcept
    : InterSectionPath() {
    *this = ::std::move(from);
  }

  inline InterSectionPath& operator=(InterSectionPath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InterSectionPath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterSectionPath* internal_default_instance() {
    return reinterpret_cast<const InterSectionPath*>(
               &_InterSectionPath_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(InterSectionPath* other);
  friend void swap(InterSectionPath& a, InterSectionPath& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterSectionPath* New() const PROTOBUF_FINAL { return New(NULL); }

  InterSectionPath* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InterSectionPath& from);
  void MergeFrom(const InterSectionPath& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InterSectionPath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xsproto.hdmap.Lanemarking lanemarking = 2;
  int lanemarking_size() const;
  void clear_lanemarking();
  static const int kLanemarkingFieldNumber = 2;
  const ::xsproto::hdmap::Lanemarking& lanemarking(int index) const;
  ::xsproto::hdmap::Lanemarking* mutable_lanemarking(int index);
  ::xsproto::hdmap::Lanemarking* add_lanemarking();
  ::google::protobuf::RepeatedPtrField< ::xsproto::hdmap::Lanemarking >*
      mutable_lanemarking();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::hdmap::Lanemarking >&
      lanemarking() const;

  // .xsproto.hdmap.IntersectionPathType path_type = 1;
  void clear_path_type();
  static const int kPathTypeFieldNumber = 1;
  ::xsproto::hdmap::IntersectionPathType path_type() const;
  void set_path_type(::xsproto::hdmap::IntersectionPathType value);

  // @@protoc_insertion_point(class_scope:xsproto.hdmap.InterSectionPath)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::hdmap::Lanemarking > lanemarking_;
  int path_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_hdmap_2ftrafficmap_5fintesersection_2eproto::TableStruct;
  friend void ::protobuf_hdmap_2ftrafficmap_5fintesersection_2eproto::InitDefaultsInterSectionPathImpl();
};
// -------------------------------------------------------------------

class TrafficMapIntersectionMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.hdmap.TrafficMapIntersectionMsg) */ {
 public:
  TrafficMapIntersectionMsg();
  virtual ~TrafficMapIntersectionMsg();

  TrafficMapIntersectionMsg(const TrafficMapIntersectionMsg& from);

  inline TrafficMapIntersectionMsg& operator=(const TrafficMapIntersectionMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficMapIntersectionMsg(TrafficMapIntersectionMsg&& from) noexcept
    : TrafficMapIntersectionMsg() {
    *this = ::std::move(from);
  }

  inline TrafficMapIntersectionMsg& operator=(TrafficMapIntersectionMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficMapIntersectionMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficMapIntersectionMsg* internal_default_instance() {
    return reinterpret_cast<const TrafficMapIntersectionMsg*>(
               &_TrafficMapIntersectionMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TrafficMapIntersectionMsg* other);
  friend void swap(TrafficMapIntersectionMsg& a, TrafficMapIntersectionMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficMapIntersectionMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  TrafficMapIntersectionMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrafficMapIntersectionMsg& from);
  void MergeFrom(const TrafficMapIntersectionMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrafficMapIntersectionMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xsproto.hdmap.InterSectionPath pathes = 4;
  int pathes_size() const;
  void clear_pathes();
  static const int kPathesFieldNumber = 4;
  const ::xsproto::hdmap::InterSectionPath& pathes(int index) const;
  ::xsproto::hdmap::InterSectionPath* mutable_pathes(int index);
  ::xsproto::hdmap::InterSectionPath* add_pathes();
  ::google::protobuf::RepeatedPtrField< ::xsproto::hdmap::InterSectionPath >*
      mutable_pathes();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::hdmap::InterSectionPath >&
      pathes() const;

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // int32 intersection_id = 2;
  void clear_intersection_id();
  static const int kIntersectionIdFieldNumber = 2;
  ::google::protobuf::int32 intersection_id() const;
  void set_intersection_id(::google::protobuf::int32 value);

  // .xsproto.hdmap.IntersectionType intersection_type = 3;
  void clear_intersection_type();
  static const int kIntersectionTypeFieldNumber = 3;
  ::xsproto::hdmap::IntersectionType intersection_type() const;
  void set_intersection_type(::xsproto::hdmap::IntersectionType value);

  // @@protoc_insertion_point(class_scope:xsproto.hdmap.TrafficMapIntersectionMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::hdmap::InterSectionPath > pathes_;
  ::xsproto::base::Header* header_;
  ::google::protobuf::int32 intersection_id_;
  int intersection_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_hdmap_2ftrafficmap_5fintesersection_2eproto::TableStruct;
  friend void ::protobuf_hdmap_2ftrafficmap_5fintesersection_2eproto::InitDefaultsTrafficMapIntersectionMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Lanemarking

// int32 line_id = 1;
inline void Lanemarking::clear_line_id() {
  line_id_ = 0;
}
inline ::google::protobuf::int32 Lanemarking::line_id() const {
  // @@protoc_insertion_point(field_get:xsproto.hdmap.Lanemarking.line_id)
  return line_id_;
}
inline void Lanemarking::set_line_id(::google::protobuf::int32 value) {
  
  line_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.hdmap.Lanemarking.line_id)
}

// repeated .xsproto.common.Point3D points = 2;
inline int Lanemarking::points_size() const {
  return points_.size();
}
inline const ::xsproto::common::Point3D& Lanemarking::points(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.hdmap.Lanemarking.points)
  return points_.Get(index);
}
inline ::xsproto::common::Point3D* Lanemarking::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.hdmap.Lanemarking.points)
  return points_.Mutable(index);
}
inline ::xsproto::common::Point3D* Lanemarking::add_points() {
  // @@protoc_insertion_point(field_add:xsproto.hdmap.Lanemarking.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::common::Point3D >*
Lanemarking::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.hdmap.Lanemarking.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::common::Point3D >&
Lanemarking::points() const {
  // @@protoc_insertion_point(field_list:xsproto.hdmap.Lanemarking.points)
  return points_;
}

// -------------------------------------------------------------------

// InterSectionPath

// .xsproto.hdmap.IntersectionPathType path_type = 1;
inline void InterSectionPath::clear_path_type() {
  path_type_ = 0;
}
inline ::xsproto::hdmap::IntersectionPathType InterSectionPath::path_type() const {
  // @@protoc_insertion_point(field_get:xsproto.hdmap.InterSectionPath.path_type)
  return static_cast< ::xsproto::hdmap::IntersectionPathType >(path_type_);
}
inline void InterSectionPath::set_path_type(::xsproto::hdmap::IntersectionPathType value) {
  
  path_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.hdmap.InterSectionPath.path_type)
}

// repeated .xsproto.hdmap.Lanemarking lanemarking = 2;
inline int InterSectionPath::lanemarking_size() const {
  return lanemarking_.size();
}
inline void InterSectionPath::clear_lanemarking() {
  lanemarking_.Clear();
}
inline const ::xsproto::hdmap::Lanemarking& InterSectionPath::lanemarking(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.hdmap.InterSectionPath.lanemarking)
  return lanemarking_.Get(index);
}
inline ::xsproto::hdmap::Lanemarking* InterSectionPath::mutable_lanemarking(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.hdmap.InterSectionPath.lanemarking)
  return lanemarking_.Mutable(index);
}
inline ::xsproto::hdmap::Lanemarking* InterSectionPath::add_lanemarking() {
  // @@protoc_insertion_point(field_add:xsproto.hdmap.InterSectionPath.lanemarking)
  return lanemarking_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::hdmap::Lanemarking >*
InterSectionPath::mutable_lanemarking() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.hdmap.InterSectionPath.lanemarking)
  return &lanemarking_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::hdmap::Lanemarking >&
InterSectionPath::lanemarking() const {
  // @@protoc_insertion_point(field_list:xsproto.hdmap.InterSectionPath.lanemarking)
  return lanemarking_;
}

// -------------------------------------------------------------------

// TrafficMapIntersectionMsg

// .xsproto.base.Header header = 1;
inline bool TrafficMapIntersectionMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& TrafficMapIntersectionMsg::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.hdmap.TrafficMapIntersectionMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* TrafficMapIntersectionMsg::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.hdmap.TrafficMapIntersectionMsg.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* TrafficMapIntersectionMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.hdmap.TrafficMapIntersectionMsg.header)
  return header_;
}
inline void TrafficMapIntersectionMsg::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.hdmap.TrafficMapIntersectionMsg.header)
}

// int32 intersection_id = 2;
inline void TrafficMapIntersectionMsg::clear_intersection_id() {
  intersection_id_ = 0;
}
inline ::google::protobuf::int32 TrafficMapIntersectionMsg::intersection_id() const {
  // @@protoc_insertion_point(field_get:xsproto.hdmap.TrafficMapIntersectionMsg.intersection_id)
  return intersection_id_;
}
inline void TrafficMapIntersectionMsg::set_intersection_id(::google::protobuf::int32 value) {
  
  intersection_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.hdmap.TrafficMapIntersectionMsg.intersection_id)
}

// .xsproto.hdmap.IntersectionType intersection_type = 3;
inline void TrafficMapIntersectionMsg::clear_intersection_type() {
  intersection_type_ = 0;
}
inline ::xsproto::hdmap::IntersectionType TrafficMapIntersectionMsg::intersection_type() const {
  // @@protoc_insertion_point(field_get:xsproto.hdmap.TrafficMapIntersectionMsg.intersection_type)
  return static_cast< ::xsproto::hdmap::IntersectionType >(intersection_type_);
}
inline void TrafficMapIntersectionMsg::set_intersection_type(::xsproto::hdmap::IntersectionType value) {
  
  intersection_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.hdmap.TrafficMapIntersectionMsg.intersection_type)
}

// repeated .xsproto.hdmap.InterSectionPath pathes = 4;
inline int TrafficMapIntersectionMsg::pathes_size() const {
  return pathes_.size();
}
inline void TrafficMapIntersectionMsg::clear_pathes() {
  pathes_.Clear();
}
inline const ::xsproto::hdmap::InterSectionPath& TrafficMapIntersectionMsg::pathes(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.hdmap.TrafficMapIntersectionMsg.pathes)
  return pathes_.Get(index);
}
inline ::xsproto::hdmap::InterSectionPath* TrafficMapIntersectionMsg::mutable_pathes(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.hdmap.TrafficMapIntersectionMsg.pathes)
  return pathes_.Mutable(index);
}
inline ::xsproto::hdmap::InterSectionPath* TrafficMapIntersectionMsg::add_pathes() {
  // @@protoc_insertion_point(field_add:xsproto.hdmap.TrafficMapIntersectionMsg.pathes)
  return pathes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::hdmap::InterSectionPath >*
TrafficMapIntersectionMsg::mutable_pathes() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.hdmap.TrafficMapIntersectionMsg.pathes)
  return &pathes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::hdmap::InterSectionPath >&
TrafficMapIntersectionMsg::pathes() const {
  // @@protoc_insertion_point(field_list:xsproto.hdmap.TrafficMapIntersectionMsg.pathes)
  return pathes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace xsproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xsproto::hdmap::IntersectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::hdmap::IntersectionType>() {
  return ::xsproto::hdmap::IntersectionType_descriptor();
}
template <> struct is_proto_enum< ::xsproto::hdmap::IntersectionPathType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::hdmap::IntersectionPathType>() {
  return ::xsproto::hdmap::IntersectionPathType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hdmap_2ftrafficmap_5fintesersection_2eproto__INCLUDED
