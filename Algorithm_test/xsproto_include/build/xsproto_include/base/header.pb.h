// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/header.proto

#ifndef PROTOBUF_base_2fheader_2eproto__INCLUDED
#define PROTOBUF_base_2fheader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base/local_pose.pb.h"
#include "base/global_pose.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_base_2fheader_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsHeaderImpl();
void InitDefaultsHeader();
inline void InitDefaults() {
  InitDefaultsHeader();
}
}  // namespace protobuf_base_2fheader_2eproto
namespace xsproto {
namespace base {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace base
}  // namespace xsproto
namespace xsproto {
namespace base {

// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.base.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const PROTOBUF_FINAL { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xsproto.base.LocalPose local_pose = 1;
  bool has_local_pose() const;
  void clear_local_pose();
  static const int kLocalPoseFieldNumber = 1;
  const ::xsproto::base::LocalPose& local_pose() const;
  ::xsproto::base::LocalPose* release_local_pose();
  ::xsproto::base::LocalPose* mutable_local_pose();
  void set_allocated_local_pose(::xsproto::base::LocalPose* local_pose);

  // .xsproto.base.GlobalPose global_pose = 2;
  bool has_global_pose() const;
  void clear_global_pose();
  static const int kGlobalPoseFieldNumber = 2;
  const ::xsproto::base::GlobalPose& global_pose() const;
  ::xsproto::base::GlobalPose* release_global_pose();
  ::xsproto::base::GlobalPose* mutable_global_pose();
  void set_allocated_global_pose(::xsproto::base::GlobalPose* global_pose);

  // double timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:xsproto.base.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::xsproto::base::LocalPose* local_pose_;
  ::xsproto::base::GlobalPose* global_pose_;
  double timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2fheader_2eproto::TableStruct;
  friend void ::protobuf_base_2fheader_2eproto::InitDefaultsHeaderImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// .xsproto.base.LocalPose local_pose = 1;
inline bool Header::has_local_pose() const {
  return this != internal_default_instance() && local_pose_ != NULL;
}
inline const ::xsproto::base::LocalPose& Header::local_pose() const {
  const ::xsproto::base::LocalPose* p = local_pose_;
  // @@protoc_insertion_point(field_get:xsproto.base.Header.local_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::LocalPose*>(
      &::xsproto::base::_LocalPose_default_instance_);
}
inline ::xsproto::base::LocalPose* Header::release_local_pose() {
  // @@protoc_insertion_point(field_release:xsproto.base.Header.local_pose)
  
  ::xsproto::base::LocalPose* temp = local_pose_;
  local_pose_ = NULL;
  return temp;
}
inline ::xsproto::base::LocalPose* Header::mutable_local_pose() {
  
  if (local_pose_ == NULL) {
    local_pose_ = new ::xsproto::base::LocalPose;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.Header.local_pose)
  return local_pose_;
}
inline void Header::set_allocated_local_pose(::xsproto::base::LocalPose* local_pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(local_pose_);
  }
  if (local_pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      local_pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_pose, submessage_arena);
    }
    
  } else {
    
  }
  local_pose_ = local_pose;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.Header.local_pose)
}

// .xsproto.base.GlobalPose global_pose = 2;
inline bool Header::has_global_pose() const {
  return this != internal_default_instance() && global_pose_ != NULL;
}
inline const ::xsproto::base::GlobalPose& Header::global_pose() const {
  const ::xsproto::base::GlobalPose* p = global_pose_;
  // @@protoc_insertion_point(field_get:xsproto.base.Header.global_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::GlobalPose*>(
      &::xsproto::base::_GlobalPose_default_instance_);
}
inline ::xsproto::base::GlobalPose* Header::release_global_pose() {
  // @@protoc_insertion_point(field_release:xsproto.base.Header.global_pose)
  
  ::xsproto::base::GlobalPose* temp = global_pose_;
  global_pose_ = NULL;
  return temp;
}
inline ::xsproto::base::GlobalPose* Header::mutable_global_pose() {
  
  if (global_pose_ == NULL) {
    global_pose_ = new ::xsproto::base::GlobalPose;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.Header.global_pose)
  return global_pose_;
}
inline void Header::set_allocated_global_pose(::xsproto::base::GlobalPose* global_pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(global_pose_);
  }
  if (global_pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      global_pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_pose, submessage_arena);
    }
    
  } else {
    
  }
  global_pose_ = global_pose;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.Header.global_pose)
}

// double timestamp = 3;
inline void Header::clear_timestamp() {
  timestamp_ = 0;
}
inline double Header::timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.base.Header.timestamp)
  return timestamp_;
}
inline void Header::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.Header.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_2fheader_2eproto__INCLUDED
