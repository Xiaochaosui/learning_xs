// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/acceleration_estimation.proto

#ifndef PROTOBUF_base_2facceleration_5festimation_2eproto__INCLUDED
#define PROTOBUF_base_2facceleration_5festimation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_base_2facceleration_5festimation_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsAccelerationEstimationImpl();
void InitDefaultsAccelerationEstimation();
inline void InitDefaults() {
  InitDefaultsAccelerationEstimation();
}
}  // namespace protobuf_base_2facceleration_5festimation_2eproto
namespace xsproto {
namespace acceleration_estimation {
class AccelerationEstimation;
class AccelerationEstimationDefaultTypeInternal;
extern AccelerationEstimationDefaultTypeInternal _AccelerationEstimation_default_instance_;
}  // namespace acceleration_estimation
}  // namespace xsproto
namespace xsproto {
namespace acceleration_estimation {

// ===================================================================

class AccelerationEstimation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.acceleration_estimation.AccelerationEstimation) */ {
 public:
  AccelerationEstimation();
  virtual ~AccelerationEstimation();

  AccelerationEstimation(const AccelerationEstimation& from);

  inline AccelerationEstimation& operator=(const AccelerationEstimation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccelerationEstimation(AccelerationEstimation&& from) noexcept
    : AccelerationEstimation() {
    *this = ::std::move(from);
  }

  inline AccelerationEstimation& operator=(AccelerationEstimation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccelerationEstimation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccelerationEstimation* internal_default_instance() {
    return reinterpret_cast<const AccelerationEstimation*>(
               &_AccelerationEstimation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AccelerationEstimation* other);
  friend void swap(AccelerationEstimation& a, AccelerationEstimation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccelerationEstimation* New() const PROTOBUF_FINAL { return New(NULL); }

  AccelerationEstimation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccelerationEstimation& from);
  void MergeFrom(const AccelerationEstimation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccelerationEstimation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // double acceleration = 2;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 2;
  double acceleration() const;
  void set_acceleration(double value);

  // double lp_timestamp = 3;
  void clear_lp_timestamp();
  static const int kLpTimestampFieldNumber = 3;
  double lp_timestamp() const;
  void set_lp_timestamp(double value);

  // double lp_speed = 4;
  void clear_lp_speed();
  static const int kLpSpeedFieldNumber = 4;
  double lp_speed() const;
  void set_lp_speed(double value);

  // double lp_imu_acceleration = 5;
  void clear_lp_imu_acceleration();
  static const int kLpImuAccelerationFieldNumber = 5;
  double lp_imu_acceleration() const;
  void set_lp_imu_acceleration(double value);

  // double vs_acceleration = 6;
  void clear_vs_acceleration();
  static const int kVsAccelerationFieldNumber = 6;
  double vs_acceleration() const;
  void set_vs_acceleration(double value);

  // double kalman_filter_acc = 7;
  void clear_kalman_filter_acc();
  static const int kKalmanFilterAccFieldNumber = 7;
  double kalman_filter_acc() const;
  void set_kalman_filter_acc(double value);

  // double digital_filter_acc = 8;
  void clear_digital_filter_acc();
  static const int kDigitalFilterAccFieldNumber = 8;
  double digital_filter_acc() const;
  void set_digital_filter_acc(double value);

  // double lowpass1d_filter_acc = 9;
  void clear_lowpass1d_filter_acc();
  static const int kLowpass1DFilterAccFieldNumber = 9;
  double lowpass1d_filter_acc() const;
  void set_lowpass1d_filter_acc(double value);

  // double highpass1d_filter_acc = 10;
  void clear_highpass1d_filter_acc();
  static const int kHighpass1DFilterAccFieldNumber = 10;
  double highpass1d_filter_acc() const;
  void set_highpass1d_filter_acc(double value);

  // double complementary_filter_acc = 11;
  void clear_complementary_filter_acc();
  static const int kComplementaryFilterAccFieldNumber = 11;
  double complementary_filter_acc() const;
  void set_complementary_filter_acc(double value);

  // @@protoc_insertion_point(class_scope:xsproto.acceleration_estimation.AccelerationEstimation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double timestamp_;
  double acceleration_;
  double lp_timestamp_;
  double lp_speed_;
  double lp_imu_acceleration_;
  double vs_acceleration_;
  double kalman_filter_acc_;
  double digital_filter_acc_;
  double lowpass1d_filter_acc_;
  double highpass1d_filter_acc_;
  double complementary_filter_acc_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2facceleration_5festimation_2eproto::TableStruct;
  friend void ::protobuf_base_2facceleration_5festimation_2eproto::InitDefaultsAccelerationEstimationImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccelerationEstimation

// double timestamp = 1;
inline void AccelerationEstimation::clear_timestamp() {
  timestamp_ = 0;
}
inline double AccelerationEstimation::timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.acceleration_estimation.AccelerationEstimation.timestamp)
  return timestamp_;
}
inline void AccelerationEstimation::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.acceleration_estimation.AccelerationEstimation.timestamp)
}

// double acceleration = 2;
inline void AccelerationEstimation::clear_acceleration() {
  acceleration_ = 0;
}
inline double AccelerationEstimation::acceleration() const {
  // @@protoc_insertion_point(field_get:xsproto.acceleration_estimation.AccelerationEstimation.acceleration)
  return acceleration_;
}
inline void AccelerationEstimation::set_acceleration(double value) {
  
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:xsproto.acceleration_estimation.AccelerationEstimation.acceleration)
}

// double lp_timestamp = 3;
inline void AccelerationEstimation::clear_lp_timestamp() {
  lp_timestamp_ = 0;
}
inline double AccelerationEstimation::lp_timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.acceleration_estimation.AccelerationEstimation.lp_timestamp)
  return lp_timestamp_;
}
inline void AccelerationEstimation::set_lp_timestamp(double value) {
  
  lp_timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.acceleration_estimation.AccelerationEstimation.lp_timestamp)
}

// double lp_speed = 4;
inline void AccelerationEstimation::clear_lp_speed() {
  lp_speed_ = 0;
}
inline double AccelerationEstimation::lp_speed() const {
  // @@protoc_insertion_point(field_get:xsproto.acceleration_estimation.AccelerationEstimation.lp_speed)
  return lp_speed_;
}
inline void AccelerationEstimation::set_lp_speed(double value) {
  
  lp_speed_ = value;
  // @@protoc_insertion_point(field_set:xsproto.acceleration_estimation.AccelerationEstimation.lp_speed)
}

// double lp_imu_acceleration = 5;
inline void AccelerationEstimation::clear_lp_imu_acceleration() {
  lp_imu_acceleration_ = 0;
}
inline double AccelerationEstimation::lp_imu_acceleration() const {
  // @@protoc_insertion_point(field_get:xsproto.acceleration_estimation.AccelerationEstimation.lp_imu_acceleration)
  return lp_imu_acceleration_;
}
inline void AccelerationEstimation::set_lp_imu_acceleration(double value) {
  
  lp_imu_acceleration_ = value;
  // @@protoc_insertion_point(field_set:xsproto.acceleration_estimation.AccelerationEstimation.lp_imu_acceleration)
}

// double vs_acceleration = 6;
inline void AccelerationEstimation::clear_vs_acceleration() {
  vs_acceleration_ = 0;
}
inline double AccelerationEstimation::vs_acceleration() const {
  // @@protoc_insertion_point(field_get:xsproto.acceleration_estimation.AccelerationEstimation.vs_acceleration)
  return vs_acceleration_;
}
inline void AccelerationEstimation::set_vs_acceleration(double value) {
  
  vs_acceleration_ = value;
  // @@protoc_insertion_point(field_set:xsproto.acceleration_estimation.AccelerationEstimation.vs_acceleration)
}

// double kalman_filter_acc = 7;
inline void AccelerationEstimation::clear_kalman_filter_acc() {
  kalman_filter_acc_ = 0;
}
inline double AccelerationEstimation::kalman_filter_acc() const {
  // @@protoc_insertion_point(field_get:xsproto.acceleration_estimation.AccelerationEstimation.kalman_filter_acc)
  return kalman_filter_acc_;
}
inline void AccelerationEstimation::set_kalman_filter_acc(double value) {
  
  kalman_filter_acc_ = value;
  // @@protoc_insertion_point(field_set:xsproto.acceleration_estimation.AccelerationEstimation.kalman_filter_acc)
}

// double digital_filter_acc = 8;
inline void AccelerationEstimation::clear_digital_filter_acc() {
  digital_filter_acc_ = 0;
}
inline double AccelerationEstimation::digital_filter_acc() const {
  // @@protoc_insertion_point(field_get:xsproto.acceleration_estimation.AccelerationEstimation.digital_filter_acc)
  return digital_filter_acc_;
}
inline void AccelerationEstimation::set_digital_filter_acc(double value) {
  
  digital_filter_acc_ = value;
  // @@protoc_insertion_point(field_set:xsproto.acceleration_estimation.AccelerationEstimation.digital_filter_acc)
}

// double lowpass1d_filter_acc = 9;
inline void AccelerationEstimation::clear_lowpass1d_filter_acc() {
  lowpass1d_filter_acc_ = 0;
}
inline double AccelerationEstimation::lowpass1d_filter_acc() const {
  // @@protoc_insertion_point(field_get:xsproto.acceleration_estimation.AccelerationEstimation.lowpass1d_filter_acc)
  return lowpass1d_filter_acc_;
}
inline void AccelerationEstimation::set_lowpass1d_filter_acc(double value) {
  
  lowpass1d_filter_acc_ = value;
  // @@protoc_insertion_point(field_set:xsproto.acceleration_estimation.AccelerationEstimation.lowpass1d_filter_acc)
}

// double highpass1d_filter_acc = 10;
inline void AccelerationEstimation::clear_highpass1d_filter_acc() {
  highpass1d_filter_acc_ = 0;
}
inline double AccelerationEstimation::highpass1d_filter_acc() const {
  // @@protoc_insertion_point(field_get:xsproto.acceleration_estimation.AccelerationEstimation.highpass1d_filter_acc)
  return highpass1d_filter_acc_;
}
inline void AccelerationEstimation::set_highpass1d_filter_acc(double value) {
  
  highpass1d_filter_acc_ = value;
  // @@protoc_insertion_point(field_set:xsproto.acceleration_estimation.AccelerationEstimation.highpass1d_filter_acc)
}

// double complementary_filter_acc = 11;
inline void AccelerationEstimation::clear_complementary_filter_acc() {
  complementary_filter_acc_ = 0;
}
inline double AccelerationEstimation::complementary_filter_acc() const {
  // @@protoc_insertion_point(field_get:xsproto.acceleration_estimation.AccelerationEstimation.complementary_filter_acc)
  return complementary_filter_acc_;
}
inline void AccelerationEstimation::set_complementary_filter_acc(double value) {
  
  complementary_filter_acc_ = value;
  // @@protoc_insertion_point(field_set:xsproto.acceleration_estimation.AccelerationEstimation.complementary_filter_acc)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace acceleration_estimation
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_2facceleration_5festimation_2eproto__INCLUDED
