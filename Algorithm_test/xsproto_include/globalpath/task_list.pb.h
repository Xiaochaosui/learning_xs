// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: globalpath/task_list.proto

#ifndef PROTOBUF_globalpath_2ftask_5flist_2eproto__INCLUDED
#define PROTOBUF_globalpath_2ftask_5flist_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_globalpath_2ftask_5flist_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTaskPointImpl();
void InitDefaultsTaskPoint();
void InitDefaultsTaskCommondImpl();
void InitDefaultsTaskCommond();
void InitDefaultsTaskRandomImpl();
void InitDefaultsTaskRandom();
void InitDefaultsLastPointInfoImpl();
void InitDefaultsLastPointInfo();
void InitDefaultsBusStationInfoImpl();
void InitDefaultsBusStationInfo();
void InitDefaultsTaskListImpl();
void InitDefaultsTaskList();
inline void InitDefaults() {
  InitDefaultsTaskPoint();
  InitDefaultsTaskCommond();
  InitDefaultsTaskRandom();
  InitDefaultsLastPointInfo();
  InitDefaultsBusStationInfo();
  InitDefaultsTaskList();
}
}  // namespace protobuf_globalpath_2ftask_5flist_2eproto
namespace xsproto {
namespace globalpath {
class BusStationInfo;
class BusStationInfoDefaultTypeInternal;
extern BusStationInfoDefaultTypeInternal _BusStationInfo_default_instance_;
class LastPointInfo;
class LastPointInfoDefaultTypeInternal;
extern LastPointInfoDefaultTypeInternal _LastPointInfo_default_instance_;
class TaskCommond;
class TaskCommondDefaultTypeInternal;
extern TaskCommondDefaultTypeInternal _TaskCommond_default_instance_;
class TaskList;
class TaskListDefaultTypeInternal;
extern TaskListDefaultTypeInternal _TaskList_default_instance_;
class TaskPoint;
class TaskPointDefaultTypeInternal;
extern TaskPointDefaultTypeInternal _TaskPoint_default_instance_;
class TaskRandom;
class TaskRandomDefaultTypeInternal;
extern TaskRandomDefaultTypeInternal _TaskRandom_default_instance_;
}  // namespace globalpath
}  // namespace xsproto
namespace xsproto {
namespace globalpath {

enum AvoidObstacleType {
  AVOID_OBSTACLE = 0,
  STOP_OBSTACLE = 1,
  LEFT_AVOID_OBSTACLE = 2,
  RIGHT_AVOID_OBSTACLE = 3,
  AvoidObstacleType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AvoidObstacleType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AvoidObstacleType_IsValid(int value);
const AvoidObstacleType AvoidObstacleType_MIN = AVOID_OBSTACLE;
const AvoidObstacleType AvoidObstacleType_MAX = RIGHT_AVOID_OBSTACLE;
const int AvoidObstacleType_ARRAYSIZE = AvoidObstacleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AvoidObstacleType_descriptor();
inline const ::std::string& AvoidObstacleType_Name(AvoidObstacleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AvoidObstacleType_descriptor(), value);
}
inline bool AvoidObstacleType_Parse(
    const ::std::string& name, AvoidObstacleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AvoidObstacleType>(
    AvoidObstacleType_descriptor(), name, value);
}
enum TurnInfo {
  NO_TURN = 0,
  LEFT_TURN = 1,
  FORWARD_TURN = 2,
  RIGHT_TURN = 3,
  U_TURN = 4,
  TurnInfo_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TurnInfo_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TurnInfo_IsValid(int value);
const TurnInfo TurnInfo_MIN = NO_TURN;
const TurnInfo TurnInfo_MAX = U_TURN;
const int TurnInfo_ARRAYSIZE = TurnInfo_MAX + 1;

const ::google::protobuf::EnumDescriptor* TurnInfo_descriptor();
inline const ::std::string& TurnInfo_Name(TurnInfo value) {
  return ::google::protobuf::internal::NameOfEnum(
    TurnInfo_descriptor(), value);
}
inline bool TurnInfo_Parse(
    const ::std::string& name, TurnInfo* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TurnInfo>(
    TurnInfo_descriptor(), name, value);
}
enum FollowType {
  LANE = 0,
  TASK = 1,
  POINT = 2,
  TASKINLANE = 3,
  FollowType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FollowType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FollowType_IsValid(int value);
const FollowType FollowType_MIN = LANE;
const FollowType FollowType_MAX = TASKINLANE;
const int FollowType_ARRAYSIZE = FollowType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FollowType_descriptor();
inline const ::std::string& FollowType_Name(FollowType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FollowType_descriptor(), value);
}
inline bool FollowType_Parse(
    const ::std::string& name, FollowType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FollowType>(
    FollowType_descriptor(), name, value);
}
enum PointSource {
  PATH_NET = 0,
  GRID_SEARCH = 1,
  PointSource_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PointSource_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PointSource_IsValid(int value);
const PointSource PointSource_MIN = PATH_NET;
const PointSource PointSource_MAX = GRID_SEARCH;
const int PointSource_ARRAYSIZE = PointSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* PointSource_descriptor();
inline const ::std::string& PointSource_Name(PointSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    PointSource_descriptor(), value);
}
inline bool PointSource_Parse(
    const ::std::string& name, PointSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PointSource>(
    PointSource_descriptor(), name, value);
}
enum AdditionProperty {
  NORMAL_PROPERTY = 0,
  KEEP_DIRECTION = 1,
  KEEP_POSITION = 2,
  AdditionProperty_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AdditionProperty_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AdditionProperty_IsValid(int value);
const AdditionProperty AdditionProperty_MIN = NORMAL_PROPERTY;
const AdditionProperty AdditionProperty_MAX = KEEP_POSITION;
const int AdditionProperty_ARRAYSIZE = AdditionProperty_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdditionProperty_descriptor();
inline const ::std::string& AdditionProperty_Name(AdditionProperty value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdditionProperty_descriptor(), value);
}
inline bool AdditionProperty_Parse(
    const ::std::string& name, AdditionProperty* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdditionProperty>(
    AdditionProperty_descriptor(), name, value);
}
enum RoadType {
  COMMUNITY = 0,
  CITY = 1,
  INDOOR = 2,
  RoadType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RoadType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RoadType_IsValid(int value);
const RoadType RoadType_MIN = COMMUNITY;
const RoadType RoadType_MAX = INDOOR;
const int RoadType_ARRAYSIZE = RoadType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoadType_descriptor();
inline const ::std::string& RoadType_Name(RoadType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoadType_descriptor(), value);
}
inline bool RoadType_Parse(
    const ::std::string& name, RoadType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoadType>(
    RoadType_descriptor(), name, value);
}
enum StopLineType {
  NO_STOP = 0,
  STOP = 1,
  StopLineType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StopLineType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StopLineType_IsValid(int value);
const StopLineType StopLineType_MIN = NO_STOP;
const StopLineType StopLineType_MAX = STOP;
const int StopLineType_ARRAYSIZE = StopLineType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StopLineType_descriptor();
inline const ::std::string& StopLineType_Name(StopLineType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StopLineType_descriptor(), value);
}
inline bool StopLineType_Parse(
    const ::std::string& name, StopLineType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StopLineType>(
    StopLineType_descriptor(), name, value);
}
enum RegionType {
  NORMAL_REGION = 0,
  BUS_PARK_STATION = 1,
  BUS_STATION = 2,
  DOOR = 3,
  RegionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RegionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RegionType_IsValid(int value);
const RegionType RegionType_MIN = NORMAL_REGION;
const RegionType RegionType_MAX = DOOR;
const int RegionType_ARRAYSIZE = RegionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RegionType_descriptor();
inline const ::std::string& RegionType_Name(RegionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegionType_descriptor(), value);
}
inline bool RegionType_Parse(
    const ::std::string& name, RegionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegionType>(
    RegionType_descriptor(), name, value);
}
enum Direction {
  FORWARD = 0,
  BACKWARD = 1,
  Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Direction_IsValid(int value);
const Direction Direction_MIN = FORWARD;
const Direction Direction_MAX = BACKWARD;
const int Direction_ARRAYSIZE = Direction_MAX + 1;

const ::google::protobuf::EnumDescriptor* Direction_descriptor();
inline const ::std::string& Direction_Name(Direction value) {
  return ::google::protobuf::internal::NameOfEnum(
    Direction_descriptor(), value);
}
inline bool Direction_Parse(
    const ::std::string& name, Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Direction>(
    Direction_descriptor(), name, value);
}
enum Replan {
  NORIMAL_POINT = 0,
  REPLAN_POINT = 1,
  Replan_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Replan_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Replan_IsValid(int value);
const Replan Replan_MIN = NORIMAL_POINT;
const Replan Replan_MAX = REPLAN_POINT;
const int Replan_ARRAYSIZE = Replan_MAX + 1;

const ::google::protobuf::EnumDescriptor* Replan_descriptor();
inline const ::std::string& Replan_Name(Replan value) {
  return ::google::protobuf::internal::NameOfEnum(
    Replan_descriptor(), value);
}
inline bool Replan_Parse(
    const ::std::string& name, Replan* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Replan>(
    Replan_descriptor(), name, value);
}
enum AvoidAllowBackType {
  AVOID_NOT_ALLOW_BACK = 0,
  AVOID_ALLOW_BACK = 1,
  AvoidAllowBackType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AvoidAllowBackType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AvoidAllowBackType_IsValid(int value);
const AvoidAllowBackType AvoidAllowBackType_MIN = AVOID_NOT_ALLOW_BACK;
const AvoidAllowBackType AvoidAllowBackType_MAX = AVOID_ALLOW_BACK;
const int AvoidAllowBackType_ARRAYSIZE = AvoidAllowBackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AvoidAllowBackType_descriptor();
inline const ::std::string& AvoidAllowBackType_Name(AvoidAllowBackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AvoidAllowBackType_descriptor(), value);
}
inline bool AvoidAllowBackType_Parse(
    const ::std::string& name, AvoidAllowBackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AvoidAllowBackType>(
    AvoidAllowBackType_descriptor(), name, value);
}
// ===================================================================

class TaskPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.globalpath.TaskPoint) */ {
 public:
  TaskPoint();
  virtual ~TaskPoint();

  TaskPoint(const TaskPoint& from);

  inline TaskPoint& operator=(const TaskPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskPoint(TaskPoint&& from) noexcept
    : TaskPoint() {
    *this = ::std::move(from);
  }

  inline TaskPoint& operator=(TaskPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskPoint* internal_default_instance() {
    return reinterpret_cast<const TaskPoint*>(
               &_TaskPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TaskPoint* other);
  friend void swap(TaskPoint& a, TaskPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskPoint& from);
  void MergeFrom(const TaskPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xsproto.globalpath.AdditionProperty addition_property = 10;
  int addition_property_size() const;
  void clear_addition_property();
  static const int kAdditionPropertyFieldNumber = 10;
  ::xsproto::globalpath::AdditionProperty addition_property(int index) const;
  void set_addition_property(int index, ::xsproto::globalpath::AdditionProperty value);
  void add_addition_property(::xsproto::globalpath::AdditionProperty value);
  const ::google::protobuf::RepeatedField<int>& addition_property() const;
  ::google::protobuf::RepeatedField<int>* mutable_addition_property();

  // double x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x() const;
  void set_x(double value);

  // double y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  double y() const;
  void set_y(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 centerline_id = 6;
  void clear_centerline_id();
  static const int kCenterlineIdFieldNumber = 6;
  ::google::protobuf::int32 centerline_id() const;
  void set_centerline_id(::google::protobuf::int32 value);

  // double angle = 4;
  void clear_angle();
  static const int kAngleFieldNumber = 4;
  double angle() const;
  void set_angle(double value);

  // double max_speed = 5;
  void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 5;
  double max_speed() const;
  void set_max_speed(double value);

  // .xsproto.globalpath.TurnInfo turn_info = 7;
  void clear_turn_info();
  static const int kTurnInfoFieldNumber = 7;
  ::xsproto::globalpath::TurnInfo turn_info() const;
  void set_turn_info(::xsproto::globalpath::TurnInfo value);

  // .xsproto.globalpath.FollowType follow_type = 8;
  void clear_follow_type();
  static const int kFollowTypeFieldNumber = 8;
  ::xsproto::globalpath::FollowType follow_type() const;
  void set_follow_type(::xsproto::globalpath::FollowType value);

  // int32 point_type = 9;
  void clear_point_type();
  static const int kPointTypeFieldNumber = 9;
  ::google::protobuf::int32 point_type() const;
  void set_point_type(::google::protobuf::int32 value);

  // .xsproto.globalpath.PointSource point_source = 11;
  void clear_point_source();
  static const int kPointSourceFieldNumber = 11;
  ::xsproto::globalpath::PointSource point_source() const;
  void set_point_source(::xsproto::globalpath::PointSource value);

  // int32 prefer_lane_id = 12;
  void clear_prefer_lane_id();
  static const int kPreferLaneIdFieldNumber = 12;
  ::google::protobuf::int32 prefer_lane_id() const;
  void set_prefer_lane_id(::google::protobuf::int32 value);

  // .xsproto.globalpath.RoadType road_type = 13;
  void clear_road_type();
  static const int kRoadTypeFieldNumber = 13;
  ::xsproto::globalpath::RoadType road_type() const;
  void set_road_type(::xsproto::globalpath::RoadType value);

  // .xsproto.globalpath.StopLineType stopline_type = 14;
  void clear_stopline_type();
  static const int kStoplineTypeFieldNumber = 14;
  ::xsproto::globalpath::StopLineType stopline_type() const;
  void set_stopline_type(::xsproto::globalpath::StopLineType value);

  // .xsproto.globalpath.RegionType region_type = 15;
  void clear_region_type();
  static const int kRegionTypeFieldNumber = 15;
  ::xsproto::globalpath::RegionType region_type() const;
  void set_region_type(::xsproto::globalpath::RegionType value);

  // .xsproto.globalpath.Direction direction = 16;
  void clear_direction();
  static const int kDirectionFieldNumber = 16;
  ::xsproto::globalpath::Direction direction() const;
  void set_direction(::xsproto::globalpath::Direction value);

  // uint32 lift_id = 17;
  void clear_lift_id();
  static const int kLiftIdFieldNumber = 17;
  ::google::protobuf::uint32 lift_id() const;
  void set_lift_id(::google::protobuf::uint32 value);

  // uint32 access_door_id = 18;
  void clear_access_door_id();
  static const int kAccessDoorIdFieldNumber = 18;
  ::google::protobuf::uint32 access_door_id() const;
  void set_access_door_id(::google::protobuf::uint32 value);

  // .xsproto.globalpath.AvoidObstacleType avoid_obstacle_type = 19;
  void clear_avoid_obstacle_type();
  static const int kAvoidObstacleTypeFieldNumber = 19;
  ::xsproto::globalpath::AvoidObstacleType avoid_obstacle_type() const;
  void set_avoid_obstacle_type(::xsproto::globalpath::AvoidObstacleType value);

  // .xsproto.globalpath.Replan replan_point = 20;
  void clear_replan_point();
  static const int kReplanPointFieldNumber = 20;
  ::xsproto::globalpath::Replan replan_point() const;
  void set_replan_point(::xsproto::globalpath::Replan value);

  // int32 sweep_device_state = 21;
  void clear_sweep_device_state();
  static const int kSweepDeviceStateFieldNumber = 21;
  ::google::protobuf::int32 sweep_device_state() const;
  void set_sweep_device_state(::google::protobuf::int32 value);

  // int32 sweep_shrink_state = 22;
  void clear_sweep_shrink_state();
  static const int kSweepShrinkStateFieldNumber = 22;
  ::google::protobuf::int32 sweep_shrink_state() const;
  void set_sweep_shrink_state(::google::protobuf::int32 value);

  // int32 flush_device_state = 23;
  void clear_flush_device_state();
  static const int kFlushDeviceStateFieldNumber = 23;
  ::google::protobuf::int32 flush_device_state() const;
  void set_flush_device_state(::google::protobuf::int32 value);

  // int32 blower_speed = 24;
  void clear_blower_speed();
  static const int kBlowerSpeedFieldNumber = 24;
  ::google::protobuf::int32 blower_speed() const;
  void set_blower_speed(::google::protobuf::int32 value);

  // int32 water_pump_speed = 25;
  void clear_water_pump_speed();
  static const int kWaterPumpSpeedFieldNumber = 25;
  ::google::protobuf::int32 water_pump_speed() const;
  void set_water_pump_speed(::google::protobuf::int32 value);

  // int32 global_point_id = 26;
  void clear_global_point_id();
  static const int kGlobalPointIdFieldNumber = 26;
  ::google::protobuf::int32 global_point_id() const;
  void set_global_point_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.globalpath.TaskPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> addition_property_;
  mutable int _addition_property_cached_byte_size_;
  double x_;
  double y_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 centerline_id_;
  double angle_;
  double max_speed_;
  int turn_info_;
  int follow_type_;
  ::google::protobuf::int32 point_type_;
  int point_source_;
  ::google::protobuf::int32 prefer_lane_id_;
  int road_type_;
  int stopline_type_;
  int region_type_;
  int direction_;
  ::google::protobuf::uint32 lift_id_;
  ::google::protobuf::uint32 access_door_id_;
  int avoid_obstacle_type_;
  int replan_point_;
  ::google::protobuf::int32 sweep_device_state_;
  ::google::protobuf::int32 sweep_shrink_state_;
  ::google::protobuf::int32 flush_device_state_;
  ::google::protobuf::int32 blower_speed_;
  ::google::protobuf::int32 water_pump_speed_;
  ::google::protobuf::int32 global_point_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_globalpath_2ftask_5flist_2eproto::TableStruct;
  friend void ::protobuf_globalpath_2ftask_5flist_2eproto::InitDefaultsTaskPointImpl();
};
// -------------------------------------------------------------------

class TaskCommond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.globalpath.TaskCommond) */ {
 public:
  TaskCommond();
  virtual ~TaskCommond();

  TaskCommond(const TaskCommond& from);

  inline TaskCommond& operator=(const TaskCommond& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskCommond(TaskCommond&& from) noexcept
    : TaskCommond() {
    *this = ::std::move(from);
  }

  inline TaskCommond& operator=(TaskCommond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskCommond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskCommond* internal_default_instance() {
    return reinterpret_cast<const TaskCommond*>(
               &_TaskCommond_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TaskCommond* other);
  friend void swap(TaskCommond& a, TaskCommond& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskCommond* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskCommond* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskCommond& from);
  void MergeFrom(const TaskCommond& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskCommond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 seq_num = 1;
  void clear_seq_num();
  static const int kSeqNumFieldNumber = 1;
  ::google::protobuf::int32 seq_num() const;
  void set_seq_num(::google::protobuf::int32 value);

  // int32 req_id = 2;
  void clear_req_id();
  static const int kReqIdFieldNumber = 2;
  ::google::protobuf::int32 req_id() const;
  void set_req_id(::google::protobuf::int32 value);

  // double x = 3;
  void clear_x();
  static const int kXFieldNumber = 3;
  double x() const;
  void set_x(double value);

  // double y = 4;
  void clear_y();
  static const int kYFieldNumber = 4;
  double y() const;
  void set_y(double value);

  // int32 wait_time = 5;
  void clear_wait_time();
  static const int kWaitTimeFieldNumber = 5;
  ::google::protobuf::int32 wait_time() const;
  void set_wait_time(::google::protobuf::int32 value);

  // int32 wait_point_id = 6;
  void clear_wait_point_id();
  static const int kWaitPointIdFieldNumber = 6;
  ::google::protobuf::int32 wait_point_id() const;
  void set_wait_point_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.globalpath.TaskCommond)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 seq_num_;
  ::google::protobuf::int32 req_id_;
  double x_;
  double y_;
  ::google::protobuf::int32 wait_time_;
  ::google::protobuf::int32 wait_point_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_globalpath_2ftask_5flist_2eproto::TableStruct;
  friend void ::protobuf_globalpath_2ftask_5flist_2eproto::InitDefaultsTaskCommondImpl();
};
// -------------------------------------------------------------------

class TaskRandom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.globalpath.TaskRandom) */ {
 public:
  TaskRandom();
  virtual ~TaskRandom();

  TaskRandom(const TaskRandom& from);

  inline TaskRandom& operator=(const TaskRandom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskRandom(TaskRandom&& from) noexcept
    : TaskRandom() {
    *this = ::std::move(from);
  }

  inline TaskRandom& operator=(TaskRandom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskRandom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskRandom* internal_default_instance() {
    return reinterpret_cast<const TaskRandom*>(
               &_TaskRandom_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TaskRandom* other);
  friend void swap(TaskRandom& a, TaskRandom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskRandom* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskRandom* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskRandom& from);
  void MergeFrom(const TaskRandom& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskRandom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 seq_num = 1;
  void clear_seq_num();
  static const int kSeqNumFieldNumber = 1;
  ::google::protobuf::int32 seq_num() const;
  void set_seq_num(::google::protobuf::int32 value);

  // int32 area_id = 2;
  void clear_area_id();
  static const int kAreaIdFieldNumber = 2;
  ::google::protobuf::int32 area_id() const;
  void set_area_id(::google::protobuf::int32 value);

  // double start_x = 3;
  void clear_start_x();
  static const int kStartXFieldNumber = 3;
  double start_x() const;
  void set_start_x(double value);

  // double start_y = 4;
  void clear_start_y();
  static const int kStartYFieldNumber = 4;
  double start_y() const;
  void set_start_y(double value);

  // double end_x = 5;
  void clear_end_x();
  static const int kEndXFieldNumber = 5;
  double end_x() const;
  void set_end_x(double value);

  // double end_y = 6;
  void clear_end_y();
  static const int kEndYFieldNumber = 6;
  double end_y() const;
  void set_end_y(double value);

  // @@protoc_insertion_point(class_scope:xsproto.globalpath.TaskRandom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 seq_num_;
  ::google::protobuf::int32 area_id_;
  double start_x_;
  double start_y_;
  double end_x_;
  double end_y_;
  mutable int _cached_size_;
  friend struct ::protobuf_globalpath_2ftask_5flist_2eproto::TableStruct;
  friend void ::protobuf_globalpath_2ftask_5flist_2eproto::InitDefaultsTaskRandomImpl();
};
// -------------------------------------------------------------------

class LastPointInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.globalpath.LastPointInfo) */ {
 public:
  LastPointInfo();
  virtual ~LastPointInfo();

  LastPointInfo(const LastPointInfo& from);

  inline LastPointInfo& operator=(const LastPointInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LastPointInfo(LastPointInfo&& from) noexcept
    : LastPointInfo() {
    *this = ::std::move(from);
  }

  inline LastPointInfo& operator=(LastPointInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LastPointInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LastPointInfo* internal_default_instance() {
    return reinterpret_cast<const LastPointInfo*>(
               &_LastPointInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LastPointInfo* other);
  friend void swap(LastPointInfo& a, LastPointInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LastPointInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  LastPointInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LastPointInfo& from);
  void MergeFrom(const LastPointInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LastPointInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double gauss_x = 1;
  void clear_gauss_x();
  static const int kGaussXFieldNumber = 1;
  double gauss_x() const;
  void set_gauss_x(double value);

  // double gauss_y = 2;
  void clear_gauss_y();
  static const int kGaussYFieldNumber = 2;
  double gauss_y() const;
  void set_gauss_y(double value);

  // double azimuth = 3;
  void clear_azimuth();
  static const int kAzimuthFieldNumber = 3;
  double azimuth() const;
  void set_azimuth(double value);

  // @@protoc_insertion_point(class_scope:xsproto.globalpath.LastPointInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double gauss_x_;
  double gauss_y_;
  double azimuth_;
  mutable int _cached_size_;
  friend struct ::protobuf_globalpath_2ftask_5flist_2eproto::TableStruct;
  friend void ::protobuf_globalpath_2ftask_5flist_2eproto::InitDefaultsLastPointInfoImpl();
};
// -------------------------------------------------------------------

class BusStationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.globalpath.BusStationInfo) */ {
 public:
  BusStationInfo();
  virtual ~BusStationInfo();

  BusStationInfo(const BusStationInfo& from);

  inline BusStationInfo& operator=(const BusStationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BusStationInfo(BusStationInfo&& from) noexcept
    : BusStationInfo() {
    *this = ::std::move(from);
  }

  inline BusStationInfo& operator=(BusStationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BusStationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BusStationInfo* internal_default_instance() {
    return reinterpret_cast<const BusStationInfo*>(
               &_BusStationInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(BusStationInfo* other);
  friend void swap(BusStationInfo& a, BusStationInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BusStationInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  BusStationInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BusStationInfo& from);
  void MergeFrom(const BusStationInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BusStationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 point_id = 1;
  void clear_point_id();
  static const int kPointIdFieldNumber = 1;
  ::google::protobuf::int32 point_id() const;
  void set_point_id(::google::protobuf::int32 value);

  // int32 station_id = 2;
  void clear_station_id();
  static const int kStationIdFieldNumber = 2;
  ::google::protobuf::int32 station_id() const;
  void set_station_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.globalpath.BusStationInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 point_id_;
  ::google::protobuf::int32 station_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_globalpath_2ftask_5flist_2eproto::TableStruct;
  friend void ::protobuf_globalpath_2ftask_5flist_2eproto::InitDefaultsBusStationInfoImpl();
};
// -------------------------------------------------------------------

class TaskList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.globalpath.TaskList) */ {
 public:
  TaskList();
  virtual ~TaskList();

  TaskList(const TaskList& from);

  inline TaskList& operator=(const TaskList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskList(TaskList&& from) noexcept
    : TaskList() {
    *this = ::std::move(from);
  }

  inline TaskList& operator=(TaskList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskList* internal_default_instance() {
    return reinterpret_cast<const TaskList*>(
               &_TaskList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(TaskList* other);
  friend void swap(TaskList& a, TaskList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskList* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskList& from);
  void MergeFrom(const TaskList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xsproto.globalpath.TaskPoint points = 4;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 4;
  const ::xsproto::globalpath::TaskPoint& points(int index) const;
  ::xsproto::globalpath::TaskPoint* mutable_points(int index);
  ::xsproto::globalpath::TaskPoint* add_points();
  ::google::protobuf::RepeatedPtrField< ::xsproto::globalpath::TaskPoint >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::globalpath::TaskPoint >&
      points() const;

  // repeated .xsproto.globalpath.TaskPoint pre_points = 5;
  int pre_points_size() const;
  void clear_pre_points();
  static const int kPrePointsFieldNumber = 5;
  const ::xsproto::globalpath::TaskPoint& pre_points(int index) const;
  ::xsproto::globalpath::TaskPoint* mutable_pre_points(int index);
  ::xsproto::globalpath::TaskPoint* add_pre_points();
  ::google::protobuf::RepeatedPtrField< ::xsproto::globalpath::TaskPoint >*
      mutable_pre_points();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::globalpath::TaskPoint >&
      pre_points() const;

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // .xsproto.globalpath.TaskCommond task_commond = 8;
  bool has_task_commond() const;
  void clear_task_commond();
  static const int kTaskCommondFieldNumber = 8;
  const ::xsproto::globalpath::TaskCommond& task_commond() const;
  ::xsproto::globalpath::TaskCommond* release_task_commond();
  ::xsproto::globalpath::TaskCommond* mutable_task_commond();
  void set_allocated_task_commond(::xsproto::globalpath::TaskCommond* task_commond);

  // .xsproto.globalpath.TaskRandom task_random = 15;
  bool has_task_random() const;
  void clear_task_random();
  static const int kTaskRandomFieldNumber = 15;
  const ::xsproto::globalpath::TaskRandom& task_random() const;
  ::xsproto::globalpath::TaskRandom* release_task_random();
  ::xsproto::globalpath::TaskRandom* mutable_task_random();
  void set_allocated_task_random(::xsproto::globalpath::TaskRandom* task_random);

  // .xsproto.globalpath.LastPointInfo last_point_guass = 16;
  bool has_last_point_guass() const;
  void clear_last_point_guass();
  static const int kLastPointGuassFieldNumber = 16;
  const ::xsproto::globalpath::LastPointInfo& last_point_guass() const;
  ::xsproto::globalpath::LastPointInfo* release_last_point_guass();
  ::xsproto::globalpath::LastPointInfo* mutable_last_point_guass();
  void set_allocated_last_point_guass(::xsproto::globalpath::LastPointInfo* last_point_guass);

  // .xsproto.globalpath.BusStationInfo bus_station_info = 18;
  bool has_bus_station_info() const;
  void clear_bus_station_info();
  static const int kBusStationInfoFieldNumber = 18;
  const ::xsproto::globalpath::BusStationInfo& bus_station_info() const;
  ::xsproto::globalpath::BusStationInfo* release_bus_station_info();
  ::xsproto::globalpath::BusStationInfo* mutable_bus_station_info();
  void set_allocated_bus_station_info(::xsproto::globalpath::BusStationInfo* bus_station_info);

  // double localpose_time = 2;
  void clear_localpose_time();
  static const int kLocalposeTimeFieldNumber = 2;
  double localpose_time() const;
  void set_localpose_time(double value);

  // double globalpose_time = 3;
  void clear_globalpose_time();
  static const int kGlobalposeTimeFieldNumber = 3;
  double globalpose_time() const;
  void set_globalpose_time(double value);

  // int32 goal_floor = 6;
  void clear_goal_floor();
  static const int kGoalFloorFieldNumber = 6;
  ::google::protobuf::int32 goal_floor() const;
  void set_goal_floor(::google::protobuf::int32 value);

  // int32 current_floor = 7;
  void clear_current_floor();
  static const int kCurrentFloorFieldNumber = 7;
  ::google::protobuf::int32 current_floor() const;
  void set_current_floor(::google::protobuf::int32 value);

  // .xsproto.globalpath.AvoidObstacleType avoid_obstacle_type = 9;
  void clear_avoid_obstacle_type();
  static const int kAvoidObstacleTypeFieldNumber = 9;
  ::xsproto::globalpath::AvoidObstacleType avoid_obstacle_type() const;
  void set_avoid_obstacle_type(::xsproto::globalpath::AvoidObstacleType value);

  // int32 left_distance_to_curb = 10;
  void clear_left_distance_to_curb();
  static const int kLeftDistanceToCurbFieldNumber = 10;
  ::google::protobuf::int32 left_distance_to_curb() const;
  void set_left_distance_to_curb(::google::protobuf::int32 value);

  // int32 right_distance_to_curb = 11;
  void clear_right_distance_to_curb();
  static const int kRightDistanceToCurbFieldNumber = 11;
  ::google::protobuf::int32 right_distance_to_curb() const;
  void set_right_distance_to_curb(::google::protobuf::int32 value);

  // float obstacle_safe_distance = 12;
  void clear_obstacle_safe_distance();
  static const int kObstacleSafeDistanceFieldNumber = 12;
  float obstacle_safe_distance() const;
  void set_obstacle_safe_distance(float value);

  // float obstacle_avoid_distance = 13;
  void clear_obstacle_avoid_distance();
  static const int kObstacleAvoidDistanceFieldNumber = 13;
  float obstacle_avoid_distance() const;
  void set_obstacle_avoid_distance(float value);

  // .xsproto.globalpath.AvoidAllowBackType allow_back = 14;
  void clear_allow_back();
  static const int kAllowBackFieldNumber = 14;
  ::xsproto::globalpath::AvoidAllowBackType allow_back() const;
  void set_allow_back(::xsproto::globalpath::AvoidAllowBackType value);

  // int32 message_seq_num = 17;
  void clear_message_seq_num();
  static const int kMessageSeqNumFieldNumber = 17;
  ::google::protobuf::int32 message_seq_num() const;
  void set_message_seq_num(::google::protobuf::int32 value);

  // .xsproto.globalpath.TurnInfo first_turn_info = 20;
  void clear_first_turn_info();
  static const int kFirstTurnInfoFieldNumber = 20;
  ::xsproto::globalpath::TurnInfo first_turn_info() const;
  void set_first_turn_info(::xsproto::globalpath::TurnInfo value);

  // double first_turn_distance = 19;
  void clear_first_turn_distance();
  static const int kFirstTurnDistanceFieldNumber = 19;
  double first_turn_distance() const;
  void set_first_turn_distance(double value);

  // double first_bus_station_distance = 21;
  void clear_first_bus_station_distance();
  static const int kFirstBusStationDistanceFieldNumber = 21;
  double first_bus_station_distance() const;
  void set_first_bus_station_distance(double value);

  // double task_distance = 22;
  void clear_task_distance();
  static const int kTaskDistanceFieldNumber = 22;
  double task_distance() const;
  void set_task_distance(double value);

  // @@protoc_insertion_point(class_scope:xsproto.globalpath.TaskList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::globalpath::TaskPoint > points_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::globalpath::TaskPoint > pre_points_;
  ::xsproto::base::Header* header_;
  ::xsproto::globalpath::TaskCommond* task_commond_;
  ::xsproto::globalpath::TaskRandom* task_random_;
  ::xsproto::globalpath::LastPointInfo* last_point_guass_;
  ::xsproto::globalpath::BusStationInfo* bus_station_info_;
  double localpose_time_;
  double globalpose_time_;
  ::google::protobuf::int32 goal_floor_;
  ::google::protobuf::int32 current_floor_;
  int avoid_obstacle_type_;
  ::google::protobuf::int32 left_distance_to_curb_;
  ::google::protobuf::int32 right_distance_to_curb_;
  float obstacle_safe_distance_;
  float obstacle_avoid_distance_;
  int allow_back_;
  ::google::protobuf::int32 message_seq_num_;
  int first_turn_info_;
  double first_turn_distance_;
  double first_bus_station_distance_;
  double task_distance_;
  mutable int _cached_size_;
  friend struct ::protobuf_globalpath_2ftask_5flist_2eproto::TableStruct;
  friend void ::protobuf_globalpath_2ftask_5flist_2eproto::InitDefaultsTaskListImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskPoint

// int32 id = 1;
inline void TaskPoint::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 TaskPoint::id() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.id)
  return id_;
}
inline void TaskPoint::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.id)
}

// double x = 2;
inline void TaskPoint::clear_x() {
  x_ = 0;
}
inline double TaskPoint::x() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.x)
  return x_;
}
inline void TaskPoint::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.x)
}

// double y = 3;
inline void TaskPoint::clear_y() {
  y_ = 0;
}
inline double TaskPoint::y() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.y)
  return y_;
}
inline void TaskPoint::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.y)
}

// double angle = 4;
inline void TaskPoint::clear_angle() {
  angle_ = 0;
}
inline double TaskPoint::angle() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.angle)
  return angle_;
}
inline void TaskPoint::set_angle(double value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.angle)
}

// double max_speed = 5;
inline void TaskPoint::clear_max_speed() {
  max_speed_ = 0;
}
inline double TaskPoint::max_speed() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.max_speed)
  return max_speed_;
}
inline void TaskPoint::set_max_speed(double value) {
  
  max_speed_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.max_speed)
}

// int32 centerline_id = 6;
inline void TaskPoint::clear_centerline_id() {
  centerline_id_ = 0;
}
inline ::google::protobuf::int32 TaskPoint::centerline_id() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.centerline_id)
  return centerline_id_;
}
inline void TaskPoint::set_centerline_id(::google::protobuf::int32 value) {
  
  centerline_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.centerline_id)
}

// .xsproto.globalpath.TurnInfo turn_info = 7;
inline void TaskPoint::clear_turn_info() {
  turn_info_ = 0;
}
inline ::xsproto::globalpath::TurnInfo TaskPoint::turn_info() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.turn_info)
  return static_cast< ::xsproto::globalpath::TurnInfo >(turn_info_);
}
inline void TaskPoint::set_turn_info(::xsproto::globalpath::TurnInfo value) {
  
  turn_info_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.turn_info)
}

// .xsproto.globalpath.FollowType follow_type = 8;
inline void TaskPoint::clear_follow_type() {
  follow_type_ = 0;
}
inline ::xsproto::globalpath::FollowType TaskPoint::follow_type() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.follow_type)
  return static_cast< ::xsproto::globalpath::FollowType >(follow_type_);
}
inline void TaskPoint::set_follow_type(::xsproto::globalpath::FollowType value) {
  
  follow_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.follow_type)
}

// int32 point_type = 9;
inline void TaskPoint::clear_point_type() {
  point_type_ = 0;
}
inline ::google::protobuf::int32 TaskPoint::point_type() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.point_type)
  return point_type_;
}
inline void TaskPoint::set_point_type(::google::protobuf::int32 value) {
  
  point_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.point_type)
}

// repeated .xsproto.globalpath.AdditionProperty addition_property = 10;
inline int TaskPoint::addition_property_size() const {
  return addition_property_.size();
}
inline void TaskPoint::clear_addition_property() {
  addition_property_.Clear();
}
inline ::xsproto::globalpath::AdditionProperty TaskPoint::addition_property(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.addition_property)
  return static_cast< ::xsproto::globalpath::AdditionProperty >(addition_property_.Get(index));
}
inline void TaskPoint::set_addition_property(int index, ::xsproto::globalpath::AdditionProperty value) {
  addition_property_.Set(index, value);
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.addition_property)
}
inline void TaskPoint::add_addition_property(::xsproto::globalpath::AdditionProperty value) {
  addition_property_.Add(value);
  // @@protoc_insertion_point(field_add:xsproto.globalpath.TaskPoint.addition_property)
}
inline const ::google::protobuf::RepeatedField<int>&
TaskPoint::addition_property() const {
  // @@protoc_insertion_point(field_list:xsproto.globalpath.TaskPoint.addition_property)
  return addition_property_;
}
inline ::google::protobuf::RepeatedField<int>*
TaskPoint::mutable_addition_property() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.globalpath.TaskPoint.addition_property)
  return &addition_property_;
}

// .xsproto.globalpath.PointSource point_source = 11;
inline void TaskPoint::clear_point_source() {
  point_source_ = 0;
}
inline ::xsproto::globalpath::PointSource TaskPoint::point_source() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.point_source)
  return static_cast< ::xsproto::globalpath::PointSource >(point_source_);
}
inline void TaskPoint::set_point_source(::xsproto::globalpath::PointSource value) {
  
  point_source_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.point_source)
}

// int32 prefer_lane_id = 12;
inline void TaskPoint::clear_prefer_lane_id() {
  prefer_lane_id_ = 0;
}
inline ::google::protobuf::int32 TaskPoint::prefer_lane_id() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.prefer_lane_id)
  return prefer_lane_id_;
}
inline void TaskPoint::set_prefer_lane_id(::google::protobuf::int32 value) {
  
  prefer_lane_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.prefer_lane_id)
}

// .xsproto.globalpath.RoadType road_type = 13;
inline void TaskPoint::clear_road_type() {
  road_type_ = 0;
}
inline ::xsproto::globalpath::RoadType TaskPoint::road_type() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.road_type)
  return static_cast< ::xsproto::globalpath::RoadType >(road_type_);
}
inline void TaskPoint::set_road_type(::xsproto::globalpath::RoadType value) {
  
  road_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.road_type)
}

// .xsproto.globalpath.StopLineType stopline_type = 14;
inline void TaskPoint::clear_stopline_type() {
  stopline_type_ = 0;
}
inline ::xsproto::globalpath::StopLineType TaskPoint::stopline_type() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.stopline_type)
  return static_cast< ::xsproto::globalpath::StopLineType >(stopline_type_);
}
inline void TaskPoint::set_stopline_type(::xsproto::globalpath::StopLineType value) {
  
  stopline_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.stopline_type)
}

// .xsproto.globalpath.RegionType region_type = 15;
inline void TaskPoint::clear_region_type() {
  region_type_ = 0;
}
inline ::xsproto::globalpath::RegionType TaskPoint::region_type() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.region_type)
  return static_cast< ::xsproto::globalpath::RegionType >(region_type_);
}
inline void TaskPoint::set_region_type(::xsproto::globalpath::RegionType value) {
  
  region_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.region_type)
}

// .xsproto.globalpath.Direction direction = 16;
inline void TaskPoint::clear_direction() {
  direction_ = 0;
}
inline ::xsproto::globalpath::Direction TaskPoint::direction() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.direction)
  return static_cast< ::xsproto::globalpath::Direction >(direction_);
}
inline void TaskPoint::set_direction(::xsproto::globalpath::Direction value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.direction)
}

// uint32 lift_id = 17;
inline void TaskPoint::clear_lift_id() {
  lift_id_ = 0u;
}
inline ::google::protobuf::uint32 TaskPoint::lift_id() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.lift_id)
  return lift_id_;
}
inline void TaskPoint::set_lift_id(::google::protobuf::uint32 value) {
  
  lift_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.lift_id)
}

// uint32 access_door_id = 18;
inline void TaskPoint::clear_access_door_id() {
  access_door_id_ = 0u;
}
inline ::google::protobuf::uint32 TaskPoint::access_door_id() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.access_door_id)
  return access_door_id_;
}
inline void TaskPoint::set_access_door_id(::google::protobuf::uint32 value) {
  
  access_door_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.access_door_id)
}

// .xsproto.globalpath.AvoidObstacleType avoid_obstacle_type = 19;
inline void TaskPoint::clear_avoid_obstacle_type() {
  avoid_obstacle_type_ = 0;
}
inline ::xsproto::globalpath::AvoidObstacleType TaskPoint::avoid_obstacle_type() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.avoid_obstacle_type)
  return static_cast< ::xsproto::globalpath::AvoidObstacleType >(avoid_obstacle_type_);
}
inline void TaskPoint::set_avoid_obstacle_type(::xsproto::globalpath::AvoidObstacleType value) {
  
  avoid_obstacle_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.avoid_obstacle_type)
}

// .xsproto.globalpath.Replan replan_point = 20;
inline void TaskPoint::clear_replan_point() {
  replan_point_ = 0;
}
inline ::xsproto::globalpath::Replan TaskPoint::replan_point() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.replan_point)
  return static_cast< ::xsproto::globalpath::Replan >(replan_point_);
}
inline void TaskPoint::set_replan_point(::xsproto::globalpath::Replan value) {
  
  replan_point_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.replan_point)
}

// int32 sweep_device_state = 21;
inline void TaskPoint::clear_sweep_device_state() {
  sweep_device_state_ = 0;
}
inline ::google::protobuf::int32 TaskPoint::sweep_device_state() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.sweep_device_state)
  return sweep_device_state_;
}
inline void TaskPoint::set_sweep_device_state(::google::protobuf::int32 value) {
  
  sweep_device_state_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.sweep_device_state)
}

// int32 sweep_shrink_state = 22;
inline void TaskPoint::clear_sweep_shrink_state() {
  sweep_shrink_state_ = 0;
}
inline ::google::protobuf::int32 TaskPoint::sweep_shrink_state() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.sweep_shrink_state)
  return sweep_shrink_state_;
}
inline void TaskPoint::set_sweep_shrink_state(::google::protobuf::int32 value) {
  
  sweep_shrink_state_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.sweep_shrink_state)
}

// int32 flush_device_state = 23;
inline void TaskPoint::clear_flush_device_state() {
  flush_device_state_ = 0;
}
inline ::google::protobuf::int32 TaskPoint::flush_device_state() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.flush_device_state)
  return flush_device_state_;
}
inline void TaskPoint::set_flush_device_state(::google::protobuf::int32 value) {
  
  flush_device_state_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.flush_device_state)
}

// int32 blower_speed = 24;
inline void TaskPoint::clear_blower_speed() {
  blower_speed_ = 0;
}
inline ::google::protobuf::int32 TaskPoint::blower_speed() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.blower_speed)
  return blower_speed_;
}
inline void TaskPoint::set_blower_speed(::google::protobuf::int32 value) {
  
  blower_speed_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.blower_speed)
}

// int32 water_pump_speed = 25;
inline void TaskPoint::clear_water_pump_speed() {
  water_pump_speed_ = 0;
}
inline ::google::protobuf::int32 TaskPoint::water_pump_speed() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.water_pump_speed)
  return water_pump_speed_;
}
inline void TaskPoint::set_water_pump_speed(::google::protobuf::int32 value) {
  
  water_pump_speed_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.water_pump_speed)
}

// int32 global_point_id = 26;
inline void TaskPoint::clear_global_point_id() {
  global_point_id_ = 0;
}
inline ::google::protobuf::int32 TaskPoint::global_point_id() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskPoint.global_point_id)
  return global_point_id_;
}
inline void TaskPoint::set_global_point_id(::google::protobuf::int32 value) {
  
  global_point_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskPoint.global_point_id)
}

// -------------------------------------------------------------------

// TaskCommond

// int32 seq_num = 1;
inline void TaskCommond::clear_seq_num() {
  seq_num_ = 0;
}
inline ::google::protobuf::int32 TaskCommond::seq_num() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskCommond.seq_num)
  return seq_num_;
}
inline void TaskCommond::set_seq_num(::google::protobuf::int32 value) {
  
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskCommond.seq_num)
}

// int32 req_id = 2;
inline void TaskCommond::clear_req_id() {
  req_id_ = 0;
}
inline ::google::protobuf::int32 TaskCommond::req_id() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskCommond.req_id)
  return req_id_;
}
inline void TaskCommond::set_req_id(::google::protobuf::int32 value) {
  
  req_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskCommond.req_id)
}

// double x = 3;
inline void TaskCommond::clear_x() {
  x_ = 0;
}
inline double TaskCommond::x() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskCommond.x)
  return x_;
}
inline void TaskCommond::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskCommond.x)
}

// double y = 4;
inline void TaskCommond::clear_y() {
  y_ = 0;
}
inline double TaskCommond::y() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskCommond.y)
  return y_;
}
inline void TaskCommond::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskCommond.y)
}

// int32 wait_time = 5;
inline void TaskCommond::clear_wait_time() {
  wait_time_ = 0;
}
inline ::google::protobuf::int32 TaskCommond::wait_time() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskCommond.wait_time)
  return wait_time_;
}
inline void TaskCommond::set_wait_time(::google::protobuf::int32 value) {
  
  wait_time_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskCommond.wait_time)
}

// int32 wait_point_id = 6;
inline void TaskCommond::clear_wait_point_id() {
  wait_point_id_ = 0;
}
inline ::google::protobuf::int32 TaskCommond::wait_point_id() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskCommond.wait_point_id)
  return wait_point_id_;
}
inline void TaskCommond::set_wait_point_id(::google::protobuf::int32 value) {
  
  wait_point_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskCommond.wait_point_id)
}

// -------------------------------------------------------------------

// TaskRandom

// int32 seq_num = 1;
inline void TaskRandom::clear_seq_num() {
  seq_num_ = 0;
}
inline ::google::protobuf::int32 TaskRandom::seq_num() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskRandom.seq_num)
  return seq_num_;
}
inline void TaskRandom::set_seq_num(::google::protobuf::int32 value) {
  
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskRandom.seq_num)
}

// int32 area_id = 2;
inline void TaskRandom::clear_area_id() {
  area_id_ = 0;
}
inline ::google::protobuf::int32 TaskRandom::area_id() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskRandom.area_id)
  return area_id_;
}
inline void TaskRandom::set_area_id(::google::protobuf::int32 value) {
  
  area_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskRandom.area_id)
}

// double start_x = 3;
inline void TaskRandom::clear_start_x() {
  start_x_ = 0;
}
inline double TaskRandom::start_x() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskRandom.start_x)
  return start_x_;
}
inline void TaskRandom::set_start_x(double value) {
  
  start_x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskRandom.start_x)
}

// double start_y = 4;
inline void TaskRandom::clear_start_y() {
  start_y_ = 0;
}
inline double TaskRandom::start_y() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskRandom.start_y)
  return start_y_;
}
inline void TaskRandom::set_start_y(double value) {
  
  start_y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskRandom.start_y)
}

// double end_x = 5;
inline void TaskRandom::clear_end_x() {
  end_x_ = 0;
}
inline double TaskRandom::end_x() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskRandom.end_x)
  return end_x_;
}
inline void TaskRandom::set_end_x(double value) {
  
  end_x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskRandom.end_x)
}

// double end_y = 6;
inline void TaskRandom::clear_end_y() {
  end_y_ = 0;
}
inline double TaskRandom::end_y() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskRandom.end_y)
  return end_y_;
}
inline void TaskRandom::set_end_y(double value) {
  
  end_y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskRandom.end_y)
}

// -------------------------------------------------------------------

// LastPointInfo

// double gauss_x = 1;
inline void LastPointInfo::clear_gauss_x() {
  gauss_x_ = 0;
}
inline double LastPointInfo::gauss_x() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.LastPointInfo.gauss_x)
  return gauss_x_;
}
inline void LastPointInfo::set_gauss_x(double value) {
  
  gauss_x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.LastPointInfo.gauss_x)
}

// double gauss_y = 2;
inline void LastPointInfo::clear_gauss_y() {
  gauss_y_ = 0;
}
inline double LastPointInfo::gauss_y() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.LastPointInfo.gauss_y)
  return gauss_y_;
}
inline void LastPointInfo::set_gauss_y(double value) {
  
  gauss_y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.LastPointInfo.gauss_y)
}

// double azimuth = 3;
inline void LastPointInfo::clear_azimuth() {
  azimuth_ = 0;
}
inline double LastPointInfo::azimuth() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.LastPointInfo.azimuth)
  return azimuth_;
}
inline void LastPointInfo::set_azimuth(double value) {
  
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.LastPointInfo.azimuth)
}

// -------------------------------------------------------------------

// BusStationInfo

// int32 point_id = 1;
inline void BusStationInfo::clear_point_id() {
  point_id_ = 0;
}
inline ::google::protobuf::int32 BusStationInfo::point_id() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.BusStationInfo.point_id)
  return point_id_;
}
inline void BusStationInfo::set_point_id(::google::protobuf::int32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.BusStationInfo.point_id)
}

// int32 station_id = 2;
inline void BusStationInfo::clear_station_id() {
  station_id_ = 0;
}
inline ::google::protobuf::int32 BusStationInfo::station_id() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.BusStationInfo.station_id)
  return station_id_;
}
inline void BusStationInfo::set_station_id(::google::protobuf::int32 value) {
  
  station_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.BusStationInfo.station_id)
}

// -------------------------------------------------------------------

// TaskList

// .xsproto.base.Header header = 1;
inline bool TaskList::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& TaskList::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* TaskList::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.globalpath.TaskList.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* TaskList::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.globalpath.TaskList.header)
  return header_;
}
inline void TaskList::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.globalpath.TaskList.header)
}

// double localpose_time = 2;
inline void TaskList::clear_localpose_time() {
  localpose_time_ = 0;
}
inline double TaskList::localpose_time() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.localpose_time)
  return localpose_time_;
}
inline void TaskList::set_localpose_time(double value) {
  
  localpose_time_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.localpose_time)
}

// double globalpose_time = 3;
inline void TaskList::clear_globalpose_time() {
  globalpose_time_ = 0;
}
inline double TaskList::globalpose_time() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.globalpose_time)
  return globalpose_time_;
}
inline void TaskList::set_globalpose_time(double value) {
  
  globalpose_time_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.globalpose_time)
}

// repeated .xsproto.globalpath.TaskPoint points = 4;
inline int TaskList::points_size() const {
  return points_.size();
}
inline void TaskList::clear_points() {
  points_.Clear();
}
inline const ::xsproto::globalpath::TaskPoint& TaskList::points(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.points)
  return points_.Get(index);
}
inline ::xsproto::globalpath::TaskPoint* TaskList::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.globalpath.TaskList.points)
  return points_.Mutable(index);
}
inline ::xsproto::globalpath::TaskPoint* TaskList::add_points() {
  // @@protoc_insertion_point(field_add:xsproto.globalpath.TaskList.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::globalpath::TaskPoint >*
TaskList::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.globalpath.TaskList.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::globalpath::TaskPoint >&
TaskList::points() const {
  // @@protoc_insertion_point(field_list:xsproto.globalpath.TaskList.points)
  return points_;
}

// repeated .xsproto.globalpath.TaskPoint pre_points = 5;
inline int TaskList::pre_points_size() const {
  return pre_points_.size();
}
inline void TaskList::clear_pre_points() {
  pre_points_.Clear();
}
inline const ::xsproto::globalpath::TaskPoint& TaskList::pre_points(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.pre_points)
  return pre_points_.Get(index);
}
inline ::xsproto::globalpath::TaskPoint* TaskList::mutable_pre_points(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.globalpath.TaskList.pre_points)
  return pre_points_.Mutable(index);
}
inline ::xsproto::globalpath::TaskPoint* TaskList::add_pre_points() {
  // @@protoc_insertion_point(field_add:xsproto.globalpath.TaskList.pre_points)
  return pre_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::globalpath::TaskPoint >*
TaskList::mutable_pre_points() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.globalpath.TaskList.pre_points)
  return &pre_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::globalpath::TaskPoint >&
TaskList::pre_points() const {
  // @@protoc_insertion_point(field_list:xsproto.globalpath.TaskList.pre_points)
  return pre_points_;
}

// int32 goal_floor = 6;
inline void TaskList::clear_goal_floor() {
  goal_floor_ = 0;
}
inline ::google::protobuf::int32 TaskList::goal_floor() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.goal_floor)
  return goal_floor_;
}
inline void TaskList::set_goal_floor(::google::protobuf::int32 value) {
  
  goal_floor_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.goal_floor)
}

// int32 current_floor = 7;
inline void TaskList::clear_current_floor() {
  current_floor_ = 0;
}
inline ::google::protobuf::int32 TaskList::current_floor() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.current_floor)
  return current_floor_;
}
inline void TaskList::set_current_floor(::google::protobuf::int32 value) {
  
  current_floor_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.current_floor)
}

// .xsproto.globalpath.TaskCommond task_commond = 8;
inline bool TaskList::has_task_commond() const {
  return this != internal_default_instance() && task_commond_ != NULL;
}
inline void TaskList::clear_task_commond() {
  if (GetArenaNoVirtual() == NULL && task_commond_ != NULL) {
    delete task_commond_;
  }
  task_commond_ = NULL;
}
inline const ::xsproto::globalpath::TaskCommond& TaskList::task_commond() const {
  const ::xsproto::globalpath::TaskCommond* p = task_commond_;
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.task_commond)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::globalpath::TaskCommond*>(
      &::xsproto::globalpath::_TaskCommond_default_instance_);
}
inline ::xsproto::globalpath::TaskCommond* TaskList::release_task_commond() {
  // @@protoc_insertion_point(field_release:xsproto.globalpath.TaskList.task_commond)
  
  ::xsproto::globalpath::TaskCommond* temp = task_commond_;
  task_commond_ = NULL;
  return temp;
}
inline ::xsproto::globalpath::TaskCommond* TaskList::mutable_task_commond() {
  
  if (task_commond_ == NULL) {
    task_commond_ = new ::xsproto::globalpath::TaskCommond;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.globalpath.TaskList.task_commond)
  return task_commond_;
}
inline void TaskList::set_allocated_task_commond(::xsproto::globalpath::TaskCommond* task_commond) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete task_commond_;
  }
  if (task_commond) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task_commond = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_commond, submessage_arena);
    }
    
  } else {
    
  }
  task_commond_ = task_commond;
  // @@protoc_insertion_point(field_set_allocated:xsproto.globalpath.TaskList.task_commond)
}

// .xsproto.globalpath.AvoidObstacleType avoid_obstacle_type = 9;
inline void TaskList::clear_avoid_obstacle_type() {
  avoid_obstacle_type_ = 0;
}
inline ::xsproto::globalpath::AvoidObstacleType TaskList::avoid_obstacle_type() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.avoid_obstacle_type)
  return static_cast< ::xsproto::globalpath::AvoidObstacleType >(avoid_obstacle_type_);
}
inline void TaskList::set_avoid_obstacle_type(::xsproto::globalpath::AvoidObstacleType value) {
  
  avoid_obstacle_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.avoid_obstacle_type)
}

// int32 left_distance_to_curb = 10;
inline void TaskList::clear_left_distance_to_curb() {
  left_distance_to_curb_ = 0;
}
inline ::google::protobuf::int32 TaskList::left_distance_to_curb() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.left_distance_to_curb)
  return left_distance_to_curb_;
}
inline void TaskList::set_left_distance_to_curb(::google::protobuf::int32 value) {
  
  left_distance_to_curb_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.left_distance_to_curb)
}

// int32 right_distance_to_curb = 11;
inline void TaskList::clear_right_distance_to_curb() {
  right_distance_to_curb_ = 0;
}
inline ::google::protobuf::int32 TaskList::right_distance_to_curb() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.right_distance_to_curb)
  return right_distance_to_curb_;
}
inline void TaskList::set_right_distance_to_curb(::google::protobuf::int32 value) {
  
  right_distance_to_curb_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.right_distance_to_curb)
}

// float obstacle_safe_distance = 12;
inline void TaskList::clear_obstacle_safe_distance() {
  obstacle_safe_distance_ = 0;
}
inline float TaskList::obstacle_safe_distance() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.obstacle_safe_distance)
  return obstacle_safe_distance_;
}
inline void TaskList::set_obstacle_safe_distance(float value) {
  
  obstacle_safe_distance_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.obstacle_safe_distance)
}

// float obstacle_avoid_distance = 13;
inline void TaskList::clear_obstacle_avoid_distance() {
  obstacle_avoid_distance_ = 0;
}
inline float TaskList::obstacle_avoid_distance() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.obstacle_avoid_distance)
  return obstacle_avoid_distance_;
}
inline void TaskList::set_obstacle_avoid_distance(float value) {
  
  obstacle_avoid_distance_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.obstacle_avoid_distance)
}

// .xsproto.globalpath.AvoidAllowBackType allow_back = 14;
inline void TaskList::clear_allow_back() {
  allow_back_ = 0;
}
inline ::xsproto::globalpath::AvoidAllowBackType TaskList::allow_back() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.allow_back)
  return static_cast< ::xsproto::globalpath::AvoidAllowBackType >(allow_back_);
}
inline void TaskList::set_allow_back(::xsproto::globalpath::AvoidAllowBackType value) {
  
  allow_back_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.allow_back)
}

// .xsproto.globalpath.TaskRandom task_random = 15;
inline bool TaskList::has_task_random() const {
  return this != internal_default_instance() && task_random_ != NULL;
}
inline void TaskList::clear_task_random() {
  if (GetArenaNoVirtual() == NULL && task_random_ != NULL) {
    delete task_random_;
  }
  task_random_ = NULL;
}
inline const ::xsproto::globalpath::TaskRandom& TaskList::task_random() const {
  const ::xsproto::globalpath::TaskRandom* p = task_random_;
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.task_random)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::globalpath::TaskRandom*>(
      &::xsproto::globalpath::_TaskRandom_default_instance_);
}
inline ::xsproto::globalpath::TaskRandom* TaskList::release_task_random() {
  // @@protoc_insertion_point(field_release:xsproto.globalpath.TaskList.task_random)
  
  ::xsproto::globalpath::TaskRandom* temp = task_random_;
  task_random_ = NULL;
  return temp;
}
inline ::xsproto::globalpath::TaskRandom* TaskList::mutable_task_random() {
  
  if (task_random_ == NULL) {
    task_random_ = new ::xsproto::globalpath::TaskRandom;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.globalpath.TaskList.task_random)
  return task_random_;
}
inline void TaskList::set_allocated_task_random(::xsproto::globalpath::TaskRandom* task_random) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete task_random_;
  }
  if (task_random) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task_random = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_random, submessage_arena);
    }
    
  } else {
    
  }
  task_random_ = task_random;
  // @@protoc_insertion_point(field_set_allocated:xsproto.globalpath.TaskList.task_random)
}

// .xsproto.globalpath.LastPointInfo last_point_guass = 16;
inline bool TaskList::has_last_point_guass() const {
  return this != internal_default_instance() && last_point_guass_ != NULL;
}
inline void TaskList::clear_last_point_guass() {
  if (GetArenaNoVirtual() == NULL && last_point_guass_ != NULL) {
    delete last_point_guass_;
  }
  last_point_guass_ = NULL;
}
inline const ::xsproto::globalpath::LastPointInfo& TaskList::last_point_guass() const {
  const ::xsproto::globalpath::LastPointInfo* p = last_point_guass_;
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.last_point_guass)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::globalpath::LastPointInfo*>(
      &::xsproto::globalpath::_LastPointInfo_default_instance_);
}
inline ::xsproto::globalpath::LastPointInfo* TaskList::release_last_point_guass() {
  // @@protoc_insertion_point(field_release:xsproto.globalpath.TaskList.last_point_guass)
  
  ::xsproto::globalpath::LastPointInfo* temp = last_point_guass_;
  last_point_guass_ = NULL;
  return temp;
}
inline ::xsproto::globalpath::LastPointInfo* TaskList::mutable_last_point_guass() {
  
  if (last_point_guass_ == NULL) {
    last_point_guass_ = new ::xsproto::globalpath::LastPointInfo;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.globalpath.TaskList.last_point_guass)
  return last_point_guass_;
}
inline void TaskList::set_allocated_last_point_guass(::xsproto::globalpath::LastPointInfo* last_point_guass) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete last_point_guass_;
  }
  if (last_point_guass) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_point_guass = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_point_guass, submessage_arena);
    }
    
  } else {
    
  }
  last_point_guass_ = last_point_guass;
  // @@protoc_insertion_point(field_set_allocated:xsproto.globalpath.TaskList.last_point_guass)
}

// int32 message_seq_num = 17;
inline void TaskList::clear_message_seq_num() {
  message_seq_num_ = 0;
}
inline ::google::protobuf::int32 TaskList::message_seq_num() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.message_seq_num)
  return message_seq_num_;
}
inline void TaskList::set_message_seq_num(::google::protobuf::int32 value) {
  
  message_seq_num_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.message_seq_num)
}

// .xsproto.globalpath.BusStationInfo bus_station_info = 18;
inline bool TaskList::has_bus_station_info() const {
  return this != internal_default_instance() && bus_station_info_ != NULL;
}
inline void TaskList::clear_bus_station_info() {
  if (GetArenaNoVirtual() == NULL && bus_station_info_ != NULL) {
    delete bus_station_info_;
  }
  bus_station_info_ = NULL;
}
inline const ::xsproto::globalpath::BusStationInfo& TaskList::bus_station_info() const {
  const ::xsproto::globalpath::BusStationInfo* p = bus_station_info_;
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.bus_station_info)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::globalpath::BusStationInfo*>(
      &::xsproto::globalpath::_BusStationInfo_default_instance_);
}
inline ::xsproto::globalpath::BusStationInfo* TaskList::release_bus_station_info() {
  // @@protoc_insertion_point(field_release:xsproto.globalpath.TaskList.bus_station_info)
  
  ::xsproto::globalpath::BusStationInfo* temp = bus_station_info_;
  bus_station_info_ = NULL;
  return temp;
}
inline ::xsproto::globalpath::BusStationInfo* TaskList::mutable_bus_station_info() {
  
  if (bus_station_info_ == NULL) {
    bus_station_info_ = new ::xsproto::globalpath::BusStationInfo;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.globalpath.TaskList.bus_station_info)
  return bus_station_info_;
}
inline void TaskList::set_allocated_bus_station_info(::xsproto::globalpath::BusStationInfo* bus_station_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bus_station_info_;
  }
  if (bus_station_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bus_station_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bus_station_info, submessage_arena);
    }
    
  } else {
    
  }
  bus_station_info_ = bus_station_info;
  // @@protoc_insertion_point(field_set_allocated:xsproto.globalpath.TaskList.bus_station_info)
}

// double first_turn_distance = 19;
inline void TaskList::clear_first_turn_distance() {
  first_turn_distance_ = 0;
}
inline double TaskList::first_turn_distance() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.first_turn_distance)
  return first_turn_distance_;
}
inline void TaskList::set_first_turn_distance(double value) {
  
  first_turn_distance_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.first_turn_distance)
}

// .xsproto.globalpath.TurnInfo first_turn_info = 20;
inline void TaskList::clear_first_turn_info() {
  first_turn_info_ = 0;
}
inline ::xsproto::globalpath::TurnInfo TaskList::first_turn_info() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.first_turn_info)
  return static_cast< ::xsproto::globalpath::TurnInfo >(first_turn_info_);
}
inline void TaskList::set_first_turn_info(::xsproto::globalpath::TurnInfo value) {
  
  first_turn_info_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.first_turn_info)
}

// double first_bus_station_distance = 21;
inline void TaskList::clear_first_bus_station_distance() {
  first_bus_station_distance_ = 0;
}
inline double TaskList::first_bus_station_distance() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.first_bus_station_distance)
  return first_bus_station_distance_;
}
inline void TaskList::set_first_bus_station_distance(double value) {
  
  first_bus_station_distance_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.first_bus_station_distance)
}

// double task_distance = 22;
inline void TaskList::clear_task_distance() {
  task_distance_ = 0;
}
inline double TaskList::task_distance() const {
  // @@protoc_insertion_point(field_get:xsproto.globalpath.TaskList.task_distance)
  return task_distance_;
}
inline void TaskList::set_task_distance(double value) {
  
  task_distance_ = value;
  // @@protoc_insertion_point(field_set:xsproto.globalpath.TaskList.task_distance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace globalpath
}  // namespace xsproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xsproto::globalpath::AvoidObstacleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::globalpath::AvoidObstacleType>() {
  return ::xsproto::globalpath::AvoidObstacleType_descriptor();
}
template <> struct is_proto_enum< ::xsproto::globalpath::TurnInfo> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::globalpath::TurnInfo>() {
  return ::xsproto::globalpath::TurnInfo_descriptor();
}
template <> struct is_proto_enum< ::xsproto::globalpath::FollowType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::globalpath::FollowType>() {
  return ::xsproto::globalpath::FollowType_descriptor();
}
template <> struct is_proto_enum< ::xsproto::globalpath::PointSource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::globalpath::PointSource>() {
  return ::xsproto::globalpath::PointSource_descriptor();
}
template <> struct is_proto_enum< ::xsproto::globalpath::AdditionProperty> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::globalpath::AdditionProperty>() {
  return ::xsproto::globalpath::AdditionProperty_descriptor();
}
template <> struct is_proto_enum< ::xsproto::globalpath::RoadType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::globalpath::RoadType>() {
  return ::xsproto::globalpath::RoadType_descriptor();
}
template <> struct is_proto_enum< ::xsproto::globalpath::StopLineType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::globalpath::StopLineType>() {
  return ::xsproto::globalpath::StopLineType_descriptor();
}
template <> struct is_proto_enum< ::xsproto::globalpath::RegionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::globalpath::RegionType>() {
  return ::xsproto::globalpath::RegionType_descriptor();
}
template <> struct is_proto_enum< ::xsproto::globalpath::Direction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::globalpath::Direction>() {
  return ::xsproto::globalpath::Direction_descriptor();
}
template <> struct is_proto_enum< ::xsproto::globalpath::Replan> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::globalpath::Replan>() {
  return ::xsproto::globalpath::Replan_descriptor();
}
template <> struct is_proto_enum< ::xsproto::globalpath::AvoidAllowBackType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::globalpath::AvoidAllowBackType>() {
  return ::xsproto::globalpath::AvoidAllowBackType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_globalpath_2ftask_5flist_2eproto__INCLUDED
