// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business/sync_list.proto

#ifndef PROTOBUF_business_2fsync_5flist_2eproto__INCLUDED
#define PROTOBUF_business_2fsync_5flist_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "business/sync_state.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_business_2fsync_5flist_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSyncListImpl();
void InitDefaultsSyncList();
void InitDefaultsSyncListResponseImpl();
void InitDefaultsSyncListResponse();
void InitDefaultsSyncItemImpl();
void InitDefaultsSyncItem();
inline void InitDefaults() {
  InitDefaultsSyncList();
  InitDefaultsSyncListResponse();
  InitDefaultsSyncItem();
}
}  // namespace protobuf_business_2fsync_5flist_2eproto
namespace xsproto {
namespace communication {
class SyncItem;
class SyncItemDefaultTypeInternal;
extern SyncItemDefaultTypeInternal _SyncItem_default_instance_;
class SyncList;
class SyncListDefaultTypeInternal;
extern SyncListDefaultTypeInternal _SyncList_default_instance_;
class SyncListResponse;
class SyncListResponseDefaultTypeInternal;
extern SyncListResponseDefaultTypeInternal _SyncListResponse_default_instance_;
}  // namespace communication
}  // namespace xsproto
namespace xsproto {
namespace communication {

enum SyncList_ControlType {
  SyncList_ControlType_MAP_LIST_BY_SITE = 0,
  SyncList_ControlType_SITE_LIST_BY_VECHICLE_CODE = 1,
  SyncList_ControlType_SUB_LAYER_LIST_BY_SITE = 2,
  SyncList_ControlType_SyncList_ControlType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SyncList_ControlType_SyncList_ControlType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SyncList_ControlType_IsValid(int value);
const SyncList_ControlType SyncList_ControlType_ControlType_MIN = SyncList_ControlType_MAP_LIST_BY_SITE;
const SyncList_ControlType SyncList_ControlType_ControlType_MAX = SyncList_ControlType_SUB_LAYER_LIST_BY_SITE;
const int SyncList_ControlType_ControlType_ARRAYSIZE = SyncList_ControlType_ControlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncList_ControlType_descriptor();
inline const ::std::string& SyncList_ControlType_Name(SyncList_ControlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncList_ControlType_descriptor(), value);
}
inline bool SyncList_ControlType_Parse(
    const ::std::string& name, SyncList_ControlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncList_ControlType>(
    SyncList_ControlType_descriptor(), name, value);
}
enum SyncListResponse_ControlType {
  SyncListResponse_ControlType_MAP_LIST_BY_SITE = 0,
  SyncListResponse_ControlType_SITE_LIST_BY_VECHICLE_CODE = 1,
  SyncListResponse_ControlType_SUB_LAYER_LIST_BY_SITE = 2,
  SyncListResponse_ControlType_SyncListResponse_ControlType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SyncListResponse_ControlType_SyncListResponse_ControlType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SyncListResponse_ControlType_IsValid(int value);
const SyncListResponse_ControlType SyncListResponse_ControlType_ControlType_MIN = SyncListResponse_ControlType_MAP_LIST_BY_SITE;
const SyncListResponse_ControlType SyncListResponse_ControlType_ControlType_MAX = SyncListResponse_ControlType_SUB_LAYER_LIST_BY_SITE;
const int SyncListResponse_ControlType_ControlType_ARRAYSIZE = SyncListResponse_ControlType_ControlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncListResponse_ControlType_descriptor();
inline const ::std::string& SyncListResponse_ControlType_Name(SyncListResponse_ControlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncListResponse_ControlType_descriptor(), value);
}
inline bool SyncListResponse_ControlType_Parse(
    const ::std::string& name, SyncListResponse_ControlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncListResponse_ControlType>(
    SyncListResponse_ControlType_descriptor(), name, value);
}
// ===================================================================

class SyncList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.SyncList) */ {
 public:
  SyncList();
  virtual ~SyncList();

  SyncList(const SyncList& from);

  inline SyncList& operator=(const SyncList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncList(SyncList&& from) noexcept
    : SyncList() {
    *this = ::std::move(from);
  }

  inline SyncList& operator=(SyncList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncList* internal_default_instance() {
    return reinterpret_cast<const SyncList*>(
               &_SyncList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SyncList* other);
  friend void swap(SyncList& a, SyncList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncList* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncList& from);
  void MergeFrom(const SyncList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SyncList_ControlType ControlType;
  static const ControlType MAP_LIST_BY_SITE =
    SyncList_ControlType_MAP_LIST_BY_SITE;
  static const ControlType SITE_LIST_BY_VECHICLE_CODE =
    SyncList_ControlType_SITE_LIST_BY_VECHICLE_CODE;
  static const ControlType SUB_LAYER_LIST_BY_SITE =
    SyncList_ControlType_SUB_LAYER_LIST_BY_SITE;
  static inline bool ControlType_IsValid(int value) {
    return SyncList_ControlType_IsValid(value);
  }
  static const ControlType ControlType_MIN =
    SyncList_ControlType_ControlType_MIN;
  static const ControlType ControlType_MAX =
    SyncList_ControlType_ControlType_MAX;
  static const int ControlType_ARRAYSIZE =
    SyncList_ControlType_ControlType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ControlType_descriptor() {
    return SyncList_ControlType_descriptor();
  }
  static inline const ::std::string& ControlType_Name(ControlType value) {
    return SyncList_ControlType_Name(value);
  }
  static inline bool ControlType_Parse(const ::std::string& name,
      ControlType* value) {
    return SyncList_ControlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string vehicle_code = 1;
  void clear_vehicle_code();
  static const int kVehicleCodeFieldNumber = 1;
  const ::std::string& vehicle_code() const;
  void set_vehicle_code(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicle_code(::std::string&& value);
  #endif
  void set_vehicle_code(const char* value);
  void set_vehicle_code(const char* value, size_t size);
  ::std::string* mutable_vehicle_code();
  ::std::string* release_vehicle_code();
  void set_allocated_vehicle_code(::std::string* vehicle_code);

  // string vehicle_name = 2;
  void clear_vehicle_name();
  static const int kVehicleNameFieldNumber = 2;
  const ::std::string& vehicle_name() const;
  void set_vehicle_name(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicle_name(::std::string&& value);
  #endif
  void set_vehicle_name(const char* value);
  void set_vehicle_name(const char* value, size_t size);
  ::std::string* mutable_vehicle_name();
  ::std::string* release_vehicle_name();
  void set_allocated_vehicle_name(::std::string* vehicle_name);

  // string site_name = 3;
  void clear_site_name();
  static const int kSiteNameFieldNumber = 3;
  const ::std::string& site_name() const;
  void set_site_name(const ::std::string& value);
  #if LANG_CXX11
  void set_site_name(::std::string&& value);
  #endif
  void set_site_name(const char* value);
  void set_site_name(const char* value, size_t size);
  ::std::string* mutable_site_name();
  ::std::string* release_site_name();
  void set_allocated_site_name(::std::string* site_name);

  // string map_name = 4;
  void clear_map_name();
  static const int kMapNameFieldNumber = 4;
  const ::std::string& map_name() const;
  void set_map_name(const ::std::string& value);
  #if LANG_CXX11
  void set_map_name(::std::string&& value);
  #endif
  void set_map_name(const char* value);
  void set_map_name(const char* value, size_t size);
  ::std::string* mutable_map_name();
  ::std::string* release_map_name();
  void set_allocated_map_name(::std::string* map_name);

  // .xsproto.communication.SyncList.ControlType control_type = 5;
  void clear_control_type();
  static const int kControlTypeFieldNumber = 5;
  ::xsproto::communication::SyncList_ControlType control_type() const;
  void set_control_type(::xsproto::communication::SyncList_ControlType value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.SyncList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vehicle_code_;
  ::google::protobuf::internal::ArenaStringPtr vehicle_name_;
  ::google::protobuf::internal::ArenaStringPtr site_name_;
  ::google::protobuf::internal::ArenaStringPtr map_name_;
  int control_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fsync_5flist_2eproto::TableStruct;
  friend void ::protobuf_business_2fsync_5flist_2eproto::InitDefaultsSyncListImpl();
};
// -------------------------------------------------------------------

class SyncListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.SyncListResponse) */ {
 public:
  SyncListResponse();
  virtual ~SyncListResponse();

  SyncListResponse(const SyncListResponse& from);

  inline SyncListResponse& operator=(const SyncListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncListResponse(SyncListResponse&& from) noexcept
    : SyncListResponse() {
    *this = ::std::move(from);
  }

  inline SyncListResponse& operator=(SyncListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncListResponse* internal_default_instance() {
    return reinterpret_cast<const SyncListResponse*>(
               &_SyncListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SyncListResponse* other);
  friend void swap(SyncListResponse& a, SyncListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncListResponse& from);
  void MergeFrom(const SyncListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SyncListResponse_ControlType ControlType;
  static const ControlType MAP_LIST_BY_SITE =
    SyncListResponse_ControlType_MAP_LIST_BY_SITE;
  static const ControlType SITE_LIST_BY_VECHICLE_CODE =
    SyncListResponse_ControlType_SITE_LIST_BY_VECHICLE_CODE;
  static const ControlType SUB_LAYER_LIST_BY_SITE =
    SyncListResponse_ControlType_SUB_LAYER_LIST_BY_SITE;
  static inline bool ControlType_IsValid(int value) {
    return SyncListResponse_ControlType_IsValid(value);
  }
  static const ControlType ControlType_MIN =
    SyncListResponse_ControlType_ControlType_MIN;
  static const ControlType ControlType_MAX =
    SyncListResponse_ControlType_ControlType_MAX;
  static const int ControlType_ARRAYSIZE =
    SyncListResponse_ControlType_ControlType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ControlType_descriptor() {
    return SyncListResponse_ControlType_descriptor();
  }
  static inline const ::std::string& ControlType_Name(ControlType value) {
    return SyncListResponse_ControlType_Name(value);
  }
  static inline bool ControlType_Parse(const ::std::string& name,
      ControlType* value) {
    return SyncListResponse_ControlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .xsproto.communication.SyncItem items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  const ::xsproto::communication::SyncItem& items(int index) const;
  ::xsproto::communication::SyncItem* mutable_items(int index);
  ::xsproto::communication::SyncItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::xsproto::communication::SyncItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::communication::SyncItem >&
      items() const;

  // .xsproto.communication.SyncState state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  const ::xsproto::communication::SyncState& state() const;
  ::xsproto::communication::SyncState* release_state();
  ::xsproto::communication::SyncState* mutable_state();
  void set_allocated_state(::xsproto::communication::SyncState* state);

  // .xsproto.communication.SyncListResponse.ControlType control_type = 3;
  void clear_control_type();
  static const int kControlTypeFieldNumber = 3;
  ::xsproto::communication::SyncListResponse_ControlType control_type() const;
  void set_control_type(::xsproto::communication::SyncListResponse_ControlType value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.SyncListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::communication::SyncItem > items_;
  ::xsproto::communication::SyncState* state_;
  int control_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fsync_5flist_2eproto::TableStruct;
  friend void ::protobuf_business_2fsync_5flist_2eproto::InitDefaultsSyncListResponseImpl();
};
// -------------------------------------------------------------------

class SyncItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.SyncItem) */ {
 public:
  SyncItem();
  virtual ~SyncItem();

  SyncItem(const SyncItem& from);

  inline SyncItem& operator=(const SyncItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncItem(SyncItem&& from) noexcept
    : SyncItem() {
    *this = ::std::move(from);
  }

  inline SyncItem& operator=(SyncItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncItem* internal_default_instance() {
    return reinterpret_cast<const SyncItem*>(
               &_SyncItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SyncItem* other);
  friend void swap(SyncItem& a, SyncItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncItem* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncItem& from);
  void MergeFrom(const SyncItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  ::google::protobuf::int32 zone() const;
  void set_zone(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.SyncItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 zone_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fsync_5flist_2eproto::TableStruct;
  friend void ::protobuf_business_2fsync_5flist_2eproto::InitDefaultsSyncItemImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncList

// string vehicle_code = 1;
inline void SyncList::clear_vehicle_code() {
  vehicle_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncList::vehicle_code() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SyncList.vehicle_code)
  return vehicle_code_.GetNoArena();
}
inline void SyncList::set_vehicle_code(const ::std::string& value) {
  
  vehicle_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.SyncList.vehicle_code)
}
#if LANG_CXX11
inline void SyncList::set_vehicle_code(::std::string&& value) {
  
  vehicle_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.SyncList.vehicle_code)
}
#endif
inline void SyncList::set_vehicle_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicle_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.SyncList.vehicle_code)
}
inline void SyncList::set_vehicle_code(const char* value, size_t size) {
  
  vehicle_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.SyncList.vehicle_code)
}
inline ::std::string* SyncList::mutable_vehicle_code() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.SyncList.vehicle_code)
  return vehicle_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncList::release_vehicle_code() {
  // @@protoc_insertion_point(field_release:xsproto.communication.SyncList.vehicle_code)
  
  return vehicle_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncList::set_allocated_vehicle_code(::std::string* vehicle_code) {
  if (vehicle_code != NULL) {
    
  } else {
    
  }
  vehicle_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicle_code);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.SyncList.vehicle_code)
}

// string vehicle_name = 2;
inline void SyncList::clear_vehicle_name() {
  vehicle_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncList::vehicle_name() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SyncList.vehicle_name)
  return vehicle_name_.GetNoArena();
}
inline void SyncList::set_vehicle_name(const ::std::string& value) {
  
  vehicle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.SyncList.vehicle_name)
}
#if LANG_CXX11
inline void SyncList::set_vehicle_name(::std::string&& value) {
  
  vehicle_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.SyncList.vehicle_name)
}
#endif
inline void SyncList::set_vehicle_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.SyncList.vehicle_name)
}
inline void SyncList::set_vehicle_name(const char* value, size_t size) {
  
  vehicle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.SyncList.vehicle_name)
}
inline ::std::string* SyncList::mutable_vehicle_name() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.SyncList.vehicle_name)
  return vehicle_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncList::release_vehicle_name() {
  // @@protoc_insertion_point(field_release:xsproto.communication.SyncList.vehicle_name)
  
  return vehicle_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncList::set_allocated_vehicle_name(::std::string* vehicle_name) {
  if (vehicle_name != NULL) {
    
  } else {
    
  }
  vehicle_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicle_name);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.SyncList.vehicle_name)
}

// string site_name = 3;
inline void SyncList::clear_site_name() {
  site_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncList::site_name() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SyncList.site_name)
  return site_name_.GetNoArena();
}
inline void SyncList::set_site_name(const ::std::string& value) {
  
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.SyncList.site_name)
}
#if LANG_CXX11
inline void SyncList::set_site_name(::std::string&& value) {
  
  site_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.SyncList.site_name)
}
#endif
inline void SyncList::set_site_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.SyncList.site_name)
}
inline void SyncList::set_site_name(const char* value, size_t size) {
  
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.SyncList.site_name)
}
inline ::std::string* SyncList::mutable_site_name() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.SyncList.site_name)
  return site_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncList::release_site_name() {
  // @@protoc_insertion_point(field_release:xsproto.communication.SyncList.site_name)
  
  return site_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncList::set_allocated_site_name(::std::string* site_name) {
  if (site_name != NULL) {
    
  } else {
    
  }
  site_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_name);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.SyncList.site_name)
}

// string map_name = 4;
inline void SyncList::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncList::map_name() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SyncList.map_name)
  return map_name_.GetNoArena();
}
inline void SyncList::set_map_name(const ::std::string& value) {
  
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.SyncList.map_name)
}
#if LANG_CXX11
inline void SyncList::set_map_name(::std::string&& value) {
  
  map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.SyncList.map_name)
}
#endif
inline void SyncList::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.SyncList.map_name)
}
inline void SyncList::set_map_name(const char* value, size_t size) {
  
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.SyncList.map_name)
}
inline ::std::string* SyncList::mutable_map_name() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.SyncList.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncList::release_map_name() {
  // @@protoc_insertion_point(field_release:xsproto.communication.SyncList.map_name)
  
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncList::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    
  } else {
    
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.SyncList.map_name)
}

// .xsproto.communication.SyncList.ControlType control_type = 5;
inline void SyncList::clear_control_type() {
  control_type_ = 0;
}
inline ::xsproto::communication::SyncList_ControlType SyncList::control_type() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SyncList.control_type)
  return static_cast< ::xsproto::communication::SyncList_ControlType >(control_type_);
}
inline void SyncList::set_control_type(::xsproto::communication::SyncList_ControlType value) {
  
  control_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.SyncList.control_type)
}

// -------------------------------------------------------------------

// SyncListResponse

// .xsproto.communication.SyncState state = 1;
inline bool SyncListResponse::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline const ::xsproto::communication::SyncState& SyncListResponse::state() const {
  const ::xsproto::communication::SyncState* p = state_;
  // @@protoc_insertion_point(field_get:xsproto.communication.SyncListResponse.state)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::communication::SyncState*>(
      &::xsproto::communication::_SyncState_default_instance_);
}
inline ::xsproto::communication::SyncState* SyncListResponse::release_state() {
  // @@protoc_insertion_point(field_release:xsproto.communication.SyncListResponse.state)
  
  ::xsproto::communication::SyncState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::xsproto::communication::SyncState* SyncListResponse::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::xsproto::communication::SyncState;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.SyncListResponse.state)
  return state_;
}
inline void SyncListResponse::set_allocated_state(::xsproto::communication::SyncState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_);
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.SyncListResponse.state)
}

// repeated .xsproto.communication.SyncItem items = 2;
inline int SyncListResponse::items_size() const {
  return items_.size();
}
inline void SyncListResponse::clear_items() {
  items_.Clear();
}
inline const ::xsproto::communication::SyncItem& SyncListResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SyncListResponse.items)
  return items_.Get(index);
}
inline ::xsproto::communication::SyncItem* SyncListResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.communication.SyncListResponse.items)
  return items_.Mutable(index);
}
inline ::xsproto::communication::SyncItem* SyncListResponse::add_items() {
  // @@protoc_insertion_point(field_add:xsproto.communication.SyncListResponse.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::communication::SyncItem >*
SyncListResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.communication.SyncListResponse.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::communication::SyncItem >&
SyncListResponse::items() const {
  // @@protoc_insertion_point(field_list:xsproto.communication.SyncListResponse.items)
  return items_;
}

// .xsproto.communication.SyncListResponse.ControlType control_type = 3;
inline void SyncListResponse::clear_control_type() {
  control_type_ = 0;
}
inline ::xsproto::communication::SyncListResponse_ControlType SyncListResponse::control_type() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SyncListResponse.control_type)
  return static_cast< ::xsproto::communication::SyncListResponse_ControlType >(control_type_);
}
inline void SyncListResponse::set_control_type(::xsproto::communication::SyncListResponse_ControlType value) {
  
  control_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.SyncListResponse.control_type)
}

// -------------------------------------------------------------------

// SyncItem

// string name = 1;
inline void SyncItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncItem::name() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SyncItem.name)
  return name_.GetNoArena();
}
inline void SyncItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.SyncItem.name)
}
#if LANG_CXX11
inline void SyncItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.SyncItem.name)
}
#endif
inline void SyncItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.SyncItem.name)
}
inline void SyncItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.SyncItem.name)
}
inline ::std::string* SyncItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.SyncItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncItem::release_name() {
  // @@protoc_insertion_point(field_release:xsproto.communication.SyncItem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.SyncItem.name)
}

// int32 zone = 2;
inline void SyncItem::clear_zone() {
  zone_ = 0;
}
inline ::google::protobuf::int32 SyncItem::zone() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SyncItem.zone)
  return zone_;
}
inline void SyncItem::set_zone(::google::protobuf::int32 value) {
  
  zone_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.SyncItem.zone)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication
}  // namespace xsproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xsproto::communication::SyncList_ControlType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::communication::SyncList_ControlType>() {
  return ::xsproto::communication::SyncList_ControlType_descriptor();
}
template <> struct is_proto_enum< ::xsproto::communication::SyncListResponse_ControlType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::communication::SyncListResponse_ControlType>() {
  return ::xsproto::communication::SyncListResponse_ControlType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_business_2fsync_5flist_2eproto__INCLUDED
