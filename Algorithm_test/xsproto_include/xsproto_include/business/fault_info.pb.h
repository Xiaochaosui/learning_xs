// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business/fault_info.proto

#ifndef PROTOBUF_business_2ffault_5finfo_2eproto__INCLUDED
#define PROTOBUF_business_2ffault_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_business_2ffault_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFaultInfoImpl();
void InitDefaultsFaultInfo();
void InitDefaultsVehicleFaultCodeInfoImpl();
void InitDefaultsVehicleFaultCodeInfo();
void InitDefaultsVehicleFaultCodeImpl();
void InitDefaultsVehicleFaultCode();
void InitDefaultsSelfCheckDetailInfoImpl();
void InitDefaultsSelfCheckDetailInfo();
inline void InitDefaults() {
  InitDefaultsFaultInfo();
  InitDefaultsVehicleFaultCodeInfo();
  InitDefaultsVehicleFaultCode();
  InitDefaultsSelfCheckDetailInfo();
}
}  // namespace protobuf_business_2ffault_5finfo_2eproto
namespace xsproto {
namespace communication {
class FaultInfo;
class FaultInfoDefaultTypeInternal;
extern FaultInfoDefaultTypeInternal _FaultInfo_default_instance_;
class SelfCheckDetailInfo;
class SelfCheckDetailInfoDefaultTypeInternal;
extern SelfCheckDetailInfoDefaultTypeInternal _SelfCheckDetailInfo_default_instance_;
class VehicleFaultCode;
class VehicleFaultCodeDefaultTypeInternal;
extern VehicleFaultCodeDefaultTypeInternal _VehicleFaultCode_default_instance_;
class VehicleFaultCodeInfo;
class VehicleFaultCodeInfoDefaultTypeInternal;
extern VehicleFaultCodeInfoDefaultTypeInternal _VehicleFaultCodeInfo_default_instance_;
}  // namespace communication
}  // namespace xsproto
namespace xsproto {
namespace communication {

enum VehicleFaultCodeInfo_FaultFlag {
  VehicleFaultCodeInfo_FaultFlag_FaultGen = 0,
  VehicleFaultCodeInfo_FaultFlag_FaultRelieve = 1,
  VehicleFaultCodeInfo_FaultFlag_VehicleFaultCodeInfo_FaultFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VehicleFaultCodeInfo_FaultFlag_VehicleFaultCodeInfo_FaultFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VehicleFaultCodeInfo_FaultFlag_IsValid(int value);
const VehicleFaultCodeInfo_FaultFlag VehicleFaultCodeInfo_FaultFlag_FaultFlag_MIN = VehicleFaultCodeInfo_FaultFlag_FaultGen;
const VehicleFaultCodeInfo_FaultFlag VehicleFaultCodeInfo_FaultFlag_FaultFlag_MAX = VehicleFaultCodeInfo_FaultFlag_FaultRelieve;
const int VehicleFaultCodeInfo_FaultFlag_FaultFlag_ARRAYSIZE = VehicleFaultCodeInfo_FaultFlag_FaultFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleFaultCodeInfo_FaultFlag_descriptor();
inline const ::std::string& VehicleFaultCodeInfo_FaultFlag_Name(VehicleFaultCodeInfo_FaultFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleFaultCodeInfo_FaultFlag_descriptor(), value);
}
inline bool VehicleFaultCodeInfo_FaultFlag_Parse(
    const ::std::string& name, VehicleFaultCodeInfo_FaultFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleFaultCodeInfo_FaultFlag>(
    VehicleFaultCodeInfo_FaultFlag_descriptor(), name, value);
}
enum SelfCheckStatus {
  NO_SELFCHECK_INFO = 0,
  SELFCHECK_SUCCESS = 1,
  SELFCHECH_FAILURE = 2,
  SelfCheckStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SelfCheckStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SelfCheckStatus_IsValid(int value);
const SelfCheckStatus SelfCheckStatus_MIN = NO_SELFCHECK_INFO;
const SelfCheckStatus SelfCheckStatus_MAX = SELFCHECH_FAILURE;
const int SelfCheckStatus_ARRAYSIZE = SelfCheckStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SelfCheckStatus_descriptor();
inline const ::std::string& SelfCheckStatus_Name(SelfCheckStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SelfCheckStatus_descriptor(), value);
}
inline bool SelfCheckStatus_Parse(
    const ::std::string& name, SelfCheckStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SelfCheckStatus>(
    SelfCheckStatus_descriptor(), name, value);
}
// ===================================================================

class FaultInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.FaultInfo) */ {
 public:
  FaultInfo();
  virtual ~FaultInfo();

  FaultInfo(const FaultInfo& from);

  inline FaultInfo& operator=(const FaultInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FaultInfo(FaultInfo&& from) noexcept
    : FaultInfo() {
    *this = ::std::move(from);
  }

  inline FaultInfo& operator=(FaultInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FaultInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaultInfo* internal_default_instance() {
    return reinterpret_cast<const FaultInfo*>(
               &_FaultInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FaultInfo* other);
  friend void swap(FaultInfo& a, FaultInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaultInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FaultInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FaultInfo& from);
  void MergeFrom(const FaultInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FaultInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xsproto.communication.VehicleFaultCodeInfo vehicle_fault_code_infos = 2;
  int vehicle_fault_code_infos_size() const;
  void clear_vehicle_fault_code_infos();
  static const int kVehicleFaultCodeInfosFieldNumber = 2;
  const ::xsproto::communication::VehicleFaultCodeInfo& vehicle_fault_code_infos(int index) const;
  ::xsproto::communication::VehicleFaultCodeInfo* mutable_vehicle_fault_code_infos(int index);
  ::xsproto::communication::VehicleFaultCodeInfo* add_vehicle_fault_code_infos();
  ::google::protobuf::RepeatedPtrField< ::xsproto::communication::VehicleFaultCodeInfo >*
      mutable_vehicle_fault_code_infos();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::communication::VehicleFaultCodeInfo >&
      vehicle_fault_code_infos() const;

  // repeated .xsproto.communication.SelfCheckDetailInfo detail_infos = 4;
  int detail_infos_size() const;
  void clear_detail_infos();
  static const int kDetailInfosFieldNumber = 4;
  const ::xsproto::communication::SelfCheckDetailInfo& detail_infos(int index) const;
  ::xsproto::communication::SelfCheckDetailInfo* mutable_detail_infos(int index);
  ::xsproto::communication::SelfCheckDetailInfo* add_detail_infos();
  ::google::protobuf::RepeatedPtrField< ::xsproto::communication::SelfCheckDetailInfo >*
      mutable_detail_infos();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::communication::SelfCheckDetailInfo >&
      detail_infos() const;

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // .xsproto.communication.SelfCheckStatus Status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::xsproto::communication::SelfCheckStatus status() const;
  void set_status(::xsproto::communication::SelfCheckStatus value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.FaultInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::communication::VehicleFaultCodeInfo > vehicle_fault_code_infos_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::communication::SelfCheckDetailInfo > detail_infos_;
  ::xsproto::base::Header* header_;
  int status_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2ffault_5finfo_2eproto::TableStruct;
  friend void ::protobuf_business_2ffault_5finfo_2eproto::InitDefaultsFaultInfoImpl();
};
// -------------------------------------------------------------------

class VehicleFaultCodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.VehicleFaultCodeInfo) */ {
 public:
  VehicleFaultCodeInfo();
  virtual ~VehicleFaultCodeInfo();

  VehicleFaultCodeInfo(const VehicleFaultCodeInfo& from);

  inline VehicleFaultCodeInfo& operator=(const VehicleFaultCodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleFaultCodeInfo(VehicleFaultCodeInfo&& from) noexcept
    : VehicleFaultCodeInfo() {
    *this = ::std::move(from);
  }

  inline VehicleFaultCodeInfo& operator=(VehicleFaultCodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleFaultCodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleFaultCodeInfo* internal_default_instance() {
    return reinterpret_cast<const VehicleFaultCodeInfo*>(
               &_VehicleFaultCodeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VehicleFaultCodeInfo* other);
  friend void swap(VehicleFaultCodeInfo& a, VehicleFaultCodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleFaultCodeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  VehicleFaultCodeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VehicleFaultCodeInfo& from);
  void MergeFrom(const VehicleFaultCodeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VehicleFaultCodeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VehicleFaultCodeInfo_FaultFlag FaultFlag;
  static const FaultFlag FaultGen =
    VehicleFaultCodeInfo_FaultFlag_FaultGen;
  static const FaultFlag FaultRelieve =
    VehicleFaultCodeInfo_FaultFlag_FaultRelieve;
  static inline bool FaultFlag_IsValid(int value) {
    return VehicleFaultCodeInfo_FaultFlag_IsValid(value);
  }
  static const FaultFlag FaultFlag_MIN =
    VehicleFaultCodeInfo_FaultFlag_FaultFlag_MIN;
  static const FaultFlag FaultFlag_MAX =
    VehicleFaultCodeInfo_FaultFlag_FaultFlag_MAX;
  static const int FaultFlag_ARRAYSIZE =
    VehicleFaultCodeInfo_FaultFlag_FaultFlag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FaultFlag_descriptor() {
    return VehicleFaultCodeInfo_FaultFlag_descriptor();
  }
  static inline const ::std::string& FaultFlag_Name(FaultFlag value) {
    return VehicleFaultCodeInfo_FaultFlag_Name(value);
  }
  static inline bool FaultFlag_Parse(const ::std::string& name,
      FaultFlag* value) {
    return VehicleFaultCodeInfo_FaultFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string message = 4;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .xsproto.communication.VehicleFaultCode vehicle_fault_code = 2;
  bool has_vehicle_fault_code() const;
  void clear_vehicle_fault_code();
  static const int kVehicleFaultCodeFieldNumber = 2;
  const ::xsproto::communication::VehicleFaultCode& vehicle_fault_code() const;
  ::xsproto::communication::VehicleFaultCode* release_vehicle_fault_code();
  ::xsproto::communication::VehicleFaultCode* mutable_vehicle_fault_code();
  void set_allocated_vehicle_fault_code(::xsproto::communication::VehicleFaultCode* vehicle_fault_code);

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // .xsproto.communication.VehicleFaultCodeInfo.FaultFlag fault_flag = 3;
  void clear_fault_flag();
  static const int kFaultFlagFieldNumber = 3;
  ::xsproto::communication::VehicleFaultCodeInfo_FaultFlag fault_flag() const;
  void set_fault_flag(::xsproto::communication::VehicleFaultCodeInfo_FaultFlag value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.VehicleFaultCodeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::xsproto::communication::VehicleFaultCode* vehicle_fault_code_;
  ::google::protobuf::int64 timestamp_;
  int fault_flag_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2ffault_5finfo_2eproto::TableStruct;
  friend void ::protobuf_business_2ffault_5finfo_2eproto::InitDefaultsVehicleFaultCodeInfoImpl();
};
// -------------------------------------------------------------------

class VehicleFaultCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.VehicleFaultCode) */ {
 public:
  VehicleFaultCode();
  virtual ~VehicleFaultCode();

  VehicleFaultCode(const VehicleFaultCode& from);

  inline VehicleFaultCode& operator=(const VehicleFaultCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleFaultCode(VehicleFaultCode&& from) noexcept
    : VehicleFaultCode() {
    *this = ::std::move(from);
  }

  inline VehicleFaultCode& operator=(VehicleFaultCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleFaultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleFaultCode* internal_default_instance() {
    return reinterpret_cast<const VehicleFaultCode*>(
               &_VehicleFaultCode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(VehicleFaultCode* other);
  friend void swap(VehicleFaultCode& a, VehicleFaultCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleFaultCode* New() const PROTOBUF_FINAL { return New(NULL); }

  VehicleFaultCode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VehicleFaultCode& from);
  void MergeFrom(const VehicleFaultCode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VehicleFaultCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 module_id = 1;
  void clear_module_id();
  static const int kModuleIdFieldNumber = 1;
  ::google::protobuf::uint32 module_id() const;
  void set_module_id(::google::protobuf::uint32 value);

  // uint32 sub_id = 2;
  void clear_sub_id();
  static const int kSubIdFieldNumber = 2;
  ::google::protobuf::uint32 sub_id() const;
  void set_sub_id(::google::protobuf::uint32 value);

  // uint32 fault_class = 3;
  void clear_fault_class();
  static const int kFaultClassFieldNumber = 3;
  ::google::protobuf::uint32 fault_class() const;
  void set_fault_class(::google::protobuf::uint32 value);

  // uint32 code = 4;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  ::google::protobuf::uint32 code() const;
  void set_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.VehicleFaultCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 module_id_;
  ::google::protobuf::uint32 sub_id_;
  ::google::protobuf::uint32 fault_class_;
  ::google::protobuf::uint32 code_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2ffault_5finfo_2eproto::TableStruct;
  friend void ::protobuf_business_2ffault_5finfo_2eproto::InitDefaultsVehicleFaultCodeImpl();
};
// -------------------------------------------------------------------

class SelfCheckDetailInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.SelfCheckDetailInfo) */ {
 public:
  SelfCheckDetailInfo();
  virtual ~SelfCheckDetailInfo();

  SelfCheckDetailInfo(const SelfCheckDetailInfo& from);

  inline SelfCheckDetailInfo& operator=(const SelfCheckDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelfCheckDetailInfo(SelfCheckDetailInfo&& from) noexcept
    : SelfCheckDetailInfo() {
    *this = ::std::move(from);
  }

  inline SelfCheckDetailInfo& operator=(SelfCheckDetailInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelfCheckDetailInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelfCheckDetailInfo* internal_default_instance() {
    return reinterpret_cast<const SelfCheckDetailInfo*>(
               &_SelfCheckDetailInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SelfCheckDetailInfo* other);
  friend void swap(SelfCheckDetailInfo& a, SelfCheckDetailInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelfCheckDetailInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SelfCheckDetailInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelfCheckDetailInfo& from);
  void MergeFrom(const SelfCheckDetailInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelfCheckDetailInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 module_type = 1;
  void clear_module_type();
  static const int kModuleTypeFieldNumber = 1;
  ::google::protobuf::int32 module_type() const;
  void set_module_type(::google::protobuf::int32 value);

  // int32 module_id = 2;
  void clear_module_id();
  static const int kModuleIdFieldNumber = 2;
  ::google::protobuf::int32 module_id() const;
  void set_module_id(::google::protobuf::int32 value);

  // int32 module_sub_id = 3;
  void clear_module_sub_id();
  static const int kModuleSubIdFieldNumber = 3;
  ::google::protobuf::int32 module_sub_id() const;
  void set_module_sub_id(::google::protobuf::int32 value);

  // .xsproto.communication.SelfCheckStatus check_status = 4;
  void clear_check_status();
  static const int kCheckStatusFieldNumber = 4;
  ::xsproto::communication::SelfCheckStatus check_status() const;
  void set_check_status(::xsproto::communication::SelfCheckStatus value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.SelfCheckDetailInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 module_type_;
  ::google::protobuf::int32 module_id_;
  ::google::protobuf::int32 module_sub_id_;
  int check_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2ffault_5finfo_2eproto::TableStruct;
  friend void ::protobuf_business_2ffault_5finfo_2eproto::InitDefaultsSelfCheckDetailInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FaultInfo

// .xsproto.base.Header header = 1;
inline bool FaultInfo::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& FaultInfo::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.communication.FaultInfo.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* FaultInfo::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.communication.FaultInfo.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* FaultInfo::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.FaultInfo.header)
  return header_;
}
inline void FaultInfo::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.FaultInfo.header)
}

// repeated .xsproto.communication.VehicleFaultCodeInfo vehicle_fault_code_infos = 2;
inline int FaultInfo::vehicle_fault_code_infos_size() const {
  return vehicle_fault_code_infos_.size();
}
inline void FaultInfo::clear_vehicle_fault_code_infos() {
  vehicle_fault_code_infos_.Clear();
}
inline const ::xsproto::communication::VehicleFaultCodeInfo& FaultInfo::vehicle_fault_code_infos(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.communication.FaultInfo.vehicle_fault_code_infos)
  return vehicle_fault_code_infos_.Get(index);
}
inline ::xsproto::communication::VehicleFaultCodeInfo* FaultInfo::mutable_vehicle_fault_code_infos(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.communication.FaultInfo.vehicle_fault_code_infos)
  return vehicle_fault_code_infos_.Mutable(index);
}
inline ::xsproto::communication::VehicleFaultCodeInfo* FaultInfo::add_vehicle_fault_code_infos() {
  // @@protoc_insertion_point(field_add:xsproto.communication.FaultInfo.vehicle_fault_code_infos)
  return vehicle_fault_code_infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::communication::VehicleFaultCodeInfo >*
FaultInfo::mutable_vehicle_fault_code_infos() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.communication.FaultInfo.vehicle_fault_code_infos)
  return &vehicle_fault_code_infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::communication::VehicleFaultCodeInfo >&
FaultInfo::vehicle_fault_code_infos() const {
  // @@protoc_insertion_point(field_list:xsproto.communication.FaultInfo.vehicle_fault_code_infos)
  return vehicle_fault_code_infos_;
}

// .xsproto.communication.SelfCheckStatus Status = 3;
inline void FaultInfo::clear_status() {
  status_ = 0;
}
inline ::xsproto::communication::SelfCheckStatus FaultInfo::status() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.FaultInfo.Status)
  return static_cast< ::xsproto::communication::SelfCheckStatus >(status_);
}
inline void FaultInfo::set_status(::xsproto::communication::SelfCheckStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.FaultInfo.Status)
}

// repeated .xsproto.communication.SelfCheckDetailInfo detail_infos = 4;
inline int FaultInfo::detail_infos_size() const {
  return detail_infos_.size();
}
inline void FaultInfo::clear_detail_infos() {
  detail_infos_.Clear();
}
inline const ::xsproto::communication::SelfCheckDetailInfo& FaultInfo::detail_infos(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.communication.FaultInfo.detail_infos)
  return detail_infos_.Get(index);
}
inline ::xsproto::communication::SelfCheckDetailInfo* FaultInfo::mutable_detail_infos(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.communication.FaultInfo.detail_infos)
  return detail_infos_.Mutable(index);
}
inline ::xsproto::communication::SelfCheckDetailInfo* FaultInfo::add_detail_infos() {
  // @@protoc_insertion_point(field_add:xsproto.communication.FaultInfo.detail_infos)
  return detail_infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::communication::SelfCheckDetailInfo >*
FaultInfo::mutable_detail_infos() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.communication.FaultInfo.detail_infos)
  return &detail_infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::communication::SelfCheckDetailInfo >&
FaultInfo::detail_infos() const {
  // @@protoc_insertion_point(field_list:xsproto.communication.FaultInfo.detail_infos)
  return detail_infos_;
}

// -------------------------------------------------------------------

// VehicleFaultCodeInfo

// int64 timestamp = 1;
inline void VehicleFaultCodeInfo::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VehicleFaultCodeInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.VehicleFaultCodeInfo.timestamp)
  return timestamp_;
}
inline void VehicleFaultCodeInfo::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.VehicleFaultCodeInfo.timestamp)
}

// .xsproto.communication.VehicleFaultCode vehicle_fault_code = 2;
inline bool VehicleFaultCodeInfo::has_vehicle_fault_code() const {
  return this != internal_default_instance() && vehicle_fault_code_ != NULL;
}
inline void VehicleFaultCodeInfo::clear_vehicle_fault_code() {
  if (GetArenaNoVirtual() == NULL && vehicle_fault_code_ != NULL) {
    delete vehicle_fault_code_;
  }
  vehicle_fault_code_ = NULL;
}
inline const ::xsproto::communication::VehicleFaultCode& VehicleFaultCodeInfo::vehicle_fault_code() const {
  const ::xsproto::communication::VehicleFaultCode* p = vehicle_fault_code_;
  // @@protoc_insertion_point(field_get:xsproto.communication.VehicleFaultCodeInfo.vehicle_fault_code)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::communication::VehicleFaultCode*>(
      &::xsproto::communication::_VehicleFaultCode_default_instance_);
}
inline ::xsproto::communication::VehicleFaultCode* VehicleFaultCodeInfo::release_vehicle_fault_code() {
  // @@protoc_insertion_point(field_release:xsproto.communication.VehicleFaultCodeInfo.vehicle_fault_code)
  
  ::xsproto::communication::VehicleFaultCode* temp = vehicle_fault_code_;
  vehicle_fault_code_ = NULL;
  return temp;
}
inline ::xsproto::communication::VehicleFaultCode* VehicleFaultCodeInfo::mutable_vehicle_fault_code() {
  
  if (vehicle_fault_code_ == NULL) {
    vehicle_fault_code_ = new ::xsproto::communication::VehicleFaultCode;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.VehicleFaultCodeInfo.vehicle_fault_code)
  return vehicle_fault_code_;
}
inline void VehicleFaultCodeInfo::set_allocated_vehicle_fault_code(::xsproto::communication::VehicleFaultCode* vehicle_fault_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vehicle_fault_code_;
  }
  if (vehicle_fault_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vehicle_fault_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vehicle_fault_code, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_fault_code_ = vehicle_fault_code;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.VehicleFaultCodeInfo.vehicle_fault_code)
}

// .xsproto.communication.VehicleFaultCodeInfo.FaultFlag fault_flag = 3;
inline void VehicleFaultCodeInfo::clear_fault_flag() {
  fault_flag_ = 0;
}
inline ::xsproto::communication::VehicleFaultCodeInfo_FaultFlag VehicleFaultCodeInfo::fault_flag() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.VehicleFaultCodeInfo.fault_flag)
  return static_cast< ::xsproto::communication::VehicleFaultCodeInfo_FaultFlag >(fault_flag_);
}
inline void VehicleFaultCodeInfo::set_fault_flag(::xsproto::communication::VehicleFaultCodeInfo_FaultFlag value) {
  
  fault_flag_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.VehicleFaultCodeInfo.fault_flag)
}

// string message = 4;
inline void VehicleFaultCodeInfo::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleFaultCodeInfo::message() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.VehicleFaultCodeInfo.message)
  return message_.GetNoArena();
}
inline void VehicleFaultCodeInfo::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.VehicleFaultCodeInfo.message)
}
#if LANG_CXX11
inline void VehicleFaultCodeInfo::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.VehicleFaultCodeInfo.message)
}
#endif
inline void VehicleFaultCodeInfo::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.VehicleFaultCodeInfo.message)
}
inline void VehicleFaultCodeInfo::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.VehicleFaultCodeInfo.message)
}
inline ::std::string* VehicleFaultCodeInfo::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.VehicleFaultCodeInfo.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleFaultCodeInfo::release_message() {
  // @@protoc_insertion_point(field_release:xsproto.communication.VehicleFaultCodeInfo.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleFaultCodeInfo::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.VehicleFaultCodeInfo.message)
}

// -------------------------------------------------------------------

// VehicleFaultCode

// uint32 module_id = 1;
inline void VehicleFaultCode::clear_module_id() {
  module_id_ = 0u;
}
inline ::google::protobuf::uint32 VehicleFaultCode::module_id() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.VehicleFaultCode.module_id)
  return module_id_;
}
inline void VehicleFaultCode::set_module_id(::google::protobuf::uint32 value) {
  
  module_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.VehicleFaultCode.module_id)
}

// uint32 sub_id = 2;
inline void VehicleFaultCode::clear_sub_id() {
  sub_id_ = 0u;
}
inline ::google::protobuf::uint32 VehicleFaultCode::sub_id() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.VehicleFaultCode.sub_id)
  return sub_id_;
}
inline void VehicleFaultCode::set_sub_id(::google::protobuf::uint32 value) {
  
  sub_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.VehicleFaultCode.sub_id)
}

// uint32 fault_class = 3;
inline void VehicleFaultCode::clear_fault_class() {
  fault_class_ = 0u;
}
inline ::google::protobuf::uint32 VehicleFaultCode::fault_class() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.VehicleFaultCode.fault_class)
  return fault_class_;
}
inline void VehicleFaultCode::set_fault_class(::google::protobuf::uint32 value) {
  
  fault_class_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.VehicleFaultCode.fault_class)
}

// uint32 code = 4;
inline void VehicleFaultCode::clear_code() {
  code_ = 0u;
}
inline ::google::protobuf::uint32 VehicleFaultCode::code() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.VehicleFaultCode.code)
  return code_;
}
inline void VehicleFaultCode::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.VehicleFaultCode.code)
}

// -------------------------------------------------------------------

// SelfCheckDetailInfo

// int32 module_type = 1;
inline void SelfCheckDetailInfo::clear_module_type() {
  module_type_ = 0;
}
inline ::google::protobuf::int32 SelfCheckDetailInfo::module_type() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SelfCheckDetailInfo.module_type)
  return module_type_;
}
inline void SelfCheckDetailInfo::set_module_type(::google::protobuf::int32 value) {
  
  module_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.SelfCheckDetailInfo.module_type)
}

// int32 module_id = 2;
inline void SelfCheckDetailInfo::clear_module_id() {
  module_id_ = 0;
}
inline ::google::protobuf::int32 SelfCheckDetailInfo::module_id() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SelfCheckDetailInfo.module_id)
  return module_id_;
}
inline void SelfCheckDetailInfo::set_module_id(::google::protobuf::int32 value) {
  
  module_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.SelfCheckDetailInfo.module_id)
}

// int32 module_sub_id = 3;
inline void SelfCheckDetailInfo::clear_module_sub_id() {
  module_sub_id_ = 0;
}
inline ::google::protobuf::int32 SelfCheckDetailInfo::module_sub_id() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SelfCheckDetailInfo.module_sub_id)
  return module_sub_id_;
}
inline void SelfCheckDetailInfo::set_module_sub_id(::google::protobuf::int32 value) {
  
  module_sub_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.SelfCheckDetailInfo.module_sub_id)
}

// .xsproto.communication.SelfCheckStatus check_status = 4;
inline void SelfCheckDetailInfo::clear_check_status() {
  check_status_ = 0;
}
inline ::xsproto::communication::SelfCheckStatus SelfCheckDetailInfo::check_status() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.SelfCheckDetailInfo.check_status)
  return static_cast< ::xsproto::communication::SelfCheckStatus >(check_status_);
}
inline void SelfCheckDetailInfo::set_check_status(::xsproto::communication::SelfCheckStatus value) {
  
  check_status_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.SelfCheckDetailInfo.check_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication
}  // namespace xsproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xsproto::communication::VehicleFaultCodeInfo_FaultFlag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::communication::VehicleFaultCodeInfo_FaultFlag>() {
  return ::xsproto::communication::VehicleFaultCodeInfo_FaultFlag_descriptor();
}
template <> struct is_proto_enum< ::xsproto::communication::SelfCheckStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::communication::SelfCheckStatus>() {
  return ::xsproto::communication::SelfCheckStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_business_2ffault_5finfo_2eproto__INCLUDED
