// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business/mapper_response.proto

#ifndef PROTOBUF_business_2fmapper_5fresponse_2eproto__INCLUDED
#define PROTOBUF_business_2fmapper_5fresponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_business_2fmapper_5fresponse_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMapperResponseImpl();
void InitDefaultsMapperResponse();
void InitDefaultsMapperStatusImpl();
void InitDefaultsMapperStatus();
void InitDefaultsMapperTileImpl();
void InitDefaultsMapperTile();
void InitDefaultsMapperResultImpl();
void InitDefaultsMapperResult();
void InitDefaultsMapperRangeDataImpl();
void InitDefaultsMapperRangeData();
inline void InitDefaults() {
  InitDefaultsMapperResponse();
  InitDefaultsMapperStatus();
  InitDefaultsMapperTile();
  InitDefaultsMapperResult();
  InitDefaultsMapperRangeData();
}
}  // namespace protobuf_business_2fmapper_5fresponse_2eproto
namespace xsproto {
namespace communication {
class MapperRangeData;
class MapperRangeDataDefaultTypeInternal;
extern MapperRangeDataDefaultTypeInternal _MapperRangeData_default_instance_;
class MapperResponse;
class MapperResponseDefaultTypeInternal;
extern MapperResponseDefaultTypeInternal _MapperResponse_default_instance_;
class MapperResult;
class MapperResultDefaultTypeInternal;
extern MapperResultDefaultTypeInternal _MapperResult_default_instance_;
class MapperStatus;
class MapperStatusDefaultTypeInternal;
extern MapperStatusDefaultTypeInternal _MapperStatus_default_instance_;
class MapperTile;
class MapperTileDefaultTypeInternal;
extern MapperTileDefaultTypeInternal _MapperTile_default_instance_;
}  // namespace communication
}  // namespace xsproto
namespace xsproto {
namespace communication {

// ===================================================================

class MapperResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.MapperResponse) */ {
 public:
  MapperResponse();
  virtual ~MapperResponse();

  MapperResponse(const MapperResponse& from);

  inline MapperResponse& operator=(const MapperResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapperResponse(MapperResponse&& from) noexcept
    : MapperResponse() {
    *this = ::std::move(from);
  }

  inline MapperResponse& operator=(MapperResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapperResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapperResponse* internal_default_instance() {
    return reinterpret_cast<const MapperResponse*>(
               &_MapperResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MapperResponse* other);
  friend void swap(MapperResponse& a, MapperResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapperResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MapperResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapperResponse& from);
  void MergeFrom(const MapperResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapperResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // .google.protobuf.Any msg_content = 5;
  bool has_msg_content() const;
  void clear_msg_content();
  static const int kMsgContentFieldNumber = 5;
  const ::google::protobuf::Any& msg_content() const;
  ::google::protobuf::Any* release_msg_content();
  ::google::protobuf::Any* mutable_msg_content();
  void set_allocated_msg_content(::google::protobuf::Any* msg_content);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int32 seq_num = 3;
  void clear_seq_num();
  static const int kSeqNumFieldNumber = 3;
  ::google::protobuf::int32 seq_num() const;
  void set_seq_num(::google::protobuf::int32 value);

  // int32 msg_code = 4;
  void clear_msg_code();
  static const int kMsgCodeFieldNumber = 4;
  ::google::protobuf::int32 msg_code() const;
  void set_msg_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.MapperResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::xsproto::base::Header* header_;
  ::google::protobuf::Any* msg_content_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 seq_num_;
  ::google::protobuf::int32 msg_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fmapper_5fresponse_2eproto::TableStruct;
  friend void ::protobuf_business_2fmapper_5fresponse_2eproto::InitDefaultsMapperResponseImpl();
};
// -------------------------------------------------------------------

class MapperStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.MapperStatus) */ {
 public:
  MapperStatus();
  virtual ~MapperStatus();

  MapperStatus(const MapperStatus& from);

  inline MapperStatus& operator=(const MapperStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapperStatus(MapperStatus&& from) noexcept
    : MapperStatus() {
    *this = ::std::move(from);
  }

  inline MapperStatus& operator=(MapperStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapperStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapperStatus* internal_default_instance() {
    return reinterpret_cast<const MapperStatus*>(
               &_MapperStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MapperStatus* other);
  friend void swap(MapperStatus& a, MapperStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapperStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  MapperStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapperStatus& from);
  void MergeFrom(const MapperStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapperStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status_msg = 3;
  void clear_status_msg();
  static const int kStatusMsgFieldNumber = 3;
  const ::std::string& status_msg() const;
  void set_status_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_status_msg(::std::string&& value);
  #endif
  void set_status_msg(const char* value);
  void set_status_msg(const char* value, size_t size);
  ::std::string* mutable_status_msg();
  ::std::string* release_status_msg();
  void set_allocated_status_msg(::std::string* status_msg);

  // int32 task = 1;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  ::google::protobuf::int32 task() const;
  void set_task(::google::protobuf::int32 value);

  // int32 status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // int32 progress = 4;
  void clear_progress();
  static const int kProgressFieldNumber = 4;
  ::google::protobuf::int32 progress() const;
  void set_progress(::google::protobuf::int32 value);

  // int32 env = 5;
  void clear_env();
  static const int kEnvFieldNumber = 5;
  ::google::protobuf::int32 env() const;
  void set_env(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.MapperStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr status_msg_;
  ::google::protobuf::int32 task_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 progress_;
  ::google::protobuf::int32 env_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fmapper_5fresponse_2eproto::TableStruct;
  friend void ::protobuf_business_2fmapper_5fresponse_2eproto::InitDefaultsMapperStatusImpl();
};
// -------------------------------------------------------------------

class MapperTile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.MapperTile) */ {
 public:
  MapperTile();
  virtual ~MapperTile();

  MapperTile(const MapperTile& from);

  inline MapperTile& operator=(const MapperTile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapperTile(MapperTile&& from) noexcept
    : MapperTile() {
    *this = ::std::move(from);
  }

  inline MapperTile& operator=(MapperTile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapperTile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapperTile* internal_default_instance() {
    return reinterpret_cast<const MapperTile*>(
               &_MapperTile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MapperTile* other);
  friend void swap(MapperTile& a, MapperTile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapperTile* New() const PROTOBUF_FINAL { return New(NULL); }

  MapperTile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapperTile& from);
  void MergeFrom(const MapperTile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapperTile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes map_2D_image = 4;
  void clear_map_2d_image();
  static const int kMap2DImageFieldNumber = 4;
  const ::std::string& map_2d_image() const;
  void set_map_2d_image(const ::std::string& value);
  #if LANG_CXX11
  void set_map_2d_image(::std::string&& value);
  #endif
  void set_map_2d_image(const char* value);
  void set_map_2d_image(const void* value, size_t size);
  ::std::string* mutable_map_2d_image();
  ::std::string* release_map_2d_image();
  void set_allocated_map_2d_image(::std::string* map_2d_image);

  // .xsproto.communication.MapperRangeData range_info = 5;
  bool has_range_info() const;
  void clear_range_info();
  static const int kRangeInfoFieldNumber = 5;
  const ::xsproto::communication::MapperRangeData& range_info() const;
  ::xsproto::communication::MapperRangeData* release_range_info();
  ::xsproto::communication::MapperRangeData* mutable_range_info();
  void set_allocated_range_info(::xsproto::communication::MapperRangeData* range_info);

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double yaw = 3;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  double yaw() const;
  void set_yaw(double value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.MapperTile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr map_2d_image_;
  ::xsproto::communication::MapperRangeData* range_info_;
  double x_;
  double y_;
  double yaw_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fmapper_5fresponse_2eproto::TableStruct;
  friend void ::protobuf_business_2fmapper_5fresponse_2eproto::InitDefaultsMapperTileImpl();
};
// -------------------------------------------------------------------

class MapperResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.MapperResult) */ {
 public:
  MapperResult();
  virtual ~MapperResult();

  MapperResult(const MapperResult& from);

  inline MapperResult& operator=(const MapperResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapperResult(MapperResult&& from) noexcept
    : MapperResult() {
    *this = ::std::move(from);
  }

  inline MapperResult& operator=(MapperResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapperResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapperResult* internal_default_instance() {
    return reinterpret_cast<const MapperResult*>(
               &_MapperResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(MapperResult* other);
  friend void swap(MapperResult& a, MapperResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapperResult* New() const PROTOBUF_FINAL { return New(NULL); }

  MapperResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapperResult& from);
  void MergeFrom(const MapperResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapperResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string result_path = 1;
  void clear_result_path();
  static const int kResultPathFieldNumber = 1;
  const ::std::string& result_path() const;
  void set_result_path(const ::std::string& value);
  #if LANG_CXX11
  void set_result_path(::std::string&& value);
  #endif
  void set_result_path(const char* value);
  void set_result_path(const char* value, size_t size);
  ::std::string* mutable_result_path();
  ::std::string* release_result_path();
  void set_allocated_result_path(::std::string* result_path);

  // string pcd_path = 2;
  void clear_pcd_path();
  static const int kPcdPathFieldNumber = 2;
  const ::std::string& pcd_path() const;
  void set_pcd_path(const ::std::string& value);
  #if LANG_CXX11
  void set_pcd_path(::std::string&& value);
  #endif
  void set_pcd_path(const char* value);
  void set_pcd_path(const char* value, size_t size);
  ::std::string* mutable_pcd_path();
  ::std::string* release_pcd_path();
  void set_allocated_pcd_path(::std::string* pcd_path);

  // .xsproto.communication.MapperRangeData range_info = 3;
  bool has_range_info() const;
  void clear_range_info();
  static const int kRangeInfoFieldNumber = 3;
  const ::xsproto::communication::MapperRangeData& range_info() const;
  ::xsproto::communication::MapperRangeData* release_range_info();
  ::xsproto::communication::MapperRangeData* mutable_range_info();
  void set_allocated_range_info(::xsproto::communication::MapperRangeData* range_info);

  // @@protoc_insertion_point(class_scope:xsproto.communication.MapperResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr result_path_;
  ::google::protobuf::internal::ArenaStringPtr pcd_path_;
  ::xsproto::communication::MapperRangeData* range_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fmapper_5fresponse_2eproto::TableStruct;
  friend void ::protobuf_business_2fmapper_5fresponse_2eproto::InitDefaultsMapperResultImpl();
};
// -------------------------------------------------------------------

class MapperRangeData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.MapperRangeData) */ {
 public:
  MapperRangeData();
  virtual ~MapperRangeData();

  MapperRangeData(const MapperRangeData& from);

  inline MapperRangeData& operator=(const MapperRangeData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapperRangeData(MapperRangeData&& from) noexcept
    : MapperRangeData() {
    *this = ::std::move(from);
  }

  inline MapperRangeData& operator=(MapperRangeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapperRangeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapperRangeData* internal_default_instance() {
    return reinterpret_cast<const MapperRangeData*>(
               &_MapperRangeData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(MapperRangeData* other);
  friend void swap(MapperRangeData& a, MapperRangeData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapperRangeData* New() const PROTOBUF_FINAL { return New(NULL); }

  MapperRangeData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapperRangeData& from);
  void MergeFrom(const MapperRangeData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapperRangeData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double minx = 1;
  void clear_minx();
  static const int kMinxFieldNumber = 1;
  double minx() const;
  void set_minx(double value);

  // double miny = 2;
  void clear_miny();
  static const int kMinyFieldNumber = 2;
  double miny() const;
  void set_miny(double value);

  // double maxx = 3;
  void clear_maxx();
  static const int kMaxxFieldNumber = 3;
  double maxx() const;
  void set_maxx(double value);

  // double maxy = 4;
  void clear_maxy();
  static const int kMaxyFieldNumber = 4;
  double maxy() const;
  void set_maxy(double value);

  // int32 grid_size = 5;
  void clear_grid_size();
  static const int kGridSizeFieldNumber = 5;
  ::google::protobuf::int32 grid_size() const;
  void set_grid_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.MapperRangeData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double minx_;
  double miny_;
  double maxx_;
  double maxy_;
  ::google::protobuf::int32 grid_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fmapper_5fresponse_2eproto::TableStruct;
  friend void ::protobuf_business_2fmapper_5fresponse_2eproto::InitDefaultsMapperRangeDataImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapperResponse

// .xsproto.base.Header header = 1;
inline bool MapperResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& MapperResponse::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* MapperResponse::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.communication.MapperResponse.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* MapperResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.MapperResponse.header)
  return header_;
}
inline void MapperResponse::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.MapperResponse.header)
}

// int64 timestamp = 2;
inline void MapperResponse::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MapperResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperResponse.timestamp)
  return timestamp_;
}
inline void MapperResponse::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperResponse.timestamp)
}

// int32 seq_num = 3;
inline void MapperResponse::clear_seq_num() {
  seq_num_ = 0;
}
inline ::google::protobuf::int32 MapperResponse::seq_num() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperResponse.seq_num)
  return seq_num_;
}
inline void MapperResponse::set_seq_num(::google::protobuf::int32 value) {
  
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperResponse.seq_num)
}

// int32 msg_code = 4;
inline void MapperResponse::clear_msg_code() {
  msg_code_ = 0;
}
inline ::google::protobuf::int32 MapperResponse::msg_code() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperResponse.msg_code)
  return msg_code_;
}
inline void MapperResponse::set_msg_code(::google::protobuf::int32 value) {
  
  msg_code_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperResponse.msg_code)
}

// .google.protobuf.Any msg_content = 5;
inline bool MapperResponse::has_msg_content() const {
  return this != internal_default_instance() && msg_content_ != NULL;
}
inline const ::google::protobuf::Any& MapperResponse::msg_content() const {
  const ::google::protobuf::Any* p = msg_content_;
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperResponse.msg_content)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* MapperResponse::release_msg_content() {
  // @@protoc_insertion_point(field_release:xsproto.communication.MapperResponse.msg_content)
  
  ::google::protobuf::Any* temp = msg_content_;
  msg_content_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* MapperResponse::mutable_msg_content() {
  
  if (msg_content_ == NULL) {
    msg_content_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.MapperResponse.msg_content)
  return msg_content_;
}
inline void MapperResponse::set_allocated_msg_content(::google::protobuf::Any* msg_content) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(msg_content_);
  }
  if (msg_content) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msg_content = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg_content, submessage_arena);
    }
    
  } else {
    
  }
  msg_content_ = msg_content;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.MapperResponse.msg_content)
}

// -------------------------------------------------------------------

// MapperStatus

// int32 task = 1;
inline void MapperStatus::clear_task() {
  task_ = 0;
}
inline ::google::protobuf::int32 MapperStatus::task() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperStatus.task)
  return task_;
}
inline void MapperStatus::set_task(::google::protobuf::int32 value) {
  
  task_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperStatus.task)
}

// int32 status = 2;
inline void MapperStatus::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 MapperStatus::status() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperStatus.status)
  return status_;
}
inline void MapperStatus::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperStatus.status)
}

// string status_msg = 3;
inline void MapperStatus::clear_status_msg() {
  status_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MapperStatus::status_msg() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperStatus.status_msg)
  return status_msg_.GetNoArena();
}
inline void MapperStatus::set_status_msg(const ::std::string& value) {
  
  status_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperStatus.status_msg)
}
#if LANG_CXX11
inline void MapperStatus::set_status_msg(::std::string&& value) {
  
  status_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.MapperStatus.status_msg)
}
#endif
inline void MapperStatus::set_status_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.MapperStatus.status_msg)
}
inline void MapperStatus::set_status_msg(const char* value, size_t size) {
  
  status_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.MapperStatus.status_msg)
}
inline ::std::string* MapperStatus::mutable_status_msg() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.MapperStatus.status_msg)
  return status_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MapperStatus::release_status_msg() {
  // @@protoc_insertion_point(field_release:xsproto.communication.MapperStatus.status_msg)
  
  return status_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MapperStatus::set_allocated_status_msg(::std::string* status_msg) {
  if (status_msg != NULL) {
    
  } else {
    
  }
  status_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_msg);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.MapperStatus.status_msg)
}

// int32 progress = 4;
inline void MapperStatus::clear_progress() {
  progress_ = 0;
}
inline ::google::protobuf::int32 MapperStatus::progress() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperStatus.progress)
  return progress_;
}
inline void MapperStatus::set_progress(::google::protobuf::int32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperStatus.progress)
}

// int32 env = 5;
inline void MapperStatus::clear_env() {
  env_ = 0;
}
inline ::google::protobuf::int32 MapperStatus::env() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperStatus.env)
  return env_;
}
inline void MapperStatus::set_env(::google::protobuf::int32 value) {
  
  env_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperStatus.env)
}

// -------------------------------------------------------------------

// MapperTile

// double x = 1;
inline void MapperTile::clear_x() {
  x_ = 0;
}
inline double MapperTile::x() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperTile.x)
  return x_;
}
inline void MapperTile::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperTile.x)
}

// double y = 2;
inline void MapperTile::clear_y() {
  y_ = 0;
}
inline double MapperTile::y() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperTile.y)
  return y_;
}
inline void MapperTile::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperTile.y)
}

// double yaw = 3;
inline void MapperTile::clear_yaw() {
  yaw_ = 0;
}
inline double MapperTile::yaw() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperTile.yaw)
  return yaw_;
}
inline void MapperTile::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperTile.yaw)
}

// bytes map_2D_image = 4;
inline void MapperTile::clear_map_2d_image() {
  map_2d_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MapperTile::map_2d_image() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperTile.map_2D_image)
  return map_2d_image_.GetNoArena();
}
inline void MapperTile::set_map_2d_image(const ::std::string& value) {
  
  map_2d_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperTile.map_2D_image)
}
#if LANG_CXX11
inline void MapperTile::set_map_2d_image(::std::string&& value) {
  
  map_2d_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.MapperTile.map_2D_image)
}
#endif
inline void MapperTile::set_map_2d_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  map_2d_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.MapperTile.map_2D_image)
}
inline void MapperTile::set_map_2d_image(const void* value, size_t size) {
  
  map_2d_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.MapperTile.map_2D_image)
}
inline ::std::string* MapperTile::mutable_map_2d_image() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.MapperTile.map_2D_image)
  return map_2d_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MapperTile::release_map_2d_image() {
  // @@protoc_insertion_point(field_release:xsproto.communication.MapperTile.map_2D_image)
  
  return map_2d_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MapperTile::set_allocated_map_2d_image(::std::string* map_2d_image) {
  if (map_2d_image != NULL) {
    
  } else {
    
  }
  map_2d_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_2d_image);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.MapperTile.map_2D_image)
}

// .xsproto.communication.MapperRangeData range_info = 5;
inline bool MapperTile::has_range_info() const {
  return this != internal_default_instance() && range_info_ != NULL;
}
inline void MapperTile::clear_range_info() {
  if (GetArenaNoVirtual() == NULL && range_info_ != NULL) {
    delete range_info_;
  }
  range_info_ = NULL;
}
inline const ::xsproto::communication::MapperRangeData& MapperTile::range_info() const {
  const ::xsproto::communication::MapperRangeData* p = range_info_;
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperTile.range_info)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::communication::MapperRangeData*>(
      &::xsproto::communication::_MapperRangeData_default_instance_);
}
inline ::xsproto::communication::MapperRangeData* MapperTile::release_range_info() {
  // @@protoc_insertion_point(field_release:xsproto.communication.MapperTile.range_info)
  
  ::xsproto::communication::MapperRangeData* temp = range_info_;
  range_info_ = NULL;
  return temp;
}
inline ::xsproto::communication::MapperRangeData* MapperTile::mutable_range_info() {
  
  if (range_info_ == NULL) {
    range_info_ = new ::xsproto::communication::MapperRangeData;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.MapperTile.range_info)
  return range_info_;
}
inline void MapperTile::set_allocated_range_info(::xsproto::communication::MapperRangeData* range_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete range_info_;
  }
  if (range_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      range_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, range_info, submessage_arena);
    }
    
  } else {
    
  }
  range_info_ = range_info;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.MapperTile.range_info)
}

// -------------------------------------------------------------------

// MapperResult

// string result_path = 1;
inline void MapperResult::clear_result_path() {
  result_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MapperResult::result_path() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperResult.result_path)
  return result_path_.GetNoArena();
}
inline void MapperResult::set_result_path(const ::std::string& value) {
  
  result_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperResult.result_path)
}
#if LANG_CXX11
inline void MapperResult::set_result_path(::std::string&& value) {
  
  result_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.MapperResult.result_path)
}
#endif
inline void MapperResult::set_result_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.MapperResult.result_path)
}
inline void MapperResult::set_result_path(const char* value, size_t size) {
  
  result_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.MapperResult.result_path)
}
inline ::std::string* MapperResult::mutable_result_path() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.MapperResult.result_path)
  return result_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MapperResult::release_result_path() {
  // @@protoc_insertion_point(field_release:xsproto.communication.MapperResult.result_path)
  
  return result_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MapperResult::set_allocated_result_path(::std::string* result_path) {
  if (result_path != NULL) {
    
  } else {
    
  }
  result_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result_path);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.MapperResult.result_path)
}

// string pcd_path = 2;
inline void MapperResult::clear_pcd_path() {
  pcd_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MapperResult::pcd_path() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperResult.pcd_path)
  return pcd_path_.GetNoArena();
}
inline void MapperResult::set_pcd_path(const ::std::string& value) {
  
  pcd_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperResult.pcd_path)
}
#if LANG_CXX11
inline void MapperResult::set_pcd_path(::std::string&& value) {
  
  pcd_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.communication.MapperResult.pcd_path)
}
#endif
inline void MapperResult::set_pcd_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pcd_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.communication.MapperResult.pcd_path)
}
inline void MapperResult::set_pcd_path(const char* value, size_t size) {
  
  pcd_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.communication.MapperResult.pcd_path)
}
inline ::std::string* MapperResult::mutable_pcd_path() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.communication.MapperResult.pcd_path)
  return pcd_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MapperResult::release_pcd_path() {
  // @@protoc_insertion_point(field_release:xsproto.communication.MapperResult.pcd_path)
  
  return pcd_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MapperResult::set_allocated_pcd_path(::std::string* pcd_path) {
  if (pcd_path != NULL) {
    
  } else {
    
  }
  pcd_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pcd_path);
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.MapperResult.pcd_path)
}

// .xsproto.communication.MapperRangeData range_info = 3;
inline bool MapperResult::has_range_info() const {
  return this != internal_default_instance() && range_info_ != NULL;
}
inline void MapperResult::clear_range_info() {
  if (GetArenaNoVirtual() == NULL && range_info_ != NULL) {
    delete range_info_;
  }
  range_info_ = NULL;
}
inline const ::xsproto::communication::MapperRangeData& MapperResult::range_info() const {
  const ::xsproto::communication::MapperRangeData* p = range_info_;
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperResult.range_info)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::communication::MapperRangeData*>(
      &::xsproto::communication::_MapperRangeData_default_instance_);
}
inline ::xsproto::communication::MapperRangeData* MapperResult::release_range_info() {
  // @@protoc_insertion_point(field_release:xsproto.communication.MapperResult.range_info)
  
  ::xsproto::communication::MapperRangeData* temp = range_info_;
  range_info_ = NULL;
  return temp;
}
inline ::xsproto::communication::MapperRangeData* MapperResult::mutable_range_info() {
  
  if (range_info_ == NULL) {
    range_info_ = new ::xsproto::communication::MapperRangeData;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.MapperResult.range_info)
  return range_info_;
}
inline void MapperResult::set_allocated_range_info(::xsproto::communication::MapperRangeData* range_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete range_info_;
  }
  if (range_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      range_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, range_info, submessage_arena);
    }
    
  } else {
    
  }
  range_info_ = range_info;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.MapperResult.range_info)
}

// -------------------------------------------------------------------

// MapperRangeData

// double minx = 1;
inline void MapperRangeData::clear_minx() {
  minx_ = 0;
}
inline double MapperRangeData::minx() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperRangeData.minx)
  return minx_;
}
inline void MapperRangeData::set_minx(double value) {
  
  minx_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperRangeData.minx)
}

// double miny = 2;
inline void MapperRangeData::clear_miny() {
  miny_ = 0;
}
inline double MapperRangeData::miny() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperRangeData.miny)
  return miny_;
}
inline void MapperRangeData::set_miny(double value) {
  
  miny_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperRangeData.miny)
}

// double maxx = 3;
inline void MapperRangeData::clear_maxx() {
  maxx_ = 0;
}
inline double MapperRangeData::maxx() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperRangeData.maxx)
  return maxx_;
}
inline void MapperRangeData::set_maxx(double value) {
  
  maxx_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperRangeData.maxx)
}

// double maxy = 4;
inline void MapperRangeData::clear_maxy() {
  maxy_ = 0;
}
inline double MapperRangeData::maxy() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperRangeData.maxy)
  return maxy_;
}
inline void MapperRangeData::set_maxy(double value) {
  
  maxy_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperRangeData.maxy)
}

// int32 grid_size = 5;
inline void MapperRangeData::clear_grid_size() {
  grid_size_ = 0;
}
inline ::google::protobuf::int32 MapperRangeData::grid_size() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.MapperRangeData.grid_size)
  return grid_size_;
}
inline void MapperRangeData::set_grid_size(::google::protobuf::int32 value) {
  
  grid_size_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.MapperRangeData.grid_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_business_2fmapper_5fresponse_2eproto__INCLUDED
