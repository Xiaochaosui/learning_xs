// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/fusion_map.proto

#ifndef PROTOBUF_perception_2ffusion_5fmap_2eproto__INCLUDED
#define PROTOBUF_perception_2ffusion_5fmap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
#include "perception/traffic_light_info.pb.h"
#include "perception/obstacle_object_info.pb.h"
#include "perception/perception_common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_perception_2ffusion_5fmap_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsAttributeMapImpl();
void InitDefaultsAttributeMap();
void InitDefaultsEntityMapImpl();
void InitDefaultsEntityMap();
void InitDefaultsFusionMsgImpl();
void InitDefaultsFusionMsg();
inline void InitDefaults() {
  InitDefaultsAttributeMap();
  InitDefaultsEntityMap();
  InitDefaultsFusionMsg();
}
}  // namespace protobuf_perception_2ffusion_5fmap_2eproto
namespace xsproto {
namespace perception {
class AttributeMap;
class AttributeMapDefaultTypeInternal;
extern AttributeMapDefaultTypeInternal _AttributeMap_default_instance_;
class EntityMap;
class EntityMapDefaultTypeInternal;
extern EntityMapDefaultTypeInternal _EntityMap_default_instance_;
class FusionMsg;
class FusionMsgDefaultTypeInternal;
extern FusionMsgDefaultTypeInternal _FusionMsg_default_instance_;
}  // namespace perception
}  // namespace xsproto
namespace xsproto {
namespace perception {

// ===================================================================

class AttributeMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.AttributeMap) */ {
 public:
  AttributeMap();
  virtual ~AttributeMap();

  AttributeMap(const AttributeMap& from);

  inline AttributeMap& operator=(const AttributeMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttributeMap(AttributeMap&& from) noexcept
    : AttributeMap() {
    *this = ::std::move(from);
  }

  inline AttributeMap& operator=(AttributeMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttributeMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttributeMap* internal_default_instance() {
    return reinterpret_cast<const AttributeMap*>(
               &_AttributeMap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AttributeMap* other);
  friend void swap(AttributeMap& a, AttributeMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttributeMap* New() const PROTOBUF_FINAL { return New(NULL); }

  AttributeMap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AttributeMap& from);
  void MergeFrom(const AttributeMap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AttributeMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes map = 7;
  void clear_map();
  static const int kMapFieldNumber = 7;
  const ::std::string& map() const;
  void set_map(const ::std::string& value);
  #if LANG_CXX11
  void set_map(::std::string&& value);
  #endif
  void set_map(const char* value);
  void set_map(const void* value, size_t size);
  ::std::string* mutable_map();
  ::std::string* release_map();
  void set_allocated_map(::std::string* map);

  // bytes map2 = 14;
  void clear_map2();
  static const int kMap2FieldNumber = 14;
  const ::std::string& map2() const;
  void set_map2(const ::std::string& value);
  #if LANG_CXX11
  void set_map2(::std::string&& value);
  #endif
  void set_map2(const char* value);
  void set_map2(const void* value, size_t size);
  ::std::string* mutable_map2();
  ::std::string* release_map2();
  void set_allocated_map2(::std::string* map2);

  // int32 map_width = 1;
  void clear_map_width();
  static const int kMapWidthFieldNumber = 1;
  ::google::protobuf::int32 map_width() const;
  void set_map_width(::google::protobuf::int32 value);

  // int32 map_height = 2;
  void clear_map_height();
  static const int kMapHeightFieldNumber = 2;
  ::google::protobuf::int32 map_height() const;
  void set_map_height(::google::protobuf::int32 value);

  // int32 grid_width = 3;
  void clear_grid_width();
  static const int kGridWidthFieldNumber = 3;
  ::google::protobuf::int32 grid_width() const;
  void set_grid_width(::google::protobuf::int32 value);

  // int32 grid_height = 4;
  void clear_grid_height();
  static const int kGridHeightFieldNumber = 4;
  ::google::protobuf::int32 grid_height() const;
  void set_grid_height(::google::protobuf::int32 value);

  // int32 vehicle_grid_x = 5;
  void clear_vehicle_grid_x();
  static const int kVehicleGridXFieldNumber = 5;
  ::google::protobuf::int32 vehicle_grid_x() const;
  void set_vehicle_grid_x(::google::protobuf::int32 value);

  // int32 vehicle_grid_y = 6;
  void clear_vehicle_grid_y();
  static const int kVehicleGridYFieldNumber = 6;
  ::google::protobuf::int32 vehicle_grid_y() const;
  void set_vehicle_grid_y(::google::protobuf::int32 value);

  // int32 map_width2 = 8;
  void clear_map_width2();
  static const int kMapWidth2FieldNumber = 8;
  ::google::protobuf::int32 map_width2() const;
  void set_map_width2(::google::protobuf::int32 value);

  // int32 map_height2 = 9;
  void clear_map_height2();
  static const int kMapHeight2FieldNumber = 9;
  ::google::protobuf::int32 map_height2() const;
  void set_map_height2(::google::protobuf::int32 value);

  // int32 grid_width2 = 10;
  void clear_grid_width2();
  static const int kGridWidth2FieldNumber = 10;
  ::google::protobuf::int32 grid_width2() const;
  void set_grid_width2(::google::protobuf::int32 value);

  // int32 grid_height2 = 11;
  void clear_grid_height2();
  static const int kGridHeight2FieldNumber = 11;
  ::google::protobuf::int32 grid_height2() const;
  void set_grid_height2(::google::protobuf::int32 value);

  // int32 vehicle_grid_x2 = 12;
  void clear_vehicle_grid_x2();
  static const int kVehicleGridX2FieldNumber = 12;
  ::google::protobuf::int32 vehicle_grid_x2() const;
  void set_vehicle_grid_x2(::google::protobuf::int32 value);

  // int32 vehicle_grid_y2 = 13;
  void clear_vehicle_grid_y2();
  static const int kVehicleGridY2FieldNumber = 13;
  ::google::protobuf::int32 vehicle_grid_y2() const;
  void set_vehicle_grid_y2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.perception.AttributeMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr map_;
  ::google::protobuf::internal::ArenaStringPtr map2_;
  ::google::protobuf::int32 map_width_;
  ::google::protobuf::int32 map_height_;
  ::google::protobuf::int32 grid_width_;
  ::google::protobuf::int32 grid_height_;
  ::google::protobuf::int32 vehicle_grid_x_;
  ::google::protobuf::int32 vehicle_grid_y_;
  ::google::protobuf::int32 map_width2_;
  ::google::protobuf::int32 map_height2_;
  ::google::protobuf::int32 grid_width2_;
  ::google::protobuf::int32 grid_height2_;
  ::google::protobuf::int32 vehicle_grid_x2_;
  ::google::protobuf::int32 vehicle_grid_y2_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2ffusion_5fmap_2eproto::TableStruct;
  friend void ::protobuf_perception_2ffusion_5fmap_2eproto::InitDefaultsAttributeMapImpl();
};
// -------------------------------------------------------------------

class EntityMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.EntityMap) */ {
 public:
  EntityMap();
  virtual ~EntityMap();

  EntityMap(const EntityMap& from);

  inline EntityMap& operator=(const EntityMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityMap(EntityMap&& from) noexcept
    : EntityMap() {
    *this = ::std::move(from);
  }

  inline EntityMap& operator=(EntityMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityMap* internal_default_instance() {
    return reinterpret_cast<const EntityMap*>(
               &_EntityMap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EntityMap* other);
  friend void swap(EntityMap& a, EntityMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityMap* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityMap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityMap& from);
  void MergeFrom(const EntityMap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xsproto.perception.ObstacleObject targets = 1;
  int targets_size() const;
  void clear_targets();
  static const int kTargetsFieldNumber = 1;
  const ::xsproto::perception::ObstacleObject& targets(int index) const;
  ::xsproto::perception::ObstacleObject* mutable_targets(int index);
  ::xsproto::perception::ObstacleObject* add_targets();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject >*
      mutable_targets();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject >&
      targets() const;

  // repeated .xsproto.perception.ObstacleObject trailers = 4;
  int trailers_size() const;
  void clear_trailers();
  static const int kTrailersFieldNumber = 4;
  const ::xsproto::perception::ObstacleObject& trailers(int index) const;
  ::xsproto::perception::ObstacleObject* mutable_trailers(int index);
  ::xsproto::perception::ObstacleObject* add_trailers();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject >*
      mutable_trailers();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject >&
      trailers() const;

  // repeated .xsproto.perception.ObstacleObject auto_targets = 5;
  int auto_targets_size() const;
  void clear_auto_targets();
  static const int kAutoTargetsFieldNumber = 5;
  const ::xsproto::perception::ObstacleObject& auto_targets(int index) const;
  ::xsproto::perception::ObstacleObject* mutable_auto_targets(int index);
  ::xsproto::perception::ObstacleObject* add_auto_targets();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject >*
      mutable_auto_targets();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject >&
      auto_targets() const;

  // .xsproto.perception.TrafficLight traffic_lights = 3;
  bool has_traffic_lights() const;
  void clear_traffic_lights();
  static const int kTrafficLightsFieldNumber = 3;
  const ::xsproto::perception::TrafficLight& traffic_lights() const;
  ::xsproto::perception::TrafficLight* release_traffic_lights();
  ::xsproto::perception::TrafficLight* mutable_traffic_lights();
  void set_allocated_traffic_lights(::xsproto::perception::TrafficLight* traffic_lights);

  // int32 traffic_light_num = 2;
  void clear_traffic_light_num();
  static const int kTrafficLightNumFieldNumber = 2;
  ::google::protobuf::int32 traffic_light_num() const;
  void set_traffic_light_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.perception.EntityMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject > targets_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject > trailers_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject > auto_targets_;
  ::xsproto::perception::TrafficLight* traffic_lights_;
  ::google::protobuf::int32 traffic_light_num_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2ffusion_5fmap_2eproto::TableStruct;
  friend void ::protobuf_perception_2ffusion_5fmap_2eproto::InitDefaultsEntityMapImpl();
};
// -------------------------------------------------------------------

class FusionMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.FusionMsg) */ {
 public:
  FusionMsg();
  virtual ~FusionMsg();

  FusionMsg(const FusionMsg& from);

  inline FusionMsg& operator=(const FusionMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FusionMsg(FusionMsg&& from) noexcept
    : FusionMsg() {
    *this = ::std::move(from);
  }

  inline FusionMsg& operator=(FusionMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FusionMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FusionMsg* internal_default_instance() {
    return reinterpret_cast<const FusionMsg*>(
               &_FusionMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FusionMsg* other);
  friend void swap(FusionMsg& a, FusionMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FusionMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  FusionMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FusionMsg& from);
  void MergeFrom(const FusionMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FusionMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xsproto.perception.Area2D obstacle_areas = 4;
  int obstacle_areas_size() const;
  void clear_obstacle_areas();
  static const int kObstacleAreasFieldNumber = 4;
  const ::xsproto::perception::Area2D& obstacle_areas(int index) const;
  ::xsproto::perception::Area2D* mutable_obstacle_areas(int index);
  ::xsproto::perception::Area2D* add_obstacle_areas();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Area2D >*
      mutable_obstacle_areas();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Area2D >&
      obstacle_areas() const;

  // repeated .xsproto.perception.Point2D obstacle_points = 5;
  int obstacle_points_size() const;
  void clear_obstacle_points();
  static const int kObstaclePointsFieldNumber = 5;
  const ::xsproto::perception::Point2D& obstacle_points(int index) const;
  ::xsproto::perception::Point2D* mutable_obstacle_points(int index);
  ::xsproto::perception::Point2D* add_obstacle_points();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point2D >*
      mutable_obstacle_points();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point2D >&
      obstacle_points() const;

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // .xsproto.perception.AttributeMap obstacle_map = 2;
  bool has_obstacle_map() const;
  void clear_obstacle_map();
  static const int kObstacleMapFieldNumber = 2;
  const ::xsproto::perception::AttributeMap& obstacle_map() const;
  ::xsproto::perception::AttributeMap* release_obstacle_map();
  ::xsproto::perception::AttributeMap* mutable_obstacle_map();
  void set_allocated_obstacle_map(::xsproto::perception::AttributeMap* obstacle_map);

  // .xsproto.perception.EntityMap entity_map = 3;
  bool has_entity_map() const;
  void clear_entity_map();
  static const int kEntityMapFieldNumber = 3;
  const ::xsproto::perception::EntityMap& entity_map() const;
  ::xsproto::perception::EntityMap* release_entity_map();
  ::xsproto::perception::EntityMap* mutable_entity_map();
  void set_allocated_entity_map(::xsproto::perception::EntityMap* entity_map);

  // @@protoc_insertion_point(class_scope:xsproto.perception.FusionMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Area2D > obstacle_areas_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point2D > obstacle_points_;
  ::xsproto::base::Header* header_;
  ::xsproto::perception::AttributeMap* obstacle_map_;
  ::xsproto::perception::EntityMap* entity_map_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2ffusion_5fmap_2eproto::TableStruct;
  friend void ::protobuf_perception_2ffusion_5fmap_2eproto::InitDefaultsFusionMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AttributeMap

// int32 map_width = 1;
inline void AttributeMap::clear_map_width() {
  map_width_ = 0;
}
inline ::google::protobuf::int32 AttributeMap::map_width() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.AttributeMap.map_width)
  return map_width_;
}
inline void AttributeMap::set_map_width(::google::protobuf::int32 value) {
  
  map_width_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.AttributeMap.map_width)
}

// int32 map_height = 2;
inline void AttributeMap::clear_map_height() {
  map_height_ = 0;
}
inline ::google::protobuf::int32 AttributeMap::map_height() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.AttributeMap.map_height)
  return map_height_;
}
inline void AttributeMap::set_map_height(::google::protobuf::int32 value) {
  
  map_height_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.AttributeMap.map_height)
}

// int32 grid_width = 3;
inline void AttributeMap::clear_grid_width() {
  grid_width_ = 0;
}
inline ::google::protobuf::int32 AttributeMap::grid_width() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.AttributeMap.grid_width)
  return grid_width_;
}
inline void AttributeMap::set_grid_width(::google::protobuf::int32 value) {
  
  grid_width_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.AttributeMap.grid_width)
}

// int32 grid_height = 4;
inline void AttributeMap::clear_grid_height() {
  grid_height_ = 0;
}
inline ::google::protobuf::int32 AttributeMap::grid_height() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.AttributeMap.grid_height)
  return grid_height_;
}
inline void AttributeMap::set_grid_height(::google::protobuf::int32 value) {
  
  grid_height_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.AttributeMap.grid_height)
}

// int32 vehicle_grid_x = 5;
inline void AttributeMap::clear_vehicle_grid_x() {
  vehicle_grid_x_ = 0;
}
inline ::google::protobuf::int32 AttributeMap::vehicle_grid_x() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.AttributeMap.vehicle_grid_x)
  return vehicle_grid_x_;
}
inline void AttributeMap::set_vehicle_grid_x(::google::protobuf::int32 value) {
  
  vehicle_grid_x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.AttributeMap.vehicle_grid_x)
}

// int32 vehicle_grid_y = 6;
inline void AttributeMap::clear_vehicle_grid_y() {
  vehicle_grid_y_ = 0;
}
inline ::google::protobuf::int32 AttributeMap::vehicle_grid_y() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.AttributeMap.vehicle_grid_y)
  return vehicle_grid_y_;
}
inline void AttributeMap::set_vehicle_grid_y(::google::protobuf::int32 value) {
  
  vehicle_grid_y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.AttributeMap.vehicle_grid_y)
}

// bytes map = 7;
inline void AttributeMap::clear_map() {
  map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttributeMap::map() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.AttributeMap.map)
  return map_.GetNoArena();
}
inline void AttributeMap::set_map(const ::std::string& value) {
  
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.perception.AttributeMap.map)
}
#if LANG_CXX11
inline void AttributeMap::set_map(::std::string&& value) {
  
  map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.perception.AttributeMap.map)
}
#endif
inline void AttributeMap::set_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.perception.AttributeMap.map)
}
inline void AttributeMap::set_map(const void* value, size_t size) {
  
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.perception.AttributeMap.map)
}
inline ::std::string* AttributeMap::mutable_map() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.perception.AttributeMap.map)
  return map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttributeMap::release_map() {
  // @@protoc_insertion_point(field_release:xsproto.perception.AttributeMap.map)
  
  return map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttributeMap::set_allocated_map(::std::string* map) {
  if (map != NULL) {
    
  } else {
    
  }
  map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map);
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.AttributeMap.map)
}

// int32 map_width2 = 8;
inline void AttributeMap::clear_map_width2() {
  map_width2_ = 0;
}
inline ::google::protobuf::int32 AttributeMap::map_width2() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.AttributeMap.map_width2)
  return map_width2_;
}
inline void AttributeMap::set_map_width2(::google::protobuf::int32 value) {
  
  map_width2_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.AttributeMap.map_width2)
}

// int32 map_height2 = 9;
inline void AttributeMap::clear_map_height2() {
  map_height2_ = 0;
}
inline ::google::protobuf::int32 AttributeMap::map_height2() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.AttributeMap.map_height2)
  return map_height2_;
}
inline void AttributeMap::set_map_height2(::google::protobuf::int32 value) {
  
  map_height2_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.AttributeMap.map_height2)
}

// int32 grid_width2 = 10;
inline void AttributeMap::clear_grid_width2() {
  grid_width2_ = 0;
}
inline ::google::protobuf::int32 AttributeMap::grid_width2() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.AttributeMap.grid_width2)
  return grid_width2_;
}
inline void AttributeMap::set_grid_width2(::google::protobuf::int32 value) {
  
  grid_width2_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.AttributeMap.grid_width2)
}

// int32 grid_height2 = 11;
inline void AttributeMap::clear_grid_height2() {
  grid_height2_ = 0;
}
inline ::google::protobuf::int32 AttributeMap::grid_height2() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.AttributeMap.grid_height2)
  return grid_height2_;
}
inline void AttributeMap::set_grid_height2(::google::protobuf::int32 value) {
  
  grid_height2_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.AttributeMap.grid_height2)
}

// int32 vehicle_grid_x2 = 12;
inline void AttributeMap::clear_vehicle_grid_x2() {
  vehicle_grid_x2_ = 0;
}
inline ::google::protobuf::int32 AttributeMap::vehicle_grid_x2() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.AttributeMap.vehicle_grid_x2)
  return vehicle_grid_x2_;
}
inline void AttributeMap::set_vehicle_grid_x2(::google::protobuf::int32 value) {
  
  vehicle_grid_x2_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.AttributeMap.vehicle_grid_x2)
}

// int32 vehicle_grid_y2 = 13;
inline void AttributeMap::clear_vehicle_grid_y2() {
  vehicle_grid_y2_ = 0;
}
inline ::google::protobuf::int32 AttributeMap::vehicle_grid_y2() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.AttributeMap.vehicle_grid_y2)
  return vehicle_grid_y2_;
}
inline void AttributeMap::set_vehicle_grid_y2(::google::protobuf::int32 value) {
  
  vehicle_grid_y2_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.AttributeMap.vehicle_grid_y2)
}

// bytes map2 = 14;
inline void AttributeMap::clear_map2() {
  map2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttributeMap::map2() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.AttributeMap.map2)
  return map2_.GetNoArena();
}
inline void AttributeMap::set_map2(const ::std::string& value) {
  
  map2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.perception.AttributeMap.map2)
}
#if LANG_CXX11
inline void AttributeMap::set_map2(::std::string&& value) {
  
  map2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.perception.AttributeMap.map2)
}
#endif
inline void AttributeMap::set_map2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  map2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.perception.AttributeMap.map2)
}
inline void AttributeMap::set_map2(const void* value, size_t size) {
  
  map2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.perception.AttributeMap.map2)
}
inline ::std::string* AttributeMap::mutable_map2() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.perception.AttributeMap.map2)
  return map2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttributeMap::release_map2() {
  // @@protoc_insertion_point(field_release:xsproto.perception.AttributeMap.map2)
  
  return map2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttributeMap::set_allocated_map2(::std::string* map2) {
  if (map2 != NULL) {
    
  } else {
    
  }
  map2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map2);
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.AttributeMap.map2)
}

// -------------------------------------------------------------------

// EntityMap

// repeated .xsproto.perception.ObstacleObject targets = 1;
inline int EntityMap::targets_size() const {
  return targets_.size();
}
inline const ::xsproto::perception::ObstacleObject& EntityMap::targets(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.EntityMap.targets)
  return targets_.Get(index);
}
inline ::xsproto::perception::ObstacleObject* EntityMap::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.EntityMap.targets)
  return targets_.Mutable(index);
}
inline ::xsproto::perception::ObstacleObject* EntityMap::add_targets() {
  // @@protoc_insertion_point(field_add:xsproto.perception.EntityMap.targets)
  return targets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject >*
EntityMap::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.EntityMap.targets)
  return &targets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject >&
EntityMap::targets() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.EntityMap.targets)
  return targets_;
}

// int32 traffic_light_num = 2;
inline void EntityMap::clear_traffic_light_num() {
  traffic_light_num_ = 0;
}
inline ::google::protobuf::int32 EntityMap::traffic_light_num() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.EntityMap.traffic_light_num)
  return traffic_light_num_;
}
inline void EntityMap::set_traffic_light_num(::google::protobuf::int32 value) {
  
  traffic_light_num_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.EntityMap.traffic_light_num)
}

// .xsproto.perception.TrafficLight traffic_lights = 3;
inline bool EntityMap::has_traffic_lights() const {
  return this != internal_default_instance() && traffic_lights_ != NULL;
}
inline const ::xsproto::perception::TrafficLight& EntityMap::traffic_lights() const {
  const ::xsproto::perception::TrafficLight* p = traffic_lights_;
  // @@protoc_insertion_point(field_get:xsproto.perception.EntityMap.traffic_lights)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::perception::TrafficLight*>(
      &::xsproto::perception::_TrafficLight_default_instance_);
}
inline ::xsproto::perception::TrafficLight* EntityMap::release_traffic_lights() {
  // @@protoc_insertion_point(field_release:xsproto.perception.EntityMap.traffic_lights)
  
  ::xsproto::perception::TrafficLight* temp = traffic_lights_;
  traffic_lights_ = NULL;
  return temp;
}
inline ::xsproto::perception::TrafficLight* EntityMap::mutable_traffic_lights() {
  
  if (traffic_lights_ == NULL) {
    traffic_lights_ = new ::xsproto::perception::TrafficLight;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.EntityMap.traffic_lights)
  return traffic_lights_;
}
inline void EntityMap::set_allocated_traffic_lights(::xsproto::perception::TrafficLight* traffic_lights) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(traffic_lights_);
  }
  if (traffic_lights) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      traffic_lights = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, traffic_lights, submessage_arena);
    }
    
  } else {
    
  }
  traffic_lights_ = traffic_lights;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.EntityMap.traffic_lights)
}

// repeated .xsproto.perception.ObstacleObject trailers = 4;
inline int EntityMap::trailers_size() const {
  return trailers_.size();
}
inline const ::xsproto::perception::ObstacleObject& EntityMap::trailers(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.EntityMap.trailers)
  return trailers_.Get(index);
}
inline ::xsproto::perception::ObstacleObject* EntityMap::mutable_trailers(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.EntityMap.trailers)
  return trailers_.Mutable(index);
}
inline ::xsproto::perception::ObstacleObject* EntityMap::add_trailers() {
  // @@protoc_insertion_point(field_add:xsproto.perception.EntityMap.trailers)
  return trailers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject >*
EntityMap::mutable_trailers() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.EntityMap.trailers)
  return &trailers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject >&
EntityMap::trailers() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.EntityMap.trailers)
  return trailers_;
}

// repeated .xsproto.perception.ObstacleObject auto_targets = 5;
inline int EntityMap::auto_targets_size() const {
  return auto_targets_.size();
}
inline const ::xsproto::perception::ObstacleObject& EntityMap::auto_targets(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.EntityMap.auto_targets)
  return auto_targets_.Get(index);
}
inline ::xsproto::perception::ObstacleObject* EntityMap::mutable_auto_targets(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.EntityMap.auto_targets)
  return auto_targets_.Mutable(index);
}
inline ::xsproto::perception::ObstacleObject* EntityMap::add_auto_targets() {
  // @@protoc_insertion_point(field_add:xsproto.perception.EntityMap.auto_targets)
  return auto_targets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject >*
EntityMap::mutable_auto_targets() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.EntityMap.auto_targets)
  return &auto_targets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::ObstacleObject >&
EntityMap::auto_targets() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.EntityMap.auto_targets)
  return auto_targets_;
}

// -------------------------------------------------------------------

// FusionMsg

// .xsproto.base.Header header = 1;
inline bool FusionMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& FusionMsg::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.perception.FusionMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* FusionMsg::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.perception.FusionMsg.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* FusionMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.FusionMsg.header)
  return header_;
}
inline void FusionMsg::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.FusionMsg.header)
}

// .xsproto.perception.AttributeMap obstacle_map = 2;
inline bool FusionMsg::has_obstacle_map() const {
  return this != internal_default_instance() && obstacle_map_ != NULL;
}
inline void FusionMsg::clear_obstacle_map() {
  if (GetArenaNoVirtual() == NULL && obstacle_map_ != NULL) {
    delete obstacle_map_;
  }
  obstacle_map_ = NULL;
}
inline const ::xsproto::perception::AttributeMap& FusionMsg::obstacle_map() const {
  const ::xsproto::perception::AttributeMap* p = obstacle_map_;
  // @@protoc_insertion_point(field_get:xsproto.perception.FusionMsg.obstacle_map)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::perception::AttributeMap*>(
      &::xsproto::perception::_AttributeMap_default_instance_);
}
inline ::xsproto::perception::AttributeMap* FusionMsg::release_obstacle_map() {
  // @@protoc_insertion_point(field_release:xsproto.perception.FusionMsg.obstacle_map)
  
  ::xsproto::perception::AttributeMap* temp = obstacle_map_;
  obstacle_map_ = NULL;
  return temp;
}
inline ::xsproto::perception::AttributeMap* FusionMsg::mutable_obstacle_map() {
  
  if (obstacle_map_ == NULL) {
    obstacle_map_ = new ::xsproto::perception::AttributeMap;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.FusionMsg.obstacle_map)
  return obstacle_map_;
}
inline void FusionMsg::set_allocated_obstacle_map(::xsproto::perception::AttributeMap* obstacle_map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete obstacle_map_;
  }
  if (obstacle_map) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      obstacle_map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, obstacle_map, submessage_arena);
    }
    
  } else {
    
  }
  obstacle_map_ = obstacle_map;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.FusionMsg.obstacle_map)
}

// .xsproto.perception.EntityMap entity_map = 3;
inline bool FusionMsg::has_entity_map() const {
  return this != internal_default_instance() && entity_map_ != NULL;
}
inline void FusionMsg::clear_entity_map() {
  if (GetArenaNoVirtual() == NULL && entity_map_ != NULL) {
    delete entity_map_;
  }
  entity_map_ = NULL;
}
inline const ::xsproto::perception::EntityMap& FusionMsg::entity_map() const {
  const ::xsproto::perception::EntityMap* p = entity_map_;
  // @@protoc_insertion_point(field_get:xsproto.perception.FusionMsg.entity_map)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::perception::EntityMap*>(
      &::xsproto::perception::_EntityMap_default_instance_);
}
inline ::xsproto::perception::EntityMap* FusionMsg::release_entity_map() {
  // @@protoc_insertion_point(field_release:xsproto.perception.FusionMsg.entity_map)
  
  ::xsproto::perception::EntityMap* temp = entity_map_;
  entity_map_ = NULL;
  return temp;
}
inline ::xsproto::perception::EntityMap* FusionMsg::mutable_entity_map() {
  
  if (entity_map_ == NULL) {
    entity_map_ = new ::xsproto::perception::EntityMap;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.FusionMsg.entity_map)
  return entity_map_;
}
inline void FusionMsg::set_allocated_entity_map(::xsproto::perception::EntityMap* entity_map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete entity_map_;
  }
  if (entity_map) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entity_map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entity_map, submessage_arena);
    }
    
  } else {
    
  }
  entity_map_ = entity_map;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.FusionMsg.entity_map)
}

// repeated .xsproto.perception.Area2D obstacle_areas = 4;
inline int FusionMsg::obstacle_areas_size() const {
  return obstacle_areas_.size();
}
inline const ::xsproto::perception::Area2D& FusionMsg::obstacle_areas(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.FusionMsg.obstacle_areas)
  return obstacle_areas_.Get(index);
}
inline ::xsproto::perception::Area2D* FusionMsg::mutable_obstacle_areas(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.FusionMsg.obstacle_areas)
  return obstacle_areas_.Mutable(index);
}
inline ::xsproto::perception::Area2D* FusionMsg::add_obstacle_areas() {
  // @@protoc_insertion_point(field_add:xsproto.perception.FusionMsg.obstacle_areas)
  return obstacle_areas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Area2D >*
FusionMsg::mutable_obstacle_areas() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.FusionMsg.obstacle_areas)
  return &obstacle_areas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Area2D >&
FusionMsg::obstacle_areas() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.FusionMsg.obstacle_areas)
  return obstacle_areas_;
}

// repeated .xsproto.perception.Point2D obstacle_points = 5;
inline int FusionMsg::obstacle_points_size() const {
  return obstacle_points_.size();
}
inline const ::xsproto::perception::Point2D& FusionMsg::obstacle_points(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.FusionMsg.obstacle_points)
  return obstacle_points_.Get(index);
}
inline ::xsproto::perception::Point2D* FusionMsg::mutable_obstacle_points(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.FusionMsg.obstacle_points)
  return obstacle_points_.Mutable(index);
}
inline ::xsproto::perception::Point2D* FusionMsg::add_obstacle_points() {
  // @@protoc_insertion_point(field_add:xsproto.perception.FusionMsg.obstacle_points)
  return obstacle_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point2D >*
FusionMsg::mutable_obstacle_points() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.FusionMsg.obstacle_points)
  return &obstacle_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point2D >&
FusionMsg::obstacle_points() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.FusionMsg.obstacle_points)
  return obstacle_points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2ffusion_5fmap_2eproto__INCLUDED
