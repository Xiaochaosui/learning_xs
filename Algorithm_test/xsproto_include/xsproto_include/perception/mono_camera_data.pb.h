// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/mono_camera_data.proto

#ifndef PROTOBUF_perception_2fmono_5fcamera_5fdata_2eproto__INCLUDED
#define PROTOBUF_perception_2fmono_5fcamera_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
#include "perception/perception_common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_perception_2fmono_5fcamera_5fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMonoCameraDataImpl();
void InitDefaultsMonoCameraData();
inline void InitDefaults() {
  InitDefaultsMonoCameraData();
}
}  // namespace protobuf_perception_2fmono_5fcamera_5fdata_2eproto
namespace xsproto {
namespace perception {
class MonoCameraData;
class MonoCameraDataDefaultTypeInternal;
extern MonoCameraDataDefaultTypeInternal _MonoCameraData_default_instance_;
}  // namespace perception
}  // namespace xsproto
namespace xsproto {
namespace perception {

enum LenMode {
  PINHOLE = 0,
  FISHEYE = 1,
  LenMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LenMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LenMode_IsValid(int value);
const LenMode LenMode_MIN = PINHOLE;
const LenMode LenMode_MAX = FISHEYE;
const int LenMode_ARRAYSIZE = LenMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LenMode_descriptor();
inline const ::std::string& LenMode_Name(LenMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LenMode_descriptor(), value);
}
inline bool LenMode_Parse(
    const ::std::string& name, LenMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LenMode>(
    LenMode_descriptor(), name, value);
}
// ===================================================================

class MonoCameraData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.MonoCameraData) */ {
 public:
  MonoCameraData();
  virtual ~MonoCameraData();

  MonoCameraData(const MonoCameraData& from);

  inline MonoCameraData& operator=(const MonoCameraData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonoCameraData(MonoCameraData&& from) noexcept
    : MonoCameraData() {
    *this = ::std::move(from);
  }

  inline MonoCameraData& operator=(MonoCameraData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonoCameraData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonoCameraData* internal_default_instance() {
    return reinterpret_cast<const MonoCameraData*>(
               &_MonoCameraData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MonoCameraData* other);
  friend void swap(MonoCameraData& a, MonoCameraData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonoCameraData* New() const PROTOBUF_FINAL { return New(NULL); }

  MonoCameraData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MonoCameraData& from);
  void MergeFrom(const MonoCameraData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MonoCameraData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes image_data = 8;
  void clear_image_data();
  static const int kImageDataFieldNumber = 8;
  const ::std::string& image_data() const;
  void set_image_data(const ::std::string& value);
  #if LANG_CXX11
  void set_image_data(::std::string&& value);
  #endif
  void set_image_data(const char* value);
  void set_image_data(const void* value, size_t size);
  ::std::string* mutable_image_data();
  ::std::string* release_image_data();
  void set_allocated_image_data(::std::string* image_data);

  // bytes range_data = 9;
  void clear_range_data();
  static const int kRangeDataFieldNumber = 9;
  const ::std::string& range_data() const;
  void set_range_data(const ::std::string& value);
  #if LANG_CXX11
  void set_range_data(::std::string&& value);
  #endif
  void set_range_data(const char* value);
  void set_range_data(const void* value, size_t size);
  ::std::string* mutable_range_data();
  ::std::string* release_range_data();
  void set_allocated_range_data(::std::string* range_data);

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // .xsproto.perception.CamearaIntrinsicParameters intrinsic_params = 11;
  bool has_intrinsic_params() const;
  void clear_intrinsic_params();
  static const int kIntrinsicParamsFieldNumber = 11;
  const ::xsproto::perception::CamearaIntrinsicParameters& intrinsic_params() const;
  ::xsproto::perception::CamearaIntrinsicParameters* release_intrinsic_params();
  ::xsproto::perception::CamearaIntrinsicParameters* mutable_intrinsic_params();
  void set_allocated_intrinsic_params(::xsproto::perception::CamearaIntrinsicParameters* intrinsic_params);

  // .xsproto.perception.ExtrinsicParameters extrinsic_params = 12;
  bool has_extrinsic_params() const;
  void clear_extrinsic_params();
  static const int kExtrinsicParamsFieldNumber = 12;
  const ::xsproto::perception::ExtrinsicParameters& extrinsic_params() const;
  ::xsproto::perception::ExtrinsicParameters* release_extrinsic_params();
  ::xsproto::perception::ExtrinsicParameters* mutable_extrinsic_params();
  void set_allocated_extrinsic_params(::xsproto::perception::ExtrinsicParameters* extrinsic_params);

  // uint32 camera_type = 2;
  void clear_camera_type();
  static const int kCameraTypeFieldNumber = 2;
  ::google::protobuf::uint32 camera_type() const;
  void set_camera_type(::google::protobuf::uint32 value);

  // uint32 camera_mode = 3;
  void clear_camera_mode();
  static const int kCameraModeFieldNumber = 3;
  ::google::protobuf::uint32 camera_mode() const;
  void set_camera_mode(::google::protobuf::uint32 value);

  // uint32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 pixel_channel = 6;
  void clear_pixel_channel();
  static const int kPixelChannelFieldNumber = 6;
  ::google::protobuf::uint32 pixel_channel() const;
  void set_pixel_channel(::google::protobuf::uint32 value);

  // uint32 image_format = 7;
  void clear_image_format();
  static const int kImageFormatFieldNumber = 7;
  ::google::protobuf::uint32 image_format() const;
  void set_image_format(::google::protobuf::uint32 value);

  // .xsproto.perception.LenMode len_mode = 10;
  void clear_len_mode();
  static const int kLenModeFieldNumber = 10;
  ::xsproto::perception::LenMode len_mode() const;
  void set_len_mode(::xsproto::perception::LenMode value);

  // @@protoc_insertion_point(class_scope:xsproto.perception.MonoCameraData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_data_;
  ::google::protobuf::internal::ArenaStringPtr range_data_;
  ::xsproto::base::Header* header_;
  ::xsproto::perception::CamearaIntrinsicParameters* intrinsic_params_;
  ::xsproto::perception::ExtrinsicParameters* extrinsic_params_;
  ::google::protobuf::uint32 camera_type_;
  ::google::protobuf::uint32 camera_mode_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 pixel_channel_;
  ::google::protobuf::uint32 image_format_;
  int len_mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2fmono_5fcamera_5fdata_2eproto::TableStruct;
  friend void ::protobuf_perception_2fmono_5fcamera_5fdata_2eproto::InitDefaultsMonoCameraDataImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MonoCameraData

// .xsproto.base.Header header = 1;
inline bool MonoCameraData::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& MonoCameraData::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.perception.MonoCameraData.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* MonoCameraData::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.perception.MonoCameraData.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* MonoCameraData::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.MonoCameraData.header)
  return header_;
}
inline void MonoCameraData::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.MonoCameraData.header)
}

// uint32 camera_type = 2;
inline void MonoCameraData::clear_camera_type() {
  camera_type_ = 0u;
}
inline ::google::protobuf::uint32 MonoCameraData::camera_type() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MonoCameraData.camera_type)
  return camera_type_;
}
inline void MonoCameraData::set_camera_type(::google::protobuf::uint32 value) {
  
  camera_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.MonoCameraData.camera_type)
}

// uint32 camera_mode = 3;
inline void MonoCameraData::clear_camera_mode() {
  camera_mode_ = 0u;
}
inline ::google::protobuf::uint32 MonoCameraData::camera_mode() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MonoCameraData.camera_mode)
  return camera_mode_;
}
inline void MonoCameraData::set_camera_mode(::google::protobuf::uint32 value) {
  
  camera_mode_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.MonoCameraData.camera_mode)
}

// uint32 width = 4;
inline void MonoCameraData::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 MonoCameraData::width() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MonoCameraData.width)
  return width_;
}
inline void MonoCameraData::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.MonoCameraData.width)
}

// uint32 height = 5;
inline void MonoCameraData::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 MonoCameraData::height() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MonoCameraData.height)
  return height_;
}
inline void MonoCameraData::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.MonoCameraData.height)
}

// uint32 pixel_channel = 6;
inline void MonoCameraData::clear_pixel_channel() {
  pixel_channel_ = 0u;
}
inline ::google::protobuf::uint32 MonoCameraData::pixel_channel() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MonoCameraData.pixel_channel)
  return pixel_channel_;
}
inline void MonoCameraData::set_pixel_channel(::google::protobuf::uint32 value) {
  
  pixel_channel_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.MonoCameraData.pixel_channel)
}

// uint32 image_format = 7;
inline void MonoCameraData::clear_image_format() {
  image_format_ = 0u;
}
inline ::google::protobuf::uint32 MonoCameraData::image_format() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MonoCameraData.image_format)
  return image_format_;
}
inline void MonoCameraData::set_image_format(::google::protobuf::uint32 value) {
  
  image_format_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.MonoCameraData.image_format)
}

// bytes image_data = 8;
inline void MonoCameraData::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MonoCameraData::image_data() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MonoCameraData.image_data)
  return image_data_.GetNoArena();
}
inline void MonoCameraData::set_image_data(const ::std::string& value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.perception.MonoCameraData.image_data)
}
#if LANG_CXX11
inline void MonoCameraData::set_image_data(::std::string&& value) {
  
  image_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.perception.MonoCameraData.image_data)
}
#endif
inline void MonoCameraData::set_image_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.perception.MonoCameraData.image_data)
}
inline void MonoCameraData::set_image_data(const void* value, size_t size) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.perception.MonoCameraData.image_data)
}
inline ::std::string* MonoCameraData::mutable_image_data() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.perception.MonoCameraData.image_data)
  return image_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonoCameraData::release_image_data() {
  // @@protoc_insertion_point(field_release:xsproto.perception.MonoCameraData.image_data)
  
  return image_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonoCameraData::set_allocated_image_data(::std::string* image_data) {
  if (image_data != NULL) {
    
  } else {
    
  }
  image_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.MonoCameraData.image_data)
}

// bytes range_data = 9;
inline void MonoCameraData::clear_range_data() {
  range_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MonoCameraData::range_data() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MonoCameraData.range_data)
  return range_data_.GetNoArena();
}
inline void MonoCameraData::set_range_data(const ::std::string& value) {
  
  range_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xsproto.perception.MonoCameraData.range_data)
}
#if LANG_CXX11
inline void MonoCameraData::set_range_data(::std::string&& value) {
  
  range_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsproto.perception.MonoCameraData.range_data)
}
#endif
inline void MonoCameraData::set_range_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  range_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsproto.perception.MonoCameraData.range_data)
}
inline void MonoCameraData::set_range_data(const void* value, size_t size) {
  
  range_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsproto.perception.MonoCameraData.range_data)
}
inline ::std::string* MonoCameraData::mutable_range_data() {
  
  // @@protoc_insertion_point(field_mutable:xsproto.perception.MonoCameraData.range_data)
  return range_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonoCameraData::release_range_data() {
  // @@protoc_insertion_point(field_release:xsproto.perception.MonoCameraData.range_data)
  
  return range_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonoCameraData::set_allocated_range_data(::std::string* range_data) {
  if (range_data != NULL) {
    
  } else {
    
  }
  range_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), range_data);
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.MonoCameraData.range_data)
}

// .xsproto.perception.LenMode len_mode = 10;
inline void MonoCameraData::clear_len_mode() {
  len_mode_ = 0;
}
inline ::xsproto::perception::LenMode MonoCameraData::len_mode() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MonoCameraData.len_mode)
  return static_cast< ::xsproto::perception::LenMode >(len_mode_);
}
inline void MonoCameraData::set_len_mode(::xsproto::perception::LenMode value) {
  
  len_mode_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.MonoCameraData.len_mode)
}

// .xsproto.perception.CamearaIntrinsicParameters intrinsic_params = 11;
inline bool MonoCameraData::has_intrinsic_params() const {
  return this != internal_default_instance() && intrinsic_params_ != NULL;
}
inline const ::xsproto::perception::CamearaIntrinsicParameters& MonoCameraData::intrinsic_params() const {
  const ::xsproto::perception::CamearaIntrinsicParameters* p = intrinsic_params_;
  // @@protoc_insertion_point(field_get:xsproto.perception.MonoCameraData.intrinsic_params)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::perception::CamearaIntrinsicParameters*>(
      &::xsproto::perception::_CamearaIntrinsicParameters_default_instance_);
}
inline ::xsproto::perception::CamearaIntrinsicParameters* MonoCameraData::release_intrinsic_params() {
  // @@protoc_insertion_point(field_release:xsproto.perception.MonoCameraData.intrinsic_params)
  
  ::xsproto::perception::CamearaIntrinsicParameters* temp = intrinsic_params_;
  intrinsic_params_ = NULL;
  return temp;
}
inline ::xsproto::perception::CamearaIntrinsicParameters* MonoCameraData::mutable_intrinsic_params() {
  
  if (intrinsic_params_ == NULL) {
    intrinsic_params_ = new ::xsproto::perception::CamearaIntrinsicParameters;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.MonoCameraData.intrinsic_params)
  return intrinsic_params_;
}
inline void MonoCameraData::set_allocated_intrinsic_params(::xsproto::perception::CamearaIntrinsicParameters* intrinsic_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(intrinsic_params_);
  }
  if (intrinsic_params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intrinsic_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intrinsic_params, submessage_arena);
    }
    
  } else {
    
  }
  intrinsic_params_ = intrinsic_params;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.MonoCameraData.intrinsic_params)
}

// .xsproto.perception.ExtrinsicParameters extrinsic_params = 12;
inline bool MonoCameraData::has_extrinsic_params() const {
  return this != internal_default_instance() && extrinsic_params_ != NULL;
}
inline const ::xsproto::perception::ExtrinsicParameters& MonoCameraData::extrinsic_params() const {
  const ::xsproto::perception::ExtrinsicParameters* p = extrinsic_params_;
  // @@protoc_insertion_point(field_get:xsproto.perception.MonoCameraData.extrinsic_params)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::perception::ExtrinsicParameters*>(
      &::xsproto::perception::_ExtrinsicParameters_default_instance_);
}
inline ::xsproto::perception::ExtrinsicParameters* MonoCameraData::release_extrinsic_params() {
  // @@protoc_insertion_point(field_release:xsproto.perception.MonoCameraData.extrinsic_params)
  
  ::xsproto::perception::ExtrinsicParameters* temp = extrinsic_params_;
  extrinsic_params_ = NULL;
  return temp;
}
inline ::xsproto::perception::ExtrinsicParameters* MonoCameraData::mutable_extrinsic_params() {
  
  if (extrinsic_params_ == NULL) {
    extrinsic_params_ = new ::xsproto::perception::ExtrinsicParameters;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.MonoCameraData.extrinsic_params)
  return extrinsic_params_;
}
inline void MonoCameraData::set_allocated_extrinsic_params(::xsproto::perception::ExtrinsicParameters* extrinsic_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(extrinsic_params_);
  }
  if (extrinsic_params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      extrinsic_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, extrinsic_params, submessage_arena);
    }
    
  } else {
    
  }
  extrinsic_params_ = extrinsic_params;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.MonoCameraData.extrinsic_params)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace xsproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xsproto::perception::LenMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::perception::LenMode>() {
  return ::xsproto::perception::LenMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2fmono_5fcamera_5fdata_2eproto__INCLUDED
