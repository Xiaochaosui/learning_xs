// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/lidar_position_forfusion.proto

#ifndef PROTOBUF_perception_2flidar_5fposition_5fforfusion_2eproto__INCLUDED
#define PROTOBUF_perception_2flidar_5fposition_5fforfusion_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_perception_2flidar_5fposition_5fforfusion_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLidarPositionForFusionImpl();
void InitDefaultsLidarPositionForFusion();
inline void InitDefaults() {
  InitDefaultsLidarPositionForFusion();
}
}  // namespace protobuf_perception_2flidar_5fposition_5fforfusion_2eproto
namespace xsproto {
namespace perception {
class LidarPositionForFusion;
class LidarPositionForFusionDefaultTypeInternal;
extern LidarPositionForFusionDefaultTypeInternal _LidarPositionForFusion_default_instance_;
}  // namespace perception
}  // namespace xsproto
namespace xsproto {
namespace perception {

// ===================================================================

class LidarPositionForFusion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.LidarPositionForFusion) */ {
 public:
  LidarPositionForFusion();
  virtual ~LidarPositionForFusion();

  LidarPositionForFusion(const LidarPositionForFusion& from);

  inline LidarPositionForFusion& operator=(const LidarPositionForFusion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LidarPositionForFusion(LidarPositionForFusion&& from) noexcept
    : LidarPositionForFusion() {
    *this = ::std::move(from);
  }

  inline LidarPositionForFusion& operator=(LidarPositionForFusion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LidarPositionForFusion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarPositionForFusion* internal_default_instance() {
    return reinterpret_cast<const LidarPositionForFusion*>(
               &_LidarPositionForFusion_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LidarPositionForFusion* other);
  friend void swap(LidarPositionForFusion& a, LidarPositionForFusion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LidarPositionForFusion* New() const PROTOBUF_FINAL { return New(NULL); }

  LidarPositionForFusion* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LidarPositionForFusion& from);
  void MergeFrom(const LidarPositionForFusion& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LidarPositionForFusion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // double global_x = 2;
  void clear_global_x();
  static const int kGlobalXFieldNumber = 2;
  double global_x() const;
  void set_global_x(double value);

  // double global_y = 3;
  void clear_global_y();
  static const int kGlobalYFieldNumber = 3;
  double global_y() const;
  void set_global_y(double value);

  // double azimuth = 4;
  void clear_azimuth();
  static const int kAzimuthFieldNumber = 4;
  double azimuth() const;
  void set_azimuth(double value);

  // double latitude = 5;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 5;
  double latitude() const;
  void set_latitude(double value);

  // double longitude = 6;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 6;
  double longitude() const;
  void set_longitude(double value);

  // double height = 7;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  double height() const;
  void set_height(double value);

  // double roll = 9;
  void clear_roll();
  static const int kRollFieldNumber = 9;
  double roll() const;
  void set_roll(double value);

  // double pitch = 10;
  void clear_pitch();
  static const int kPitchFieldNumber = 10;
  double pitch() const;
  void set_pitch(double value);

  // double score = 11;
  void clear_score();
  static const int kScoreFieldNumber = 11;
  double score() const;
  void set_score(double value);

  // sint32 env_state_warning = 12;
  void clear_env_state_warning();
  static const int kEnvStateWarningFieldNumber = 12;
  ::google::protobuf::int32 env_state_warning() const;
  void set_env_state_warning(::google::protobuf::int32 value);

  // bool work_well = 8;
  void clear_work_well();
  static const int kWorkWellFieldNumber = 8;
  bool work_well() const;
  void set_work_well(bool value);

  // bool request_init = 18;
  void clear_request_init();
  static const int kRequestInitFieldNumber = 18;
  bool request_init() const;
  void set_request_init(bool value);

  // double x = 13;
  void clear_x();
  static const int kXFieldNumber = 13;
  double x() const;
  void set_x(double value);

  // double y = 14;
  void clear_y();
  static const int kYFieldNumber = 14;
  double y() const;
  void set_y(double value);

  // double z = 15;
  void clear_z();
  static const int kZFieldNumber = 15;
  double z() const;
  void set_z(double value);

  // double yaw = 16;
  void clear_yaw();
  static const int kYawFieldNumber = 16;
  double yaw() const;
  void set_yaw(double value);

  // double Alltime = 17;
  void clear_alltime();
  static const int kAlltimeFieldNumber = 17;
  double alltime() const;
  void set_alltime(double value);

  // sint32 conti_flag_before = 19;
  void clear_conti_flag_before();
  static const int kContiFlagBeforeFieldNumber = 19;
  ::google::protobuf::int32 conti_flag_before() const;
  void set_conti_flag_before(::google::protobuf::int32 value);

  // sint32 conti_flag_after = 20;
  void clear_conti_flag_after();
  static const int kContiFlagAfterFieldNumber = 20;
  ::google::protobuf::int32 conti_flag_after() const;
  void set_conti_flag_after(::google::protobuf::int32 value);

  // sint32 cov_jump = 21;
  void clear_cov_jump();
  static const int kCovJumpFieldNumber = 21;
  ::google::protobuf::int32 cov_jump() const;
  void set_cov_jump(::google::protobuf::int32 value);

  // sint32 degenerate_axis = 22;
  void clear_degenerate_axis();
  static const int kDegenerateAxisFieldNumber = 22;
  ::google::protobuf::int32 degenerate_axis() const;
  void set_degenerate_axis(::google::protobuf::int32 value);

  // double cov_x = 23;
  void clear_cov_x();
  static const int kCovXFieldNumber = 23;
  double cov_x() const;
  void set_cov_x(double value);

  // double cov_y = 24;
  void clear_cov_y();
  static const int kCovYFieldNumber = 24;
  double cov_y() const;
  void set_cov_y(double value);

  // double cov_z = 25;
  void clear_cov_z();
  static const int kCovZFieldNumber = 25;
  double cov_z() const;
  void set_cov_z(double value);

  // double cov_yaw = 26;
  void clear_cov_yaw();
  static const int kCovYawFieldNumber = 26;
  double cov_yaw() const;
  void set_cov_yaw(double value);

  // sint32 basex = 27;
  void clear_basex();
  static const int kBasexFieldNumber = 27;
  ::google::protobuf::int32 basex() const;
  void set_basex(::google::protobuf::int32 value);

  // sint32 basey = 28;
  void clear_basey();
  static const int kBaseyFieldNumber = 28;
  ::google::protobuf::int32 basey() const;
  void set_basey(::google::protobuf::int32 value);

  // sint32 map_switch = 29;
  void clear_map_switch();
  static const int kMapSwitchFieldNumber = 29;
  ::google::protobuf::int32 map_switch() const;
  void set_map_switch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.perception.LidarPositionForFusion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::xsproto::base::Header* header_;
  double global_x_;
  double global_y_;
  double azimuth_;
  double latitude_;
  double longitude_;
  double height_;
  double roll_;
  double pitch_;
  double score_;
  ::google::protobuf::int32 env_state_warning_;
  bool work_well_;
  bool request_init_;
  double x_;
  double y_;
  double z_;
  double yaw_;
  double alltime_;
  ::google::protobuf::int32 conti_flag_before_;
  ::google::protobuf::int32 conti_flag_after_;
  ::google::protobuf::int32 cov_jump_;
  ::google::protobuf::int32 degenerate_axis_;
  double cov_x_;
  double cov_y_;
  double cov_z_;
  double cov_yaw_;
  ::google::protobuf::int32 basex_;
  ::google::protobuf::int32 basey_;
  ::google::protobuf::int32 map_switch_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2flidar_5fposition_5fforfusion_2eproto::TableStruct;
  friend void ::protobuf_perception_2flidar_5fposition_5fforfusion_2eproto::InitDefaultsLidarPositionForFusionImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LidarPositionForFusion

// .xsproto.base.Header header = 1;
inline bool LidarPositionForFusion::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& LidarPositionForFusion::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* LidarPositionForFusion::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.perception.LidarPositionForFusion.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* LidarPositionForFusion::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.LidarPositionForFusion.header)
  return header_;
}
inline void LidarPositionForFusion::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.LidarPositionForFusion.header)
}

// double global_x = 2;
inline void LidarPositionForFusion::clear_global_x() {
  global_x_ = 0;
}
inline double LidarPositionForFusion::global_x() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.global_x)
  return global_x_;
}
inline void LidarPositionForFusion::set_global_x(double value) {
  
  global_x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.global_x)
}

// double global_y = 3;
inline void LidarPositionForFusion::clear_global_y() {
  global_y_ = 0;
}
inline double LidarPositionForFusion::global_y() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.global_y)
  return global_y_;
}
inline void LidarPositionForFusion::set_global_y(double value) {
  
  global_y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.global_y)
}

// double azimuth = 4;
inline void LidarPositionForFusion::clear_azimuth() {
  azimuth_ = 0;
}
inline double LidarPositionForFusion::azimuth() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.azimuth)
  return azimuth_;
}
inline void LidarPositionForFusion::set_azimuth(double value) {
  
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.azimuth)
}

// double latitude = 5;
inline void LidarPositionForFusion::clear_latitude() {
  latitude_ = 0;
}
inline double LidarPositionForFusion::latitude() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.latitude)
  return latitude_;
}
inline void LidarPositionForFusion::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.latitude)
}

// double longitude = 6;
inline void LidarPositionForFusion::clear_longitude() {
  longitude_ = 0;
}
inline double LidarPositionForFusion::longitude() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.longitude)
  return longitude_;
}
inline void LidarPositionForFusion::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.longitude)
}

// double height = 7;
inline void LidarPositionForFusion::clear_height() {
  height_ = 0;
}
inline double LidarPositionForFusion::height() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.height)
  return height_;
}
inline void LidarPositionForFusion::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.height)
}

// bool work_well = 8;
inline void LidarPositionForFusion::clear_work_well() {
  work_well_ = false;
}
inline bool LidarPositionForFusion::work_well() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.work_well)
  return work_well_;
}
inline void LidarPositionForFusion::set_work_well(bool value) {
  
  work_well_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.work_well)
}

// double roll = 9;
inline void LidarPositionForFusion::clear_roll() {
  roll_ = 0;
}
inline double LidarPositionForFusion::roll() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.roll)
  return roll_;
}
inline void LidarPositionForFusion::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.roll)
}

// double pitch = 10;
inline void LidarPositionForFusion::clear_pitch() {
  pitch_ = 0;
}
inline double LidarPositionForFusion::pitch() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.pitch)
  return pitch_;
}
inline void LidarPositionForFusion::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.pitch)
}

// double score = 11;
inline void LidarPositionForFusion::clear_score() {
  score_ = 0;
}
inline double LidarPositionForFusion::score() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.score)
  return score_;
}
inline void LidarPositionForFusion::set_score(double value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.score)
}

// sint32 env_state_warning = 12;
inline void LidarPositionForFusion::clear_env_state_warning() {
  env_state_warning_ = 0;
}
inline ::google::protobuf::int32 LidarPositionForFusion::env_state_warning() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.env_state_warning)
  return env_state_warning_;
}
inline void LidarPositionForFusion::set_env_state_warning(::google::protobuf::int32 value) {
  
  env_state_warning_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.env_state_warning)
}

// double x = 13;
inline void LidarPositionForFusion::clear_x() {
  x_ = 0;
}
inline double LidarPositionForFusion::x() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.x)
  return x_;
}
inline void LidarPositionForFusion::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.x)
}

// double y = 14;
inline void LidarPositionForFusion::clear_y() {
  y_ = 0;
}
inline double LidarPositionForFusion::y() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.y)
  return y_;
}
inline void LidarPositionForFusion::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.y)
}

// double z = 15;
inline void LidarPositionForFusion::clear_z() {
  z_ = 0;
}
inline double LidarPositionForFusion::z() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.z)
  return z_;
}
inline void LidarPositionForFusion::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.z)
}

// double yaw = 16;
inline void LidarPositionForFusion::clear_yaw() {
  yaw_ = 0;
}
inline double LidarPositionForFusion::yaw() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.yaw)
  return yaw_;
}
inline void LidarPositionForFusion::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.yaw)
}

// double Alltime = 17;
inline void LidarPositionForFusion::clear_alltime() {
  alltime_ = 0;
}
inline double LidarPositionForFusion::alltime() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.Alltime)
  return alltime_;
}
inline void LidarPositionForFusion::set_alltime(double value) {
  
  alltime_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.Alltime)
}

// bool request_init = 18;
inline void LidarPositionForFusion::clear_request_init() {
  request_init_ = false;
}
inline bool LidarPositionForFusion::request_init() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.request_init)
  return request_init_;
}
inline void LidarPositionForFusion::set_request_init(bool value) {
  
  request_init_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.request_init)
}

// sint32 conti_flag_before = 19;
inline void LidarPositionForFusion::clear_conti_flag_before() {
  conti_flag_before_ = 0;
}
inline ::google::protobuf::int32 LidarPositionForFusion::conti_flag_before() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.conti_flag_before)
  return conti_flag_before_;
}
inline void LidarPositionForFusion::set_conti_flag_before(::google::protobuf::int32 value) {
  
  conti_flag_before_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.conti_flag_before)
}

// sint32 conti_flag_after = 20;
inline void LidarPositionForFusion::clear_conti_flag_after() {
  conti_flag_after_ = 0;
}
inline ::google::protobuf::int32 LidarPositionForFusion::conti_flag_after() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.conti_flag_after)
  return conti_flag_after_;
}
inline void LidarPositionForFusion::set_conti_flag_after(::google::protobuf::int32 value) {
  
  conti_flag_after_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.conti_flag_after)
}

// sint32 cov_jump = 21;
inline void LidarPositionForFusion::clear_cov_jump() {
  cov_jump_ = 0;
}
inline ::google::protobuf::int32 LidarPositionForFusion::cov_jump() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.cov_jump)
  return cov_jump_;
}
inline void LidarPositionForFusion::set_cov_jump(::google::protobuf::int32 value) {
  
  cov_jump_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.cov_jump)
}

// sint32 degenerate_axis = 22;
inline void LidarPositionForFusion::clear_degenerate_axis() {
  degenerate_axis_ = 0;
}
inline ::google::protobuf::int32 LidarPositionForFusion::degenerate_axis() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.degenerate_axis)
  return degenerate_axis_;
}
inline void LidarPositionForFusion::set_degenerate_axis(::google::protobuf::int32 value) {
  
  degenerate_axis_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.degenerate_axis)
}

// double cov_x = 23;
inline void LidarPositionForFusion::clear_cov_x() {
  cov_x_ = 0;
}
inline double LidarPositionForFusion::cov_x() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.cov_x)
  return cov_x_;
}
inline void LidarPositionForFusion::set_cov_x(double value) {
  
  cov_x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.cov_x)
}

// double cov_y = 24;
inline void LidarPositionForFusion::clear_cov_y() {
  cov_y_ = 0;
}
inline double LidarPositionForFusion::cov_y() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.cov_y)
  return cov_y_;
}
inline void LidarPositionForFusion::set_cov_y(double value) {
  
  cov_y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.cov_y)
}

// double cov_z = 25;
inline void LidarPositionForFusion::clear_cov_z() {
  cov_z_ = 0;
}
inline double LidarPositionForFusion::cov_z() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.cov_z)
  return cov_z_;
}
inline void LidarPositionForFusion::set_cov_z(double value) {
  
  cov_z_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.cov_z)
}

// double cov_yaw = 26;
inline void LidarPositionForFusion::clear_cov_yaw() {
  cov_yaw_ = 0;
}
inline double LidarPositionForFusion::cov_yaw() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.cov_yaw)
  return cov_yaw_;
}
inline void LidarPositionForFusion::set_cov_yaw(double value) {
  
  cov_yaw_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.cov_yaw)
}

// sint32 basex = 27;
inline void LidarPositionForFusion::clear_basex() {
  basex_ = 0;
}
inline ::google::protobuf::int32 LidarPositionForFusion::basex() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.basex)
  return basex_;
}
inline void LidarPositionForFusion::set_basex(::google::protobuf::int32 value) {
  
  basex_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.basex)
}

// sint32 basey = 28;
inline void LidarPositionForFusion::clear_basey() {
  basey_ = 0;
}
inline ::google::protobuf::int32 LidarPositionForFusion::basey() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.basey)
  return basey_;
}
inline void LidarPositionForFusion::set_basey(::google::protobuf::int32 value) {
  
  basey_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.basey)
}

// sint32 map_switch = 29;
inline void LidarPositionForFusion::clear_map_switch() {
  map_switch_ = 0;
}
inline ::google::protobuf::int32 LidarPositionForFusion::map_switch() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.LidarPositionForFusion.map_switch)
  return map_switch_;
}
inline void LidarPositionForFusion::set_map_switch(::google::protobuf::int32 value) {
  
  map_switch_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.LidarPositionForFusion.map_switch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2flidar_5fposition_5fforfusion_2eproto__INCLUDED
