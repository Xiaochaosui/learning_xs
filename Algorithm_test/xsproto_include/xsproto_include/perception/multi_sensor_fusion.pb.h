// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/multi_sensor_fusion.proto

#ifndef PROTOBUF_perception_2fmulti_5fsensor_5ffusion_2eproto__INCLUDED
#define PROTOBUF_perception_2fmulti_5fsensor_5ffusion_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
#include "perception/traffic_light_info.pb.h"
#include "perception/perception_common.pb.h"
#include "perception/perception_object_info.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_perception_2fmulti_5fsensor_5ffusion_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMultiSensorFusionImpl();
void InitDefaultsMultiSensorFusion();
inline void InitDefaults() {
  InitDefaultsMultiSensorFusion();
}
}  // namespace protobuf_perception_2fmulti_5fsensor_5ffusion_2eproto
namespace xsproto {
namespace perception {
class MultiSensorFusion;
class MultiSensorFusionDefaultTypeInternal;
extern MultiSensorFusionDefaultTypeInternal _MultiSensorFusion_default_instance_;
}  // namespace perception
}  // namespace xsproto
namespace xsproto {
namespace perception {

// ===================================================================

class MultiSensorFusion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.MultiSensorFusion) */ {
 public:
  MultiSensorFusion();
  virtual ~MultiSensorFusion();

  MultiSensorFusion(const MultiSensorFusion& from);

  inline MultiSensorFusion& operator=(const MultiSensorFusion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultiSensorFusion(MultiSensorFusion&& from) noexcept
    : MultiSensorFusion() {
    *this = ::std::move(from);
  }

  inline MultiSensorFusion& operator=(MultiSensorFusion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiSensorFusion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiSensorFusion* internal_default_instance() {
    return reinterpret_cast<const MultiSensorFusion*>(
               &_MultiSensorFusion_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MultiSensorFusion* other);
  friend void swap(MultiSensorFusion& a, MultiSensorFusion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultiSensorFusion* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiSensorFusion* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiSensorFusion& from);
  void MergeFrom(const MultiSensorFusion& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiSensorFusion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xsproto.perception.PerceptionObject labeled_objects = 2;
  int labeled_objects_size() const;
  void clear_labeled_objects();
  static const int kLabeledObjectsFieldNumber = 2;
  const ::xsproto::perception::PerceptionObject& labeled_objects(int index) const;
  ::xsproto::perception::PerceptionObject* mutable_labeled_objects(int index);
  ::xsproto::perception::PerceptionObject* add_labeled_objects();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject >*
      mutable_labeled_objects();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject >&
      labeled_objects() const;

  // repeated .xsproto.perception.PerceptionObject robot_objects = 3;
  int robot_objects_size() const;
  void clear_robot_objects();
  static const int kRobotObjectsFieldNumber = 3;
  const ::xsproto::perception::PerceptionObject& robot_objects(int index) const;
  ::xsproto::perception::PerceptionObject* mutable_robot_objects(int index);
  ::xsproto::perception::PerceptionObject* add_robot_objects();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject >*
      mutable_robot_objects();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject >&
      robot_objects() const;

  // repeated .xsproto.perception.PerceptionObject trailer_objects = 4;
  int trailer_objects_size() const;
  void clear_trailer_objects();
  static const int kTrailerObjectsFieldNumber = 4;
  const ::xsproto::perception::PerceptionObject& trailer_objects(int index) const;
  ::xsproto::perception::PerceptionObject* mutable_trailer_objects(int index);
  ::xsproto::perception::PerceptionObject* add_trailer_objects();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject >*
      mutable_trailer_objects();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject >&
      trailer_objects() const;

  // repeated .xsproto.perception.StaticObstacle obstacle_areas = 5;
  int obstacle_areas_size() const;
  void clear_obstacle_areas();
  static const int kObstacleAreasFieldNumber = 5;
  const ::xsproto::perception::StaticObstacle& obstacle_areas(int index) const;
  ::xsproto::perception::StaticObstacle* mutable_obstacle_areas(int index);
  ::xsproto::perception::StaticObstacle* add_obstacle_areas();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::StaticObstacle >*
      mutable_obstacle_areas();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::StaticObstacle >&
      obstacle_areas() const;

  // repeated .xsproto.perception.Point2D obstacle_2d_rasters = 6;
  int obstacle_2d_rasters_size() const;
  void clear_obstacle_2d_rasters();
  static const int kObstacle2DRastersFieldNumber = 6;
  const ::xsproto::perception::Point2D& obstacle_2d_rasters(int index) const;
  ::xsproto::perception::Point2D* mutable_obstacle_2d_rasters(int index);
  ::xsproto::perception::Point2D* add_obstacle_2d_rasters();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point2D >*
      mutable_obstacle_2d_rasters();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point2D >&
      obstacle_2d_rasters() const;

  // repeated .xsproto.perception.Point3D obstacle_3d_voxels = 7;
  int obstacle_3d_voxels_size() const;
  void clear_obstacle_3d_voxels();
  static const int kObstacle3DVoxelsFieldNumber = 7;
  const ::xsproto::perception::Point3D& obstacle_3d_voxels(int index) const;
  ::xsproto::perception::Point3D* mutable_obstacle_3d_voxels(int index);
  ::xsproto::perception::Point3D* add_obstacle_3d_voxels();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point3D >*
      mutable_obstacle_3d_voxels();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point3D >&
      obstacle_3d_voxels() const;

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // .xsproto.perception.TrafficLight traffic_light_info = 9;
  bool has_traffic_light_info() const;
  void clear_traffic_light_info();
  static const int kTrafficLightInfoFieldNumber = 9;
  const ::xsproto::perception::TrafficLight& traffic_light_info() const;
  ::xsproto::perception::TrafficLight* release_traffic_light_info();
  ::xsproto::perception::TrafficLight* mutable_traffic_light_info();
  void set_allocated_traffic_light_info(::xsproto::perception::TrafficLight* traffic_light_info);

  // int32 traffic_light_num = 8;
  void clear_traffic_light_num();
  static const int kTrafficLightNumFieldNumber = 8;
  ::google::protobuf::int32 traffic_light_num() const;
  void set_traffic_light_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.perception.MultiSensorFusion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject > labeled_objects_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject > robot_objects_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject > trailer_objects_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::StaticObstacle > obstacle_areas_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point2D > obstacle_2d_rasters_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point3D > obstacle_3d_voxels_;
  ::xsproto::base::Header* header_;
  ::xsproto::perception::TrafficLight* traffic_light_info_;
  ::google::protobuf::int32 traffic_light_num_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2fmulti_5fsensor_5ffusion_2eproto::TableStruct;
  friend void ::protobuf_perception_2fmulti_5fsensor_5ffusion_2eproto::InitDefaultsMultiSensorFusionImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MultiSensorFusion

// .xsproto.base.Header header = 1;
inline bool MultiSensorFusion::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& MultiSensorFusion::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.perception.MultiSensorFusion.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* MultiSensorFusion::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.perception.MultiSensorFusion.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* MultiSensorFusion::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.MultiSensorFusion.header)
  return header_;
}
inline void MultiSensorFusion::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.MultiSensorFusion.header)
}

// repeated .xsproto.perception.PerceptionObject labeled_objects = 2;
inline int MultiSensorFusion::labeled_objects_size() const {
  return labeled_objects_.size();
}
inline const ::xsproto::perception::PerceptionObject& MultiSensorFusion::labeled_objects(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MultiSensorFusion.labeled_objects)
  return labeled_objects_.Get(index);
}
inline ::xsproto::perception::PerceptionObject* MultiSensorFusion::mutable_labeled_objects(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.MultiSensorFusion.labeled_objects)
  return labeled_objects_.Mutable(index);
}
inline ::xsproto::perception::PerceptionObject* MultiSensorFusion::add_labeled_objects() {
  // @@protoc_insertion_point(field_add:xsproto.perception.MultiSensorFusion.labeled_objects)
  return labeled_objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject >*
MultiSensorFusion::mutable_labeled_objects() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.MultiSensorFusion.labeled_objects)
  return &labeled_objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject >&
MultiSensorFusion::labeled_objects() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.MultiSensorFusion.labeled_objects)
  return labeled_objects_;
}

// repeated .xsproto.perception.PerceptionObject robot_objects = 3;
inline int MultiSensorFusion::robot_objects_size() const {
  return robot_objects_.size();
}
inline const ::xsproto::perception::PerceptionObject& MultiSensorFusion::robot_objects(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MultiSensorFusion.robot_objects)
  return robot_objects_.Get(index);
}
inline ::xsproto::perception::PerceptionObject* MultiSensorFusion::mutable_robot_objects(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.MultiSensorFusion.robot_objects)
  return robot_objects_.Mutable(index);
}
inline ::xsproto::perception::PerceptionObject* MultiSensorFusion::add_robot_objects() {
  // @@protoc_insertion_point(field_add:xsproto.perception.MultiSensorFusion.robot_objects)
  return robot_objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject >*
MultiSensorFusion::mutable_robot_objects() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.MultiSensorFusion.robot_objects)
  return &robot_objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject >&
MultiSensorFusion::robot_objects() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.MultiSensorFusion.robot_objects)
  return robot_objects_;
}

// repeated .xsproto.perception.PerceptionObject trailer_objects = 4;
inline int MultiSensorFusion::trailer_objects_size() const {
  return trailer_objects_.size();
}
inline const ::xsproto::perception::PerceptionObject& MultiSensorFusion::trailer_objects(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MultiSensorFusion.trailer_objects)
  return trailer_objects_.Get(index);
}
inline ::xsproto::perception::PerceptionObject* MultiSensorFusion::mutable_trailer_objects(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.MultiSensorFusion.trailer_objects)
  return trailer_objects_.Mutable(index);
}
inline ::xsproto::perception::PerceptionObject* MultiSensorFusion::add_trailer_objects() {
  // @@protoc_insertion_point(field_add:xsproto.perception.MultiSensorFusion.trailer_objects)
  return trailer_objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject >*
MultiSensorFusion::mutable_trailer_objects() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.MultiSensorFusion.trailer_objects)
  return &trailer_objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PerceptionObject >&
MultiSensorFusion::trailer_objects() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.MultiSensorFusion.trailer_objects)
  return trailer_objects_;
}

// repeated .xsproto.perception.StaticObstacle obstacle_areas = 5;
inline int MultiSensorFusion::obstacle_areas_size() const {
  return obstacle_areas_.size();
}
inline const ::xsproto::perception::StaticObstacle& MultiSensorFusion::obstacle_areas(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MultiSensorFusion.obstacle_areas)
  return obstacle_areas_.Get(index);
}
inline ::xsproto::perception::StaticObstacle* MultiSensorFusion::mutable_obstacle_areas(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.MultiSensorFusion.obstacle_areas)
  return obstacle_areas_.Mutable(index);
}
inline ::xsproto::perception::StaticObstacle* MultiSensorFusion::add_obstacle_areas() {
  // @@protoc_insertion_point(field_add:xsproto.perception.MultiSensorFusion.obstacle_areas)
  return obstacle_areas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::StaticObstacle >*
MultiSensorFusion::mutable_obstacle_areas() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.MultiSensorFusion.obstacle_areas)
  return &obstacle_areas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::StaticObstacle >&
MultiSensorFusion::obstacle_areas() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.MultiSensorFusion.obstacle_areas)
  return obstacle_areas_;
}

// repeated .xsproto.perception.Point2D obstacle_2d_rasters = 6;
inline int MultiSensorFusion::obstacle_2d_rasters_size() const {
  return obstacle_2d_rasters_.size();
}
inline const ::xsproto::perception::Point2D& MultiSensorFusion::obstacle_2d_rasters(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MultiSensorFusion.obstacle_2d_rasters)
  return obstacle_2d_rasters_.Get(index);
}
inline ::xsproto::perception::Point2D* MultiSensorFusion::mutable_obstacle_2d_rasters(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.MultiSensorFusion.obstacle_2d_rasters)
  return obstacle_2d_rasters_.Mutable(index);
}
inline ::xsproto::perception::Point2D* MultiSensorFusion::add_obstacle_2d_rasters() {
  // @@protoc_insertion_point(field_add:xsproto.perception.MultiSensorFusion.obstacle_2d_rasters)
  return obstacle_2d_rasters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point2D >*
MultiSensorFusion::mutable_obstacle_2d_rasters() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.MultiSensorFusion.obstacle_2d_rasters)
  return &obstacle_2d_rasters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point2D >&
MultiSensorFusion::obstacle_2d_rasters() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.MultiSensorFusion.obstacle_2d_rasters)
  return obstacle_2d_rasters_;
}

// repeated .xsproto.perception.Point3D obstacle_3d_voxels = 7;
inline int MultiSensorFusion::obstacle_3d_voxels_size() const {
  return obstacle_3d_voxels_.size();
}
inline const ::xsproto::perception::Point3D& MultiSensorFusion::obstacle_3d_voxels(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MultiSensorFusion.obstacle_3d_voxels)
  return obstacle_3d_voxels_.Get(index);
}
inline ::xsproto::perception::Point3D* MultiSensorFusion::mutable_obstacle_3d_voxels(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.MultiSensorFusion.obstacle_3d_voxels)
  return obstacle_3d_voxels_.Mutable(index);
}
inline ::xsproto::perception::Point3D* MultiSensorFusion::add_obstacle_3d_voxels() {
  // @@protoc_insertion_point(field_add:xsproto.perception.MultiSensorFusion.obstacle_3d_voxels)
  return obstacle_3d_voxels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point3D >*
MultiSensorFusion::mutable_obstacle_3d_voxels() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.MultiSensorFusion.obstacle_3d_voxels)
  return &obstacle_3d_voxels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::Point3D >&
MultiSensorFusion::obstacle_3d_voxels() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.MultiSensorFusion.obstacle_3d_voxels)
  return obstacle_3d_voxels_;
}

// int32 traffic_light_num = 8;
inline void MultiSensorFusion::clear_traffic_light_num() {
  traffic_light_num_ = 0;
}
inline ::google::protobuf::int32 MultiSensorFusion::traffic_light_num() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.MultiSensorFusion.traffic_light_num)
  return traffic_light_num_;
}
inline void MultiSensorFusion::set_traffic_light_num(::google::protobuf::int32 value) {
  
  traffic_light_num_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.MultiSensorFusion.traffic_light_num)
}

// .xsproto.perception.TrafficLight traffic_light_info = 9;
inline bool MultiSensorFusion::has_traffic_light_info() const {
  return this != internal_default_instance() && traffic_light_info_ != NULL;
}
inline const ::xsproto::perception::TrafficLight& MultiSensorFusion::traffic_light_info() const {
  const ::xsproto::perception::TrafficLight* p = traffic_light_info_;
  // @@protoc_insertion_point(field_get:xsproto.perception.MultiSensorFusion.traffic_light_info)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::perception::TrafficLight*>(
      &::xsproto::perception::_TrafficLight_default_instance_);
}
inline ::xsproto::perception::TrafficLight* MultiSensorFusion::release_traffic_light_info() {
  // @@protoc_insertion_point(field_release:xsproto.perception.MultiSensorFusion.traffic_light_info)
  
  ::xsproto::perception::TrafficLight* temp = traffic_light_info_;
  traffic_light_info_ = NULL;
  return temp;
}
inline ::xsproto::perception::TrafficLight* MultiSensorFusion::mutable_traffic_light_info() {
  
  if (traffic_light_info_ == NULL) {
    traffic_light_info_ = new ::xsproto::perception::TrafficLight;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.MultiSensorFusion.traffic_light_info)
  return traffic_light_info_;
}
inline void MultiSensorFusion::set_allocated_traffic_light_info(::xsproto::perception::TrafficLight* traffic_light_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(traffic_light_info_);
  }
  if (traffic_light_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      traffic_light_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, traffic_light_info, submessage_arena);
    }
    
  } else {
    
  }
  traffic_light_info_ = traffic_light_info;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.MultiSensorFusion.traffic_light_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2fmulti_5fsensor_5ffusion_2eproto__INCLUDED
