// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/vehicle_status.proto

#ifndef PROTOBUF_base_2fvehicle_5fstatus_2eproto__INCLUDED
#define PROTOBUF_base_2fvehicle_5fstatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_base_2fvehicle_5fstatus_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsVector3DImpl();
void InitDefaultsVector3D();
void InitDefaultsVehicleStatus_ImuImpl();
void InitDefaultsVehicleStatus_Imu();
void InitDefaultsVehicleStatus_LogicImpl();
void InitDefaultsVehicleStatus_Logic();
void InitDefaultsVehicleStatus_BatteryImpl();
void InitDefaultsVehicleStatus_Battery();
void InitDefaultsVehicleStatus_WheelImpl();
void InitDefaultsVehicleStatus_Wheel();
void InitDefaultsVehicleStatusImpl();
void InitDefaultsVehicleStatus();
inline void InitDefaults() {
  InitDefaultsVector3D();
  InitDefaultsVehicleStatus_Imu();
  InitDefaultsVehicleStatus_Logic();
  InitDefaultsVehicleStatus_Battery();
  InitDefaultsVehicleStatus_Wheel();
  InitDefaultsVehicleStatus();
}
}  // namespace protobuf_base_2fvehicle_5fstatus_2eproto
namespace xsproto {
namespace base {
class Vector3D;
class Vector3DDefaultTypeInternal;
extern Vector3DDefaultTypeInternal _Vector3D_default_instance_;
class VehicleStatus;
class VehicleStatusDefaultTypeInternal;
extern VehicleStatusDefaultTypeInternal _VehicleStatus_default_instance_;
class VehicleStatus_Battery;
class VehicleStatus_BatteryDefaultTypeInternal;
extern VehicleStatus_BatteryDefaultTypeInternal _VehicleStatus_Battery_default_instance_;
class VehicleStatus_Imu;
class VehicleStatus_ImuDefaultTypeInternal;
extern VehicleStatus_ImuDefaultTypeInternal _VehicleStatus_Imu_default_instance_;
class VehicleStatus_Logic;
class VehicleStatus_LogicDefaultTypeInternal;
extern VehicleStatus_LogicDefaultTypeInternal _VehicleStatus_Logic_default_instance_;
class VehicleStatus_Wheel;
class VehicleStatus_WheelDefaultTypeInternal;
extern VehicleStatus_WheelDefaultTypeInternal _VehicleStatus_Wheel_default_instance_;
}  // namespace base
}  // namespace xsproto
namespace xsproto {
namespace base {

enum VehicleStatus_Imu_Mode {
  VehicleStatus_Imu_Mode_IMU_MODE_AXIS_0 = 0,
  VehicleStatus_Imu_Mode_IMU_MODE_AXIS_3 = 3,
  VehicleStatus_Imu_Mode_IMU_MODE_AXIS_6 = 6,
  VehicleStatus_Imu_Mode_IMU_MODE_AXIS_9 = 9,
  VehicleStatus_Imu_Mode_IMU_MODE_AXIS_12 = 12,
  VehicleStatus_Imu_Mode_VehicleStatus_Imu_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VehicleStatus_Imu_Mode_VehicleStatus_Imu_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VehicleStatus_Imu_Mode_IsValid(int value);
const VehicleStatus_Imu_Mode VehicleStatus_Imu_Mode_Mode_MIN = VehicleStatus_Imu_Mode_IMU_MODE_AXIS_0;
const VehicleStatus_Imu_Mode VehicleStatus_Imu_Mode_Mode_MAX = VehicleStatus_Imu_Mode_IMU_MODE_AXIS_12;
const int VehicleStatus_Imu_Mode_Mode_ARRAYSIZE = VehicleStatus_Imu_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleStatus_Imu_Mode_descriptor();
inline const ::std::string& VehicleStatus_Imu_Mode_Name(VehicleStatus_Imu_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleStatus_Imu_Mode_descriptor(), value);
}
inline bool VehicleStatus_Imu_Mode_Parse(
    const ::std::string& name, VehicleStatus_Imu_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleStatus_Imu_Mode>(
    VehicleStatus_Imu_Mode_descriptor(), name, value);
}
enum VehicleStatus_MotionModel {
  VehicleStatus_MotionModel_MOTION_MODEL_NONE = 0,
  VehicleStatus_MotionModel_MOTION_MODEL_DIFF = 1,
  VehicleStatus_MotionModel_MOTION_MODEL_ACKERMAN = 2,
  VehicleStatus_MotionModel_MOTION_MODEL_TURN_IN_PLACE = 3,
  VehicleStatus_MotionModel_MOTION_MODEL_FOUR_WHEEL_FOUR_TURN = 4,
  VehicleStatus_MotionModel_VehicleStatus_MotionModel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VehicleStatus_MotionModel_VehicleStatus_MotionModel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VehicleStatus_MotionModel_IsValid(int value);
const VehicleStatus_MotionModel VehicleStatus_MotionModel_MotionModel_MIN = VehicleStatus_MotionModel_MOTION_MODEL_NONE;
const VehicleStatus_MotionModel VehicleStatus_MotionModel_MotionModel_MAX = VehicleStatus_MotionModel_MOTION_MODEL_FOUR_WHEEL_FOUR_TURN;
const int VehicleStatus_MotionModel_MotionModel_ARRAYSIZE = VehicleStatus_MotionModel_MotionModel_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleStatus_MotionModel_descriptor();
inline const ::std::string& VehicleStatus_MotionModel_Name(VehicleStatus_MotionModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleStatus_MotionModel_descriptor(), value);
}
inline bool VehicleStatus_MotionModel_Parse(
    const ::std::string& name, VehicleStatus_MotionModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleStatus_MotionModel>(
    VehicleStatus_MotionModel_descriptor(), name, value);
}
enum VehicleStatus_DrivingMode {
  VehicleStatus_DrivingMode_DRIVING_MODE_NONE = 0,
  VehicleStatus_DrivingMode_DRIVING_MODE_JOYSTICK = 1,
  VehicleStatus_DrivingMode_DRIVING_MODE_AUTO = 2,
  VehicleStatus_DrivingMode_DRIVING_MODE_SEMI_AUTO = 3,
  VehicleStatus_DrivingMode_DRIVING_MODE_REMOTE = 4,
  VehicleStatus_DrivingMode_VehicleStatus_DrivingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VehicleStatus_DrivingMode_VehicleStatus_DrivingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VehicleStatus_DrivingMode_IsValid(int value);
const VehicleStatus_DrivingMode VehicleStatus_DrivingMode_DrivingMode_MIN = VehicleStatus_DrivingMode_DRIVING_MODE_NONE;
const VehicleStatus_DrivingMode VehicleStatus_DrivingMode_DrivingMode_MAX = VehicleStatus_DrivingMode_DRIVING_MODE_REMOTE;
const int VehicleStatus_DrivingMode_DrivingMode_ARRAYSIZE = VehicleStatus_DrivingMode_DrivingMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleStatus_DrivingMode_descriptor();
inline const ::std::string& VehicleStatus_DrivingMode_Name(VehicleStatus_DrivingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleStatus_DrivingMode_descriptor(), value);
}
inline bool VehicleStatus_DrivingMode_Parse(
    const ::std::string& name, VehicleStatus_DrivingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleStatus_DrivingMode>(
    VehicleStatus_DrivingMode_descriptor(), name, value);
}
enum VehicleStatus_Gear {
  VehicleStatus_Gear_GEAR_P = 0,
  VehicleStatus_Gear_GEAR_R = 1,
  VehicleStatus_Gear_GEAR_N = 2,
  VehicleStatus_Gear_GEAR_D = 3,
  VehicleStatus_Gear_GEAR_S = 4,
  VehicleStatus_Gear_GEAR_L = 5,
  VehicleStatus_Gear_GEAR_H = 6,
  VehicleStatus_Gear_VehicleStatus_Gear_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VehicleStatus_Gear_VehicleStatus_Gear_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VehicleStatus_Gear_IsValid(int value);
const VehicleStatus_Gear VehicleStatus_Gear_Gear_MIN = VehicleStatus_Gear_GEAR_P;
const VehicleStatus_Gear VehicleStatus_Gear_Gear_MAX = VehicleStatus_Gear_GEAR_H;
const int VehicleStatus_Gear_Gear_ARRAYSIZE = VehicleStatus_Gear_Gear_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleStatus_Gear_descriptor();
inline const ::std::string& VehicleStatus_Gear_Name(VehicleStatus_Gear value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleStatus_Gear_descriptor(), value);
}
inline bool VehicleStatus_Gear_Parse(
    const ::std::string& name, VehicleStatus_Gear* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleStatus_Gear>(
    VehicleStatus_Gear_descriptor(), name, value);
}
enum VehicleStatus_RainLevel {
  VehicleStatus_RainLevel_RAIN_LEVEL_INVALID = 0,
  VehicleStatus_RainLevel_RAIN_LEVEL_NONE = 1,
  VehicleStatus_RainLevel_RAIN_LEVEL_SMALL = 2,
  VehicleStatus_RainLevel_RAIN_LEVEL_MIDDLE = 3,
  VehicleStatus_RainLevel_RAIN_LEVEL_LARGE = 4,
  VehicleStatus_RainLevel_RAIN_LEVEL_STORM = 5,
  VehicleStatus_RainLevel_VehicleStatus_RainLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VehicleStatus_RainLevel_VehicleStatus_RainLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VehicleStatus_RainLevel_IsValid(int value);
const VehicleStatus_RainLevel VehicleStatus_RainLevel_RainLevel_MIN = VehicleStatus_RainLevel_RAIN_LEVEL_INVALID;
const VehicleStatus_RainLevel VehicleStatus_RainLevel_RainLevel_MAX = VehicleStatus_RainLevel_RAIN_LEVEL_STORM;
const int VehicleStatus_RainLevel_RainLevel_ARRAYSIZE = VehicleStatus_RainLevel_RainLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleStatus_RainLevel_descriptor();
inline const ::std::string& VehicleStatus_RainLevel_Name(VehicleStatus_RainLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleStatus_RainLevel_descriptor(), value);
}
inline bool VehicleStatus_RainLevel_Parse(
    const ::std::string& name, VehicleStatus_RainLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleStatus_RainLevel>(
    VehicleStatus_RainLevel_descriptor(), name, value);
}
// ===================================================================

class Vector3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.base.Vector3D) */ {
 public:
  Vector3D();
  virtual ~Vector3D();

  Vector3D(const Vector3D& from);

  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3D(Vector3D&& from) noexcept
    : Vector3D() {
    *this = ::std::move(from);
  }

  inline Vector3D& operator=(Vector3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3D* internal_default_instance() {
    return reinterpret_cast<const Vector3D*>(
               &_Vector3D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Vector3D* other);
  friend void swap(Vector3D& a, Vector3D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3D* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector3D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector3D& from);
  void MergeFrom(const Vector3D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:xsproto.base.Vector3D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2fvehicle_5fstatus_2eproto::TableStruct;
  friend void ::protobuf_base_2fvehicle_5fstatus_2eproto::InitDefaultsVector3DImpl();
};
// -------------------------------------------------------------------

class VehicleStatus_Imu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.base.VehicleStatus.Imu) */ {
 public:
  VehicleStatus_Imu();
  virtual ~VehicleStatus_Imu();

  VehicleStatus_Imu(const VehicleStatus_Imu& from);

  inline VehicleStatus_Imu& operator=(const VehicleStatus_Imu& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleStatus_Imu(VehicleStatus_Imu&& from) noexcept
    : VehicleStatus_Imu() {
    *this = ::std::move(from);
  }

  inline VehicleStatus_Imu& operator=(VehicleStatus_Imu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleStatus_Imu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleStatus_Imu* internal_default_instance() {
    return reinterpret_cast<const VehicleStatus_Imu*>(
               &_VehicleStatus_Imu_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VehicleStatus_Imu* other);
  friend void swap(VehicleStatus_Imu& a, VehicleStatus_Imu& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleStatus_Imu* New() const PROTOBUF_FINAL { return New(NULL); }

  VehicleStatus_Imu* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VehicleStatus_Imu& from);
  void MergeFrom(const VehicleStatus_Imu& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VehicleStatus_Imu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VehicleStatus_Imu_Mode Mode;
  static const Mode IMU_MODE_AXIS_0 =
    VehicleStatus_Imu_Mode_IMU_MODE_AXIS_0;
  static const Mode IMU_MODE_AXIS_3 =
    VehicleStatus_Imu_Mode_IMU_MODE_AXIS_3;
  static const Mode IMU_MODE_AXIS_6 =
    VehicleStatus_Imu_Mode_IMU_MODE_AXIS_6;
  static const Mode IMU_MODE_AXIS_9 =
    VehicleStatus_Imu_Mode_IMU_MODE_AXIS_9;
  static const Mode IMU_MODE_AXIS_12 =
    VehicleStatus_Imu_Mode_IMU_MODE_AXIS_12;
  static inline bool Mode_IsValid(int value) {
    return VehicleStatus_Imu_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    VehicleStatus_Imu_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    VehicleStatus_Imu_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    VehicleStatus_Imu_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return VehicleStatus_Imu_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return VehicleStatus_Imu_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return VehicleStatus_Imu_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .xsproto.base.Vector3D mag = 2;
  bool has_mag() const;
  void clear_mag();
  static const int kMagFieldNumber = 2;
  const ::xsproto::base::Vector3D& mag() const;
  ::xsproto::base::Vector3D* release_mag();
  ::xsproto::base::Vector3D* mutable_mag();
  void set_allocated_mag(::xsproto::base::Vector3D* mag);

  // .xsproto.base.Vector3D gyro = 3;
  bool has_gyro() const;
  void clear_gyro();
  static const int kGyroFieldNumber = 3;
  const ::xsproto::base::Vector3D& gyro() const;
  ::xsproto::base::Vector3D* release_gyro();
  ::xsproto::base::Vector3D* mutable_gyro();
  void set_allocated_gyro(::xsproto::base::Vector3D* gyro);

  // .xsproto.base.Vector3D accel = 4;
  bool has_accel() const;
  void clear_accel();
  static const int kAccelFieldNumber = 4;
  const ::xsproto::base::Vector3D& accel() const;
  ::xsproto::base::Vector3D* release_accel();
  ::xsproto::base::Vector3D* mutable_accel();
  void set_allocated_accel(::xsproto::base::Vector3D* accel);

  // double roll = 5;
  void clear_roll();
  static const int kRollFieldNumber = 5;
  double roll() const;
  void set_roll(double value);

  // double pitch = 6;
  void clear_pitch();
  static const int kPitchFieldNumber = 6;
  double pitch() const;
  void set_pitch(double value);

  // double heading = 7;
  void clear_heading();
  static const int kHeadingFieldNumber = 7;
  double heading() const;
  void set_heading(double value);

  // .xsproto.base.VehicleStatus.Imu.Mode mode = 1;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  ::xsproto::base::VehicleStatus_Imu_Mode mode() const;
  void set_mode(::xsproto::base::VehicleStatus_Imu_Mode value);

  // @@protoc_insertion_point(class_scope:xsproto.base.VehicleStatus.Imu)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::xsproto::base::Vector3D* mag_;
  ::xsproto::base::Vector3D* gyro_;
  ::xsproto::base::Vector3D* accel_;
  double roll_;
  double pitch_;
  double heading_;
  int mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2fvehicle_5fstatus_2eproto::TableStruct;
  friend void ::protobuf_base_2fvehicle_5fstatus_2eproto::InitDefaultsVehicleStatus_ImuImpl();
};
// -------------------------------------------------------------------

class VehicleStatus_Logic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.base.VehicleStatus.Logic) */ {
 public:
  VehicleStatus_Logic();
  virtual ~VehicleStatus_Logic();

  VehicleStatus_Logic(const VehicleStatus_Logic& from);

  inline VehicleStatus_Logic& operator=(const VehicleStatus_Logic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleStatus_Logic(VehicleStatus_Logic&& from) noexcept
    : VehicleStatus_Logic() {
    *this = ::std::move(from);
  }

  inline VehicleStatus_Logic& operator=(VehicleStatus_Logic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleStatus_Logic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleStatus_Logic* internal_default_instance() {
    return reinterpret_cast<const VehicleStatus_Logic*>(
               &_VehicleStatus_Logic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(VehicleStatus_Logic* other);
  friend void swap(VehicleStatus_Logic& a, VehicleStatus_Logic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleStatus_Logic* New() const PROTOBUF_FINAL { return New(NULL); }

  VehicleStatus_Logic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VehicleStatus_Logic& from);
  void MergeFrom(const VehicleStatus_Logic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VehicleStatus_Logic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool pause = 1;
  void clear_pause();
  static const int kPauseFieldNumber = 1;
  bool pause() const;
  void set_pause(bool value);

  // bool bumper = 2;
  void clear_bumper();
  static const int kBumperFieldNumber = 2;
  bool bumper() const;
  void set_bumper(bool value);

  // bool emergency = 3;
  void clear_emergency();
  static const int kEmergencyFieldNumber = 3;
  bool emergency() const;
  void set_emergency(bool value);

  // bool low_beam = 8;
  void clear_low_beam();
  static const int kLowBeamFieldNumber = 8;
  bool low_beam() const;
  void set_low_beam(bool value);

  // bool high_beam = 9;
  void clear_high_beam();
  static const int kHighBeamFieldNumber = 9;
  bool high_beam() const;
  void set_high_beam(bool value);

  // bool turn_left_light = 10;
  void clear_turn_left_light();
  static const int kTurnLeftLightFieldNumber = 10;
  bool turn_left_light() const;
  void set_turn_left_light(bool value);

  // bool turn_right_light = 11;
  void clear_turn_right_light();
  static const int kTurnRightLightFieldNumber = 11;
  bool turn_right_light() const;
  void set_turn_right_light(bool value);

  // bool reversing_light = 12;
  void clear_reversing_light();
  static const int kReversingLightFieldNumber = 12;
  bool reversing_light() const;
  void set_reversing_light(bool value);

  // bool position_light = 13;
  void clear_position_light();
  static const int kPositionLightFieldNumber = 13;
  bool position_light() const;
  void set_position_light(bool value);

  // bool brake_light = 14;
  void clear_brake_light();
  static const int kBrakeLightFieldNumber = 14;
  bool brake_light() const;
  void set_brake_light(bool value);

  // bool fog_light = 15;
  void clear_fog_light();
  static const int kFogLightFieldNumber = 15;
  bool fog_light() const;
  void set_fog_light(bool value);

  // bool horn = 16;
  void clear_horn();
  static const int kHornFieldNumber = 16;
  bool horn() const;
  void set_horn(bool value);

  // bool door = 24;
  void clear_door();
  static const int kDoorFieldNumber = 24;
  bool door() const;
  void set_door(bool value);

  // @@protoc_insertion_point(class_scope:xsproto.base.VehicleStatus.Logic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool pause_;
  bool bumper_;
  bool emergency_;
  bool low_beam_;
  bool high_beam_;
  bool turn_left_light_;
  bool turn_right_light_;
  bool reversing_light_;
  bool position_light_;
  bool brake_light_;
  bool fog_light_;
  bool horn_;
  bool door_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2fvehicle_5fstatus_2eproto::TableStruct;
  friend void ::protobuf_base_2fvehicle_5fstatus_2eproto::InitDefaultsVehicleStatus_LogicImpl();
};
// -------------------------------------------------------------------

class VehicleStatus_Battery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.base.VehicleStatus.Battery) */ {
 public:
  VehicleStatus_Battery();
  virtual ~VehicleStatus_Battery();

  VehicleStatus_Battery(const VehicleStatus_Battery& from);

  inline VehicleStatus_Battery& operator=(const VehicleStatus_Battery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleStatus_Battery(VehicleStatus_Battery&& from) noexcept
    : VehicleStatus_Battery() {
    *this = ::std::move(from);
  }

  inline VehicleStatus_Battery& operator=(VehicleStatus_Battery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleStatus_Battery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleStatus_Battery* internal_default_instance() {
    return reinterpret_cast<const VehicleStatus_Battery*>(
               &_VehicleStatus_Battery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(VehicleStatus_Battery* other);
  friend void swap(VehicleStatus_Battery& a, VehicleStatus_Battery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleStatus_Battery* New() const PROTOBUF_FINAL { return New(NULL); }

  VehicleStatus_Battery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VehicleStatus_Battery& from);
  void MergeFrom(const VehicleStatus_Battery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VehicleStatus_Battery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double soc = 1;
  void clear_soc();
  static const int kSocFieldNumber = 1;
  double soc() const;
  void set_soc(double value);

  // double voltage = 2;
  void clear_voltage();
  static const int kVoltageFieldNumber = 2;
  double voltage() const;
  void set_voltage(double value);

  // double current = 3;
  void clear_current();
  static const int kCurrentFieldNumber = 3;
  double current() const;
  void set_current(double value);

  // double temperature = 4;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 4;
  double temperature() const;
  void set_temperature(double value);

  // bool charging = 5;
  void clear_charging();
  static const int kChargingFieldNumber = 5;
  bool charging() const;
  void set_charging(bool value);

  // bool charger_conn = 6;
  void clear_charger_conn();
  static const int kChargerConnFieldNumber = 6;
  bool charger_conn() const;
  void set_charger_conn(bool value);

  // @@protoc_insertion_point(class_scope:xsproto.base.VehicleStatus.Battery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double soc_;
  double voltage_;
  double current_;
  double temperature_;
  bool charging_;
  bool charger_conn_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2fvehicle_5fstatus_2eproto::TableStruct;
  friend void ::protobuf_base_2fvehicle_5fstatus_2eproto::InitDefaultsVehicleStatus_BatteryImpl();
};
// -------------------------------------------------------------------

class VehicleStatus_Wheel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.base.VehicleStatus.Wheel) */ {
 public:
  VehicleStatus_Wheel();
  virtual ~VehicleStatus_Wheel();

  VehicleStatus_Wheel(const VehicleStatus_Wheel& from);

  inline VehicleStatus_Wheel& operator=(const VehicleStatus_Wheel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleStatus_Wheel(VehicleStatus_Wheel&& from) noexcept
    : VehicleStatus_Wheel() {
    *this = ::std::move(from);
  }

  inline VehicleStatus_Wheel& operator=(VehicleStatus_Wheel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleStatus_Wheel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleStatus_Wheel* internal_default_instance() {
    return reinterpret_cast<const VehicleStatus_Wheel*>(
               &_VehicleStatus_Wheel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(VehicleStatus_Wheel* other);
  friend void swap(VehicleStatus_Wheel& a, VehicleStatus_Wheel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleStatus_Wheel* New() const PROTOBUF_FINAL { return New(NULL); }

  VehicleStatus_Wheel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VehicleStatus_Wheel& from);
  void MergeFrom(const VehicleStatus_Wheel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VehicleStatus_Wheel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double speed = 1;
  void clear_speed();
  static const int kSpeedFieldNumber = 1;
  double speed() const;
  void set_speed(double value);

  // double accel = 2;
  void clear_accel();
  static const int kAccelFieldNumber = 2;
  double accel() const;
  void set_accel(double value);

  // double mileage = 3;
  void clear_mileage();
  static const int kMileageFieldNumber = 3;
  double mileage() const;
  void set_mileage(double value);

  // uint32 pulse = 4;
  void clear_pulse();
  static const int kPulseFieldNumber = 4;
  ::google::protobuf::uint32 pulse() const;
  void set_pulse(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xsproto.base.VehicleStatus.Wheel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double speed_;
  double accel_;
  double mileage_;
  ::google::protobuf::uint32 pulse_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2fvehicle_5fstatus_2eproto::TableStruct;
  friend void ::protobuf_base_2fvehicle_5fstatus_2eproto::InitDefaultsVehicleStatus_WheelImpl();
};
// -------------------------------------------------------------------

class VehicleStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.base.VehicleStatus) */ {
 public:
  VehicleStatus();
  virtual ~VehicleStatus();

  VehicleStatus(const VehicleStatus& from);

  inline VehicleStatus& operator=(const VehicleStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleStatus(VehicleStatus&& from) noexcept
    : VehicleStatus() {
    *this = ::std::move(from);
  }

  inline VehicleStatus& operator=(VehicleStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleStatus* internal_default_instance() {
    return reinterpret_cast<const VehicleStatus*>(
               &_VehicleStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(VehicleStatus* other);
  friend void swap(VehicleStatus& a, VehicleStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  VehicleStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VehicleStatus& from);
  void MergeFrom(const VehicleStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VehicleStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VehicleStatus_Imu Imu;
  typedef VehicleStatus_Logic Logic;
  typedef VehicleStatus_Battery Battery;
  typedef VehicleStatus_Wheel Wheel;

  typedef VehicleStatus_MotionModel MotionModel;
  static const MotionModel MOTION_MODEL_NONE =
    VehicleStatus_MotionModel_MOTION_MODEL_NONE;
  static const MotionModel MOTION_MODEL_DIFF =
    VehicleStatus_MotionModel_MOTION_MODEL_DIFF;
  static const MotionModel MOTION_MODEL_ACKERMAN =
    VehicleStatus_MotionModel_MOTION_MODEL_ACKERMAN;
  static const MotionModel MOTION_MODEL_TURN_IN_PLACE =
    VehicleStatus_MotionModel_MOTION_MODEL_TURN_IN_PLACE;
  static const MotionModel MOTION_MODEL_FOUR_WHEEL_FOUR_TURN =
    VehicleStatus_MotionModel_MOTION_MODEL_FOUR_WHEEL_FOUR_TURN;
  static inline bool MotionModel_IsValid(int value) {
    return VehicleStatus_MotionModel_IsValid(value);
  }
  static const MotionModel MotionModel_MIN =
    VehicleStatus_MotionModel_MotionModel_MIN;
  static const MotionModel MotionModel_MAX =
    VehicleStatus_MotionModel_MotionModel_MAX;
  static const int MotionModel_ARRAYSIZE =
    VehicleStatus_MotionModel_MotionModel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MotionModel_descriptor() {
    return VehicleStatus_MotionModel_descriptor();
  }
  static inline const ::std::string& MotionModel_Name(MotionModel value) {
    return VehicleStatus_MotionModel_Name(value);
  }
  static inline bool MotionModel_Parse(const ::std::string& name,
      MotionModel* value) {
    return VehicleStatus_MotionModel_Parse(name, value);
  }

  typedef VehicleStatus_DrivingMode DrivingMode;
  static const DrivingMode DRIVING_MODE_NONE =
    VehicleStatus_DrivingMode_DRIVING_MODE_NONE;
  static const DrivingMode DRIVING_MODE_JOYSTICK =
    VehicleStatus_DrivingMode_DRIVING_MODE_JOYSTICK;
  static const DrivingMode DRIVING_MODE_AUTO =
    VehicleStatus_DrivingMode_DRIVING_MODE_AUTO;
  static const DrivingMode DRIVING_MODE_SEMI_AUTO =
    VehicleStatus_DrivingMode_DRIVING_MODE_SEMI_AUTO;
  static const DrivingMode DRIVING_MODE_REMOTE =
    VehicleStatus_DrivingMode_DRIVING_MODE_REMOTE;
  static inline bool DrivingMode_IsValid(int value) {
    return VehicleStatus_DrivingMode_IsValid(value);
  }
  static const DrivingMode DrivingMode_MIN =
    VehicleStatus_DrivingMode_DrivingMode_MIN;
  static const DrivingMode DrivingMode_MAX =
    VehicleStatus_DrivingMode_DrivingMode_MAX;
  static const int DrivingMode_ARRAYSIZE =
    VehicleStatus_DrivingMode_DrivingMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DrivingMode_descriptor() {
    return VehicleStatus_DrivingMode_descriptor();
  }
  static inline const ::std::string& DrivingMode_Name(DrivingMode value) {
    return VehicleStatus_DrivingMode_Name(value);
  }
  static inline bool DrivingMode_Parse(const ::std::string& name,
      DrivingMode* value) {
    return VehicleStatus_DrivingMode_Parse(name, value);
  }

  typedef VehicleStatus_Gear Gear;
  static const Gear GEAR_P =
    VehicleStatus_Gear_GEAR_P;
  static const Gear GEAR_R =
    VehicleStatus_Gear_GEAR_R;
  static const Gear GEAR_N =
    VehicleStatus_Gear_GEAR_N;
  static const Gear GEAR_D =
    VehicleStatus_Gear_GEAR_D;
  static const Gear GEAR_S =
    VehicleStatus_Gear_GEAR_S;
  static const Gear GEAR_L =
    VehicleStatus_Gear_GEAR_L;
  static const Gear GEAR_H =
    VehicleStatus_Gear_GEAR_H;
  static inline bool Gear_IsValid(int value) {
    return VehicleStatus_Gear_IsValid(value);
  }
  static const Gear Gear_MIN =
    VehicleStatus_Gear_Gear_MIN;
  static const Gear Gear_MAX =
    VehicleStatus_Gear_Gear_MAX;
  static const int Gear_ARRAYSIZE =
    VehicleStatus_Gear_Gear_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Gear_descriptor() {
    return VehicleStatus_Gear_descriptor();
  }
  static inline const ::std::string& Gear_Name(Gear value) {
    return VehicleStatus_Gear_Name(value);
  }
  static inline bool Gear_Parse(const ::std::string& name,
      Gear* value) {
    return VehicleStatus_Gear_Parse(name, value);
  }

  typedef VehicleStatus_RainLevel RainLevel;
  static const RainLevel RAIN_LEVEL_INVALID =
    VehicleStatus_RainLevel_RAIN_LEVEL_INVALID;
  static const RainLevel RAIN_LEVEL_NONE =
    VehicleStatus_RainLevel_RAIN_LEVEL_NONE;
  static const RainLevel RAIN_LEVEL_SMALL =
    VehicleStatus_RainLevel_RAIN_LEVEL_SMALL;
  static const RainLevel RAIN_LEVEL_MIDDLE =
    VehicleStatus_RainLevel_RAIN_LEVEL_MIDDLE;
  static const RainLevel RAIN_LEVEL_LARGE =
    VehicleStatus_RainLevel_RAIN_LEVEL_LARGE;
  static const RainLevel RAIN_LEVEL_STORM =
    VehicleStatus_RainLevel_RAIN_LEVEL_STORM;
  static inline bool RainLevel_IsValid(int value) {
    return VehicleStatus_RainLevel_IsValid(value);
  }
  static const RainLevel RainLevel_MIN =
    VehicleStatus_RainLevel_RainLevel_MIN;
  static const RainLevel RainLevel_MAX =
    VehicleStatus_RainLevel_RainLevel_MAX;
  static const int RainLevel_ARRAYSIZE =
    VehicleStatus_RainLevel_RainLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RainLevel_descriptor() {
    return VehicleStatus_RainLevel_descriptor();
  }
  static inline const ::std::string& RainLevel_Name(RainLevel value) {
    return VehicleStatus_RainLevel_Name(value);
  }
  static inline bool RainLevel_Parse(const ::std::string& name,
      RainLevel* value) {
    return VehicleStatus_RainLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 error_code = 32 [packed = true];
  int error_code_size() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 32;
  ::google::protobuf::uint32 error_code(int index) const;
  void set_error_code(int index, ::google::protobuf::uint32 value);
  void add_error_code(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      error_code() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_error_code();

  // .xsproto.base.VehicleStatus.Imu imu = 16;
  bool has_imu() const;
  void clear_imu();
  static const int kImuFieldNumber = 16;
  const ::xsproto::base::VehicleStatus_Imu& imu() const;
  ::xsproto::base::VehicleStatus_Imu* release_imu();
  ::xsproto::base::VehicleStatus_Imu* mutable_imu();
  void set_allocated_imu(::xsproto::base::VehicleStatus_Imu* imu);

  // .xsproto.base.VehicleStatus.Logic logic = 17;
  bool has_logic() const;
  void clear_logic();
  static const int kLogicFieldNumber = 17;
  const ::xsproto::base::VehicleStatus_Logic& logic() const;
  ::xsproto::base::VehicleStatus_Logic* release_logic();
  ::xsproto::base::VehicleStatus_Logic* mutable_logic();
  void set_allocated_logic(::xsproto::base::VehicleStatus_Logic* logic);

  // .xsproto.base.VehicleStatus.Battery battery = 18;
  bool has_battery() const;
  void clear_battery();
  static const int kBatteryFieldNumber = 18;
  const ::xsproto::base::VehicleStatus_Battery& battery() const;
  ::xsproto::base::VehicleStatus_Battery* release_battery();
  ::xsproto::base::VehicleStatus_Battery* mutable_battery();
  void set_allocated_battery(::xsproto::base::VehicleStatus_Battery* battery);

  // .xsproto.base.VehicleStatus.Wheel left_front_wheel = 19;
  bool has_left_front_wheel() const;
  void clear_left_front_wheel();
  static const int kLeftFrontWheelFieldNumber = 19;
  const ::xsproto::base::VehicleStatus_Wheel& left_front_wheel() const;
  ::xsproto::base::VehicleStatus_Wheel* release_left_front_wheel();
  ::xsproto::base::VehicleStatus_Wheel* mutable_left_front_wheel();
  void set_allocated_left_front_wheel(::xsproto::base::VehicleStatus_Wheel* left_front_wheel);

  // .xsproto.base.VehicleStatus.Wheel right_front_wheel = 20;
  bool has_right_front_wheel() const;
  void clear_right_front_wheel();
  static const int kRightFrontWheelFieldNumber = 20;
  const ::xsproto::base::VehicleStatus_Wheel& right_front_wheel() const;
  ::xsproto::base::VehicleStatus_Wheel* release_right_front_wheel();
  ::xsproto::base::VehicleStatus_Wheel* mutable_right_front_wheel();
  void set_allocated_right_front_wheel(::xsproto::base::VehicleStatus_Wheel* right_front_wheel);

  // .xsproto.base.VehicleStatus.Wheel left_rear_wheel = 21;
  bool has_left_rear_wheel() const;
  void clear_left_rear_wheel();
  static const int kLeftRearWheelFieldNumber = 21;
  const ::xsproto::base::VehicleStatus_Wheel& left_rear_wheel() const;
  ::xsproto::base::VehicleStatus_Wheel* release_left_rear_wheel();
  ::xsproto::base::VehicleStatus_Wheel* mutable_left_rear_wheel();
  void set_allocated_left_rear_wheel(::xsproto::base::VehicleStatus_Wheel* left_rear_wheel);

  // .xsproto.base.VehicleStatus.Wheel right_rear_wheel = 22;
  bool has_right_rear_wheel() const;
  void clear_right_rear_wheel();
  static const int kRightRearWheelFieldNumber = 22;
  const ::xsproto::base::VehicleStatus_Wheel& right_rear_wheel() const;
  ::xsproto::base::VehicleStatus_Wheel* release_right_rear_wheel();
  ::xsproto::base::VehicleStatus_Wheel* mutable_right_rear_wheel();
  void set_allocated_right_rear_wheel(::xsproto::base::VehicleStatus_Wheel* right_rear_wheel);

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // uint32 seq_id = 2;
  void clear_seq_id();
  static const int kSeqIdFieldNumber = 2;
  ::google::protobuf::uint32 seq_id() const;
  void set_seq_id(::google::protobuf::uint32 value);

  // .xsproto.base.VehicleStatus.MotionModel motion_model = 3;
  void clear_motion_model();
  static const int kMotionModelFieldNumber = 3;
  ::xsproto::base::VehicleStatus_MotionModel motion_model() const;
  void set_motion_model(::xsproto::base::VehicleStatus_MotionModel value);

  // .xsproto.base.VehicleStatus.DrivingMode driving_mode = 4;
  void clear_driving_mode();
  static const int kDrivingModeFieldNumber = 4;
  ::xsproto::base::VehicleStatus_DrivingMode driving_mode() const;
  void set_driving_mode(::xsproto::base::VehicleStatus_DrivingMode value);

  // .xsproto.base.VehicleStatus.Gear gear = 5;
  void clear_gear();
  static const int kGearFieldNumber = 5;
  ::xsproto::base::VehicleStatus_Gear gear() const;
  void set_gear(::xsproto::base::VehicleStatus_Gear value);

  // double front_wheel_angle = 6;
  void clear_front_wheel_angle();
  static const int kFrontWheelAngleFieldNumber = 6;
  double front_wheel_angle() const;
  void set_front_wheel_angle(double value);

  // double linear_velocity = 7;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 7;
  double linear_velocity() const;
  void set_linear_velocity(double value);

  // double linear_acceleration = 8;
  void clear_linear_acceleration();
  static const int kLinearAccelerationFieldNumber = 8;
  double linear_acceleration() const;
  void set_linear_acceleration(double value);

  // double total_mileage = 9;
  void clear_total_mileage();
  static const int kTotalMileageFieldNumber = 9;
  double total_mileage() const;
  void set_total_mileage(double value);

  // double auto_mileage = 10;
  void clear_auto_mileage();
  static const int kAutoMileageFieldNumber = 10;
  double auto_mileage() const;
  void set_auto_mileage(double value);

  // bool diving_enable = 11;
  void clear_diving_enable();
  static const int kDivingEnableFieldNumber = 11;
  bool diving_enable() const;
  void set_diving_enable(bool value);

  // .xsproto.base.VehicleStatus.RainLevel rain_level = 26;
  void clear_rain_level();
  static const int kRainLevelFieldNumber = 26;
  ::xsproto::base::VehicleStatus_RainLevel rain_level() const;
  void set_rain_level(::xsproto::base::VehicleStatus_RainLevel value);

  // double fuel = 24;
  void clear_fuel();
  static const int kFuelFieldNumber = 24;
  double fuel() const;
  void set_fuel(double value);

  // double brake = 25;
  void clear_brake();
  static const int kBrakeFieldNumber = 25;
  double brake() const;
  void set_brake(double value);

  // @@protoc_insertion_point(class_scope:xsproto.base.VehicleStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > error_code_;
  mutable int _error_code_cached_byte_size_;
  ::xsproto::base::VehicleStatus_Imu* imu_;
  ::xsproto::base::VehicleStatus_Logic* logic_;
  ::xsproto::base::VehicleStatus_Battery* battery_;
  ::xsproto::base::VehicleStatus_Wheel* left_front_wheel_;
  ::xsproto::base::VehicleStatus_Wheel* right_front_wheel_;
  ::xsproto::base::VehicleStatus_Wheel* left_rear_wheel_;
  ::xsproto::base::VehicleStatus_Wheel* right_rear_wheel_;
  double timestamp_;
  ::google::protobuf::uint32 seq_id_;
  int motion_model_;
  int driving_mode_;
  int gear_;
  double front_wheel_angle_;
  double linear_velocity_;
  double linear_acceleration_;
  double total_mileage_;
  double auto_mileage_;
  bool diving_enable_;
  int rain_level_;
  double fuel_;
  double brake_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2fvehicle_5fstatus_2eproto::TableStruct;
  friend void ::protobuf_base_2fvehicle_5fstatus_2eproto::InitDefaultsVehicleStatusImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3D

// double x = 1;
inline void Vector3D::clear_x() {
  x_ = 0;
}
inline double Vector3D::x() const {
  // @@protoc_insertion_point(field_get:xsproto.base.Vector3D.x)
  return x_;
}
inline void Vector3D::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.Vector3D.x)
}

// double y = 2;
inline void Vector3D::clear_y() {
  y_ = 0;
}
inline double Vector3D::y() const {
  // @@protoc_insertion_point(field_get:xsproto.base.Vector3D.y)
  return y_;
}
inline void Vector3D::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.Vector3D.y)
}

// double z = 3;
inline void Vector3D::clear_z() {
  z_ = 0;
}
inline double Vector3D::z() const {
  // @@protoc_insertion_point(field_get:xsproto.base.Vector3D.z)
  return z_;
}
inline void Vector3D::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.Vector3D.z)
}

// -------------------------------------------------------------------

// VehicleStatus_Imu

// .xsproto.base.VehicleStatus.Imu.Mode mode = 1;
inline void VehicleStatus_Imu::clear_mode() {
  mode_ = 0;
}
inline ::xsproto::base::VehicleStatus_Imu_Mode VehicleStatus_Imu::mode() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Imu.mode)
  return static_cast< ::xsproto::base::VehicleStatus_Imu_Mode >(mode_);
}
inline void VehicleStatus_Imu::set_mode(::xsproto::base::VehicleStatus_Imu_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Imu.mode)
}

// .xsproto.base.Vector3D mag = 2;
inline bool VehicleStatus_Imu::has_mag() const {
  return this != internal_default_instance() && mag_ != NULL;
}
inline void VehicleStatus_Imu::clear_mag() {
  if (GetArenaNoVirtual() == NULL && mag_ != NULL) {
    delete mag_;
  }
  mag_ = NULL;
}
inline const ::xsproto::base::Vector3D& VehicleStatus_Imu::mag() const {
  const ::xsproto::base::Vector3D* p = mag_;
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Imu.mag)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Vector3D*>(
      &::xsproto::base::_Vector3D_default_instance_);
}
inline ::xsproto::base::Vector3D* VehicleStatus_Imu::release_mag() {
  // @@protoc_insertion_point(field_release:xsproto.base.VehicleStatus.Imu.mag)
  
  ::xsproto::base::Vector3D* temp = mag_;
  mag_ = NULL;
  return temp;
}
inline ::xsproto::base::Vector3D* VehicleStatus_Imu::mutable_mag() {
  
  if (mag_ == NULL) {
    mag_ = new ::xsproto::base::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.VehicleStatus.Imu.mag)
  return mag_;
}
inline void VehicleStatus_Imu::set_allocated_mag(::xsproto::base::Vector3D* mag) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mag_;
  }
  if (mag) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mag = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mag, submessage_arena);
    }
    
  } else {
    
  }
  mag_ = mag;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.VehicleStatus.Imu.mag)
}

// .xsproto.base.Vector3D gyro = 3;
inline bool VehicleStatus_Imu::has_gyro() const {
  return this != internal_default_instance() && gyro_ != NULL;
}
inline void VehicleStatus_Imu::clear_gyro() {
  if (GetArenaNoVirtual() == NULL && gyro_ != NULL) {
    delete gyro_;
  }
  gyro_ = NULL;
}
inline const ::xsproto::base::Vector3D& VehicleStatus_Imu::gyro() const {
  const ::xsproto::base::Vector3D* p = gyro_;
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Imu.gyro)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Vector3D*>(
      &::xsproto::base::_Vector3D_default_instance_);
}
inline ::xsproto::base::Vector3D* VehicleStatus_Imu::release_gyro() {
  // @@protoc_insertion_point(field_release:xsproto.base.VehicleStatus.Imu.gyro)
  
  ::xsproto::base::Vector3D* temp = gyro_;
  gyro_ = NULL;
  return temp;
}
inline ::xsproto::base::Vector3D* VehicleStatus_Imu::mutable_gyro() {
  
  if (gyro_ == NULL) {
    gyro_ = new ::xsproto::base::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.VehicleStatus.Imu.gyro)
  return gyro_;
}
inline void VehicleStatus_Imu::set_allocated_gyro(::xsproto::base::Vector3D* gyro) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gyro_;
  }
  if (gyro) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gyro = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gyro, submessage_arena);
    }
    
  } else {
    
  }
  gyro_ = gyro;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.VehicleStatus.Imu.gyro)
}

// .xsproto.base.Vector3D accel = 4;
inline bool VehicleStatus_Imu::has_accel() const {
  return this != internal_default_instance() && accel_ != NULL;
}
inline void VehicleStatus_Imu::clear_accel() {
  if (GetArenaNoVirtual() == NULL && accel_ != NULL) {
    delete accel_;
  }
  accel_ = NULL;
}
inline const ::xsproto::base::Vector3D& VehicleStatus_Imu::accel() const {
  const ::xsproto::base::Vector3D* p = accel_;
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Imu.accel)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Vector3D*>(
      &::xsproto::base::_Vector3D_default_instance_);
}
inline ::xsproto::base::Vector3D* VehicleStatus_Imu::release_accel() {
  // @@protoc_insertion_point(field_release:xsproto.base.VehicleStatus.Imu.accel)
  
  ::xsproto::base::Vector3D* temp = accel_;
  accel_ = NULL;
  return temp;
}
inline ::xsproto::base::Vector3D* VehicleStatus_Imu::mutable_accel() {
  
  if (accel_ == NULL) {
    accel_ = new ::xsproto::base::Vector3D;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.VehicleStatus.Imu.accel)
  return accel_;
}
inline void VehicleStatus_Imu::set_allocated_accel(::xsproto::base::Vector3D* accel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accel_;
  }
  if (accel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accel, submessage_arena);
    }
    
  } else {
    
  }
  accel_ = accel;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.VehicleStatus.Imu.accel)
}

// double roll = 5;
inline void VehicleStatus_Imu::clear_roll() {
  roll_ = 0;
}
inline double VehicleStatus_Imu::roll() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Imu.roll)
  return roll_;
}
inline void VehicleStatus_Imu::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Imu.roll)
}

// double pitch = 6;
inline void VehicleStatus_Imu::clear_pitch() {
  pitch_ = 0;
}
inline double VehicleStatus_Imu::pitch() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Imu.pitch)
  return pitch_;
}
inline void VehicleStatus_Imu::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Imu.pitch)
}

// double heading = 7;
inline void VehicleStatus_Imu::clear_heading() {
  heading_ = 0;
}
inline double VehicleStatus_Imu::heading() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Imu.heading)
  return heading_;
}
inline void VehicleStatus_Imu::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Imu.heading)
}

// -------------------------------------------------------------------

// VehicleStatus_Logic

// bool pause = 1;
inline void VehicleStatus_Logic::clear_pause() {
  pause_ = false;
}
inline bool VehicleStatus_Logic::pause() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Logic.pause)
  return pause_;
}
inline void VehicleStatus_Logic::set_pause(bool value) {
  
  pause_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Logic.pause)
}

// bool bumper = 2;
inline void VehicleStatus_Logic::clear_bumper() {
  bumper_ = false;
}
inline bool VehicleStatus_Logic::bumper() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Logic.bumper)
  return bumper_;
}
inline void VehicleStatus_Logic::set_bumper(bool value) {
  
  bumper_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Logic.bumper)
}

// bool emergency = 3;
inline void VehicleStatus_Logic::clear_emergency() {
  emergency_ = false;
}
inline bool VehicleStatus_Logic::emergency() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Logic.emergency)
  return emergency_;
}
inline void VehicleStatus_Logic::set_emergency(bool value) {
  
  emergency_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Logic.emergency)
}

// bool low_beam = 8;
inline void VehicleStatus_Logic::clear_low_beam() {
  low_beam_ = false;
}
inline bool VehicleStatus_Logic::low_beam() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Logic.low_beam)
  return low_beam_;
}
inline void VehicleStatus_Logic::set_low_beam(bool value) {
  
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Logic.low_beam)
}

// bool high_beam = 9;
inline void VehicleStatus_Logic::clear_high_beam() {
  high_beam_ = false;
}
inline bool VehicleStatus_Logic::high_beam() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Logic.high_beam)
  return high_beam_;
}
inline void VehicleStatus_Logic::set_high_beam(bool value) {
  
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Logic.high_beam)
}

// bool turn_left_light = 10;
inline void VehicleStatus_Logic::clear_turn_left_light() {
  turn_left_light_ = false;
}
inline bool VehicleStatus_Logic::turn_left_light() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Logic.turn_left_light)
  return turn_left_light_;
}
inline void VehicleStatus_Logic::set_turn_left_light(bool value) {
  
  turn_left_light_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Logic.turn_left_light)
}

// bool turn_right_light = 11;
inline void VehicleStatus_Logic::clear_turn_right_light() {
  turn_right_light_ = false;
}
inline bool VehicleStatus_Logic::turn_right_light() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Logic.turn_right_light)
  return turn_right_light_;
}
inline void VehicleStatus_Logic::set_turn_right_light(bool value) {
  
  turn_right_light_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Logic.turn_right_light)
}

// bool reversing_light = 12;
inline void VehicleStatus_Logic::clear_reversing_light() {
  reversing_light_ = false;
}
inline bool VehicleStatus_Logic::reversing_light() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Logic.reversing_light)
  return reversing_light_;
}
inline void VehicleStatus_Logic::set_reversing_light(bool value) {
  
  reversing_light_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Logic.reversing_light)
}

// bool position_light = 13;
inline void VehicleStatus_Logic::clear_position_light() {
  position_light_ = false;
}
inline bool VehicleStatus_Logic::position_light() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Logic.position_light)
  return position_light_;
}
inline void VehicleStatus_Logic::set_position_light(bool value) {
  
  position_light_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Logic.position_light)
}

// bool brake_light = 14;
inline void VehicleStatus_Logic::clear_brake_light() {
  brake_light_ = false;
}
inline bool VehicleStatus_Logic::brake_light() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Logic.brake_light)
  return brake_light_;
}
inline void VehicleStatus_Logic::set_brake_light(bool value) {
  
  brake_light_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Logic.brake_light)
}

// bool fog_light = 15;
inline void VehicleStatus_Logic::clear_fog_light() {
  fog_light_ = false;
}
inline bool VehicleStatus_Logic::fog_light() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Logic.fog_light)
  return fog_light_;
}
inline void VehicleStatus_Logic::set_fog_light(bool value) {
  
  fog_light_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Logic.fog_light)
}

// bool horn = 16;
inline void VehicleStatus_Logic::clear_horn() {
  horn_ = false;
}
inline bool VehicleStatus_Logic::horn() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Logic.horn)
  return horn_;
}
inline void VehicleStatus_Logic::set_horn(bool value) {
  
  horn_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Logic.horn)
}

// bool door = 24;
inline void VehicleStatus_Logic::clear_door() {
  door_ = false;
}
inline bool VehicleStatus_Logic::door() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Logic.door)
  return door_;
}
inline void VehicleStatus_Logic::set_door(bool value) {
  
  door_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Logic.door)
}

// -------------------------------------------------------------------

// VehicleStatus_Battery

// double soc = 1;
inline void VehicleStatus_Battery::clear_soc() {
  soc_ = 0;
}
inline double VehicleStatus_Battery::soc() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Battery.soc)
  return soc_;
}
inline void VehicleStatus_Battery::set_soc(double value) {
  
  soc_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Battery.soc)
}

// double voltage = 2;
inline void VehicleStatus_Battery::clear_voltage() {
  voltage_ = 0;
}
inline double VehicleStatus_Battery::voltage() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Battery.voltage)
  return voltage_;
}
inline void VehicleStatus_Battery::set_voltage(double value) {
  
  voltage_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Battery.voltage)
}

// double current = 3;
inline void VehicleStatus_Battery::clear_current() {
  current_ = 0;
}
inline double VehicleStatus_Battery::current() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Battery.current)
  return current_;
}
inline void VehicleStatus_Battery::set_current(double value) {
  
  current_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Battery.current)
}

// double temperature = 4;
inline void VehicleStatus_Battery::clear_temperature() {
  temperature_ = 0;
}
inline double VehicleStatus_Battery::temperature() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Battery.temperature)
  return temperature_;
}
inline void VehicleStatus_Battery::set_temperature(double value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Battery.temperature)
}

// bool charging = 5;
inline void VehicleStatus_Battery::clear_charging() {
  charging_ = false;
}
inline bool VehicleStatus_Battery::charging() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Battery.charging)
  return charging_;
}
inline void VehicleStatus_Battery::set_charging(bool value) {
  
  charging_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Battery.charging)
}

// bool charger_conn = 6;
inline void VehicleStatus_Battery::clear_charger_conn() {
  charger_conn_ = false;
}
inline bool VehicleStatus_Battery::charger_conn() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Battery.charger_conn)
  return charger_conn_;
}
inline void VehicleStatus_Battery::set_charger_conn(bool value) {
  
  charger_conn_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Battery.charger_conn)
}

// -------------------------------------------------------------------

// VehicleStatus_Wheel

// double speed = 1;
inline void VehicleStatus_Wheel::clear_speed() {
  speed_ = 0;
}
inline double VehicleStatus_Wheel::speed() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Wheel.speed)
  return speed_;
}
inline void VehicleStatus_Wheel::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Wheel.speed)
}

// double accel = 2;
inline void VehicleStatus_Wheel::clear_accel() {
  accel_ = 0;
}
inline double VehicleStatus_Wheel::accel() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Wheel.accel)
  return accel_;
}
inline void VehicleStatus_Wheel::set_accel(double value) {
  
  accel_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Wheel.accel)
}

// double mileage = 3;
inline void VehicleStatus_Wheel::clear_mileage() {
  mileage_ = 0;
}
inline double VehicleStatus_Wheel::mileage() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Wheel.mileage)
  return mileage_;
}
inline void VehicleStatus_Wheel::set_mileage(double value) {
  
  mileage_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Wheel.mileage)
}

// uint32 pulse = 4;
inline void VehicleStatus_Wheel::clear_pulse() {
  pulse_ = 0u;
}
inline ::google::protobuf::uint32 VehicleStatus_Wheel::pulse() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.Wheel.pulse)
  return pulse_;
}
inline void VehicleStatus_Wheel::set_pulse(::google::protobuf::uint32 value) {
  
  pulse_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.Wheel.pulse)
}

// -------------------------------------------------------------------

// VehicleStatus

// double timestamp = 1;
inline void VehicleStatus::clear_timestamp() {
  timestamp_ = 0;
}
inline double VehicleStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.timestamp)
  return timestamp_;
}
inline void VehicleStatus::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.timestamp)
}

// uint32 seq_id = 2;
inline void VehicleStatus::clear_seq_id() {
  seq_id_ = 0u;
}
inline ::google::protobuf::uint32 VehicleStatus::seq_id() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.seq_id)
  return seq_id_;
}
inline void VehicleStatus::set_seq_id(::google::protobuf::uint32 value) {
  
  seq_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.seq_id)
}

// .xsproto.base.VehicleStatus.MotionModel motion_model = 3;
inline void VehicleStatus::clear_motion_model() {
  motion_model_ = 0;
}
inline ::xsproto::base::VehicleStatus_MotionModel VehicleStatus::motion_model() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.motion_model)
  return static_cast< ::xsproto::base::VehicleStatus_MotionModel >(motion_model_);
}
inline void VehicleStatus::set_motion_model(::xsproto::base::VehicleStatus_MotionModel value) {
  
  motion_model_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.motion_model)
}

// .xsproto.base.VehicleStatus.DrivingMode driving_mode = 4;
inline void VehicleStatus::clear_driving_mode() {
  driving_mode_ = 0;
}
inline ::xsproto::base::VehicleStatus_DrivingMode VehicleStatus::driving_mode() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.driving_mode)
  return static_cast< ::xsproto::base::VehicleStatus_DrivingMode >(driving_mode_);
}
inline void VehicleStatus::set_driving_mode(::xsproto::base::VehicleStatus_DrivingMode value) {
  
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.driving_mode)
}

// .xsproto.base.VehicleStatus.Gear gear = 5;
inline void VehicleStatus::clear_gear() {
  gear_ = 0;
}
inline ::xsproto::base::VehicleStatus_Gear VehicleStatus::gear() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.gear)
  return static_cast< ::xsproto::base::VehicleStatus_Gear >(gear_);
}
inline void VehicleStatus::set_gear(::xsproto::base::VehicleStatus_Gear value) {
  
  gear_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.gear)
}

// double front_wheel_angle = 6;
inline void VehicleStatus::clear_front_wheel_angle() {
  front_wheel_angle_ = 0;
}
inline double VehicleStatus::front_wheel_angle() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.front_wheel_angle)
  return front_wheel_angle_;
}
inline void VehicleStatus::set_front_wheel_angle(double value) {
  
  front_wheel_angle_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.front_wheel_angle)
}

// double linear_velocity = 7;
inline void VehicleStatus::clear_linear_velocity() {
  linear_velocity_ = 0;
}
inline double VehicleStatus::linear_velocity() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.linear_velocity)
  return linear_velocity_;
}
inline void VehicleStatus::set_linear_velocity(double value) {
  
  linear_velocity_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.linear_velocity)
}

// double linear_acceleration = 8;
inline void VehicleStatus::clear_linear_acceleration() {
  linear_acceleration_ = 0;
}
inline double VehicleStatus::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.linear_acceleration)
  return linear_acceleration_;
}
inline void VehicleStatus::set_linear_acceleration(double value) {
  
  linear_acceleration_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.linear_acceleration)
}

// double total_mileage = 9;
inline void VehicleStatus::clear_total_mileage() {
  total_mileage_ = 0;
}
inline double VehicleStatus::total_mileage() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.total_mileage)
  return total_mileage_;
}
inline void VehicleStatus::set_total_mileage(double value) {
  
  total_mileage_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.total_mileage)
}

// double auto_mileage = 10;
inline void VehicleStatus::clear_auto_mileage() {
  auto_mileage_ = 0;
}
inline double VehicleStatus::auto_mileage() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.auto_mileage)
  return auto_mileage_;
}
inline void VehicleStatus::set_auto_mileage(double value) {
  
  auto_mileage_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.auto_mileage)
}

// bool diving_enable = 11;
inline void VehicleStatus::clear_diving_enable() {
  diving_enable_ = false;
}
inline bool VehicleStatus::diving_enable() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.diving_enable)
  return diving_enable_;
}
inline void VehicleStatus::set_diving_enable(bool value) {
  
  diving_enable_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.diving_enable)
}

// .xsproto.base.VehicleStatus.Imu imu = 16;
inline bool VehicleStatus::has_imu() const {
  return this != internal_default_instance() && imu_ != NULL;
}
inline void VehicleStatus::clear_imu() {
  if (GetArenaNoVirtual() == NULL && imu_ != NULL) {
    delete imu_;
  }
  imu_ = NULL;
}
inline const ::xsproto::base::VehicleStatus_Imu& VehicleStatus::imu() const {
  const ::xsproto::base::VehicleStatus_Imu* p = imu_;
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.imu)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::VehicleStatus_Imu*>(
      &::xsproto::base::_VehicleStatus_Imu_default_instance_);
}
inline ::xsproto::base::VehicleStatus_Imu* VehicleStatus::release_imu() {
  // @@protoc_insertion_point(field_release:xsproto.base.VehicleStatus.imu)
  
  ::xsproto::base::VehicleStatus_Imu* temp = imu_;
  imu_ = NULL;
  return temp;
}
inline ::xsproto::base::VehicleStatus_Imu* VehicleStatus::mutable_imu() {
  
  if (imu_ == NULL) {
    imu_ = new ::xsproto::base::VehicleStatus_Imu;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.VehicleStatus.imu)
  return imu_;
}
inline void VehicleStatus::set_allocated_imu(::xsproto::base::VehicleStatus_Imu* imu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete imu_;
  }
  if (imu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      imu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    
  } else {
    
  }
  imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.VehicleStatus.imu)
}

// .xsproto.base.VehicleStatus.Logic logic = 17;
inline bool VehicleStatus::has_logic() const {
  return this != internal_default_instance() && logic_ != NULL;
}
inline void VehicleStatus::clear_logic() {
  if (GetArenaNoVirtual() == NULL && logic_ != NULL) {
    delete logic_;
  }
  logic_ = NULL;
}
inline const ::xsproto::base::VehicleStatus_Logic& VehicleStatus::logic() const {
  const ::xsproto::base::VehicleStatus_Logic* p = logic_;
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.logic)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::VehicleStatus_Logic*>(
      &::xsproto::base::_VehicleStatus_Logic_default_instance_);
}
inline ::xsproto::base::VehicleStatus_Logic* VehicleStatus::release_logic() {
  // @@protoc_insertion_point(field_release:xsproto.base.VehicleStatus.logic)
  
  ::xsproto::base::VehicleStatus_Logic* temp = logic_;
  logic_ = NULL;
  return temp;
}
inline ::xsproto::base::VehicleStatus_Logic* VehicleStatus::mutable_logic() {
  
  if (logic_ == NULL) {
    logic_ = new ::xsproto::base::VehicleStatus_Logic;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.VehicleStatus.logic)
  return logic_;
}
inline void VehicleStatus::set_allocated_logic(::xsproto::base::VehicleStatus_Logic* logic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logic_;
  }
  if (logic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logic, submessage_arena);
    }
    
  } else {
    
  }
  logic_ = logic;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.VehicleStatus.logic)
}

// .xsproto.base.VehicleStatus.Battery battery = 18;
inline bool VehicleStatus::has_battery() const {
  return this != internal_default_instance() && battery_ != NULL;
}
inline void VehicleStatus::clear_battery() {
  if (GetArenaNoVirtual() == NULL && battery_ != NULL) {
    delete battery_;
  }
  battery_ = NULL;
}
inline const ::xsproto::base::VehicleStatus_Battery& VehicleStatus::battery() const {
  const ::xsproto::base::VehicleStatus_Battery* p = battery_;
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.battery)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::VehicleStatus_Battery*>(
      &::xsproto::base::_VehicleStatus_Battery_default_instance_);
}
inline ::xsproto::base::VehicleStatus_Battery* VehicleStatus::release_battery() {
  // @@protoc_insertion_point(field_release:xsproto.base.VehicleStatus.battery)
  
  ::xsproto::base::VehicleStatus_Battery* temp = battery_;
  battery_ = NULL;
  return temp;
}
inline ::xsproto::base::VehicleStatus_Battery* VehicleStatus::mutable_battery() {
  
  if (battery_ == NULL) {
    battery_ = new ::xsproto::base::VehicleStatus_Battery;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.VehicleStatus.battery)
  return battery_;
}
inline void VehicleStatus::set_allocated_battery(::xsproto::base::VehicleStatus_Battery* battery) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete battery_;
  }
  if (battery) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      battery = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, battery, submessage_arena);
    }
    
  } else {
    
  }
  battery_ = battery;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.VehicleStatus.battery)
}

// .xsproto.base.VehicleStatus.Wheel left_front_wheel = 19;
inline bool VehicleStatus::has_left_front_wheel() const {
  return this != internal_default_instance() && left_front_wheel_ != NULL;
}
inline void VehicleStatus::clear_left_front_wheel() {
  if (GetArenaNoVirtual() == NULL && left_front_wheel_ != NULL) {
    delete left_front_wheel_;
  }
  left_front_wheel_ = NULL;
}
inline const ::xsproto::base::VehicleStatus_Wheel& VehicleStatus::left_front_wheel() const {
  const ::xsproto::base::VehicleStatus_Wheel* p = left_front_wheel_;
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.left_front_wheel)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::VehicleStatus_Wheel*>(
      &::xsproto::base::_VehicleStatus_Wheel_default_instance_);
}
inline ::xsproto::base::VehicleStatus_Wheel* VehicleStatus::release_left_front_wheel() {
  // @@protoc_insertion_point(field_release:xsproto.base.VehicleStatus.left_front_wheel)
  
  ::xsproto::base::VehicleStatus_Wheel* temp = left_front_wheel_;
  left_front_wheel_ = NULL;
  return temp;
}
inline ::xsproto::base::VehicleStatus_Wheel* VehicleStatus::mutable_left_front_wheel() {
  
  if (left_front_wheel_ == NULL) {
    left_front_wheel_ = new ::xsproto::base::VehicleStatus_Wheel;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.VehicleStatus.left_front_wheel)
  return left_front_wheel_;
}
inline void VehicleStatus::set_allocated_left_front_wheel(::xsproto::base::VehicleStatus_Wheel* left_front_wheel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete left_front_wheel_;
  }
  if (left_front_wheel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_front_wheel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_front_wheel, submessage_arena);
    }
    
  } else {
    
  }
  left_front_wheel_ = left_front_wheel;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.VehicleStatus.left_front_wheel)
}

// .xsproto.base.VehicleStatus.Wheel right_front_wheel = 20;
inline bool VehicleStatus::has_right_front_wheel() const {
  return this != internal_default_instance() && right_front_wheel_ != NULL;
}
inline void VehicleStatus::clear_right_front_wheel() {
  if (GetArenaNoVirtual() == NULL && right_front_wheel_ != NULL) {
    delete right_front_wheel_;
  }
  right_front_wheel_ = NULL;
}
inline const ::xsproto::base::VehicleStatus_Wheel& VehicleStatus::right_front_wheel() const {
  const ::xsproto::base::VehicleStatus_Wheel* p = right_front_wheel_;
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.right_front_wheel)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::VehicleStatus_Wheel*>(
      &::xsproto::base::_VehicleStatus_Wheel_default_instance_);
}
inline ::xsproto::base::VehicleStatus_Wheel* VehicleStatus::release_right_front_wheel() {
  // @@protoc_insertion_point(field_release:xsproto.base.VehicleStatus.right_front_wheel)
  
  ::xsproto::base::VehicleStatus_Wheel* temp = right_front_wheel_;
  right_front_wheel_ = NULL;
  return temp;
}
inline ::xsproto::base::VehicleStatus_Wheel* VehicleStatus::mutable_right_front_wheel() {
  
  if (right_front_wheel_ == NULL) {
    right_front_wheel_ = new ::xsproto::base::VehicleStatus_Wheel;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.VehicleStatus.right_front_wheel)
  return right_front_wheel_;
}
inline void VehicleStatus::set_allocated_right_front_wheel(::xsproto::base::VehicleStatus_Wheel* right_front_wheel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete right_front_wheel_;
  }
  if (right_front_wheel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_front_wheel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_front_wheel, submessage_arena);
    }
    
  } else {
    
  }
  right_front_wheel_ = right_front_wheel;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.VehicleStatus.right_front_wheel)
}

// .xsproto.base.VehicleStatus.Wheel left_rear_wheel = 21;
inline bool VehicleStatus::has_left_rear_wheel() const {
  return this != internal_default_instance() && left_rear_wheel_ != NULL;
}
inline void VehicleStatus::clear_left_rear_wheel() {
  if (GetArenaNoVirtual() == NULL && left_rear_wheel_ != NULL) {
    delete left_rear_wheel_;
  }
  left_rear_wheel_ = NULL;
}
inline const ::xsproto::base::VehicleStatus_Wheel& VehicleStatus::left_rear_wheel() const {
  const ::xsproto::base::VehicleStatus_Wheel* p = left_rear_wheel_;
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.left_rear_wheel)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::VehicleStatus_Wheel*>(
      &::xsproto::base::_VehicleStatus_Wheel_default_instance_);
}
inline ::xsproto::base::VehicleStatus_Wheel* VehicleStatus::release_left_rear_wheel() {
  // @@protoc_insertion_point(field_release:xsproto.base.VehicleStatus.left_rear_wheel)
  
  ::xsproto::base::VehicleStatus_Wheel* temp = left_rear_wheel_;
  left_rear_wheel_ = NULL;
  return temp;
}
inline ::xsproto::base::VehicleStatus_Wheel* VehicleStatus::mutable_left_rear_wheel() {
  
  if (left_rear_wheel_ == NULL) {
    left_rear_wheel_ = new ::xsproto::base::VehicleStatus_Wheel;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.VehicleStatus.left_rear_wheel)
  return left_rear_wheel_;
}
inline void VehicleStatus::set_allocated_left_rear_wheel(::xsproto::base::VehicleStatus_Wheel* left_rear_wheel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete left_rear_wheel_;
  }
  if (left_rear_wheel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_rear_wheel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_rear_wheel, submessage_arena);
    }
    
  } else {
    
  }
  left_rear_wheel_ = left_rear_wheel;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.VehicleStatus.left_rear_wheel)
}

// .xsproto.base.VehicleStatus.Wheel right_rear_wheel = 22;
inline bool VehicleStatus::has_right_rear_wheel() const {
  return this != internal_default_instance() && right_rear_wheel_ != NULL;
}
inline void VehicleStatus::clear_right_rear_wheel() {
  if (GetArenaNoVirtual() == NULL && right_rear_wheel_ != NULL) {
    delete right_rear_wheel_;
  }
  right_rear_wheel_ = NULL;
}
inline const ::xsproto::base::VehicleStatus_Wheel& VehicleStatus::right_rear_wheel() const {
  const ::xsproto::base::VehicleStatus_Wheel* p = right_rear_wheel_;
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.right_rear_wheel)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::VehicleStatus_Wheel*>(
      &::xsproto::base::_VehicleStatus_Wheel_default_instance_);
}
inline ::xsproto::base::VehicleStatus_Wheel* VehicleStatus::release_right_rear_wheel() {
  // @@protoc_insertion_point(field_release:xsproto.base.VehicleStatus.right_rear_wheel)
  
  ::xsproto::base::VehicleStatus_Wheel* temp = right_rear_wheel_;
  right_rear_wheel_ = NULL;
  return temp;
}
inline ::xsproto::base::VehicleStatus_Wheel* VehicleStatus::mutable_right_rear_wheel() {
  
  if (right_rear_wheel_ == NULL) {
    right_rear_wheel_ = new ::xsproto::base::VehicleStatus_Wheel;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.base.VehicleStatus.right_rear_wheel)
  return right_rear_wheel_;
}
inline void VehicleStatus::set_allocated_right_rear_wheel(::xsproto::base::VehicleStatus_Wheel* right_rear_wheel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete right_rear_wheel_;
  }
  if (right_rear_wheel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_rear_wheel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_rear_wheel, submessage_arena);
    }
    
  } else {
    
  }
  right_rear_wheel_ = right_rear_wheel;
  // @@protoc_insertion_point(field_set_allocated:xsproto.base.VehicleStatus.right_rear_wheel)
}

// double fuel = 24;
inline void VehicleStatus::clear_fuel() {
  fuel_ = 0;
}
inline double VehicleStatus::fuel() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.fuel)
  return fuel_;
}
inline void VehicleStatus::set_fuel(double value) {
  
  fuel_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.fuel)
}

// double brake = 25;
inline void VehicleStatus::clear_brake() {
  brake_ = 0;
}
inline double VehicleStatus::brake() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.brake)
  return brake_;
}
inline void VehicleStatus::set_brake(double value) {
  
  brake_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.brake)
}

// .xsproto.base.VehicleStatus.RainLevel rain_level = 26;
inline void VehicleStatus::clear_rain_level() {
  rain_level_ = 0;
}
inline ::xsproto::base::VehicleStatus_RainLevel VehicleStatus::rain_level() const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.rain_level)
  return static_cast< ::xsproto::base::VehicleStatus_RainLevel >(rain_level_);
}
inline void VehicleStatus::set_rain_level(::xsproto::base::VehicleStatus_RainLevel value) {
  
  rain_level_ = value;
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.rain_level)
}

// repeated uint32 error_code = 32 [packed = true];
inline int VehicleStatus::error_code_size() const {
  return error_code_.size();
}
inline void VehicleStatus::clear_error_code() {
  error_code_.Clear();
}
inline ::google::protobuf::uint32 VehicleStatus::error_code(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.base.VehicleStatus.error_code)
  return error_code_.Get(index);
}
inline void VehicleStatus::set_error_code(int index, ::google::protobuf::uint32 value) {
  error_code_.Set(index, value);
  // @@protoc_insertion_point(field_set:xsproto.base.VehicleStatus.error_code)
}
inline void VehicleStatus::add_error_code(::google::protobuf::uint32 value) {
  error_code_.Add(value);
  // @@protoc_insertion_point(field_add:xsproto.base.VehicleStatus.error_code)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VehicleStatus::error_code() const {
  // @@protoc_insertion_point(field_list:xsproto.base.VehicleStatus.error_code)
  return error_code_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VehicleStatus::mutable_error_code() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.base.VehicleStatus.error_code)
  return &error_code_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace xsproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xsproto::base::VehicleStatus_Imu_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::base::VehicleStatus_Imu_Mode>() {
  return ::xsproto::base::VehicleStatus_Imu_Mode_descriptor();
}
template <> struct is_proto_enum< ::xsproto::base::VehicleStatus_MotionModel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::base::VehicleStatus_MotionModel>() {
  return ::xsproto::base::VehicleStatus_MotionModel_descriptor();
}
template <> struct is_proto_enum< ::xsproto::base::VehicleStatus_DrivingMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::base::VehicleStatus_DrivingMode>() {
  return ::xsproto::base::VehicleStatus_DrivingMode_descriptor();
}
template <> struct is_proto_enum< ::xsproto::base::VehicleStatus_Gear> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::base::VehicleStatus_Gear>() {
  return ::xsproto::base::VehicleStatus_Gear_descriptor();
}
template <> struct is_proto_enum< ::xsproto::base::VehicleStatus_RainLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::base::VehicleStatus_RainLevel>() {
  return ::xsproto::base::VehicleStatus_RainLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_2fvehicle_5fstatus_2eproto__INCLUDED
