// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control/control_command.proto

#ifndef PROTOBUF_control_2fcontrol_5fcommand_2eproto__INCLUDED
#define PROTOBUF_control_2fcontrol_5fcommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_control_2fcontrol_5fcommand_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsControlCommand_LogicImpl();
void InitDefaultsControlCommand_Logic();
void InitDefaultsControlCommandImpl();
void InitDefaultsControlCommand();
inline void InitDefaults() {
  InitDefaultsControlCommand_Logic();
  InitDefaultsControlCommand();
}
}  // namespace protobuf_control_2fcontrol_5fcommand_2eproto
namespace xsproto {
namespace control {
class ControlCommand;
class ControlCommandDefaultTypeInternal;
extern ControlCommandDefaultTypeInternal _ControlCommand_default_instance_;
class ControlCommand_Logic;
class ControlCommand_LogicDefaultTypeInternal;
extern ControlCommand_LogicDefaultTypeInternal _ControlCommand_Logic_default_instance_;
}  // namespace control
}  // namespace xsproto
namespace xsproto {
namespace control {

enum ControlCommand_ControlMode {
  ControlCommand_ControlMode_CONTROL_MODE_NONE = 0,
  ControlCommand_ControlMode_CONTROL_MODE_DIFF = 1,
  ControlCommand_ControlMode_CONTROL_MODE_ACKERMAN = 2,
  ControlCommand_ControlMode_CONTROL_MODE_TURN_IN_PLACE = 3,
  ControlCommand_ControlMode_CONTROL_MODE_FOUR_WHEEL_FOUR_TURN = 4,
  ControlCommand_ControlMode_ControlCommand_ControlMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlCommand_ControlMode_ControlCommand_ControlMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlCommand_ControlMode_IsValid(int value);
const ControlCommand_ControlMode ControlCommand_ControlMode_ControlMode_MIN = ControlCommand_ControlMode_CONTROL_MODE_NONE;
const ControlCommand_ControlMode ControlCommand_ControlMode_ControlMode_MAX = ControlCommand_ControlMode_CONTROL_MODE_FOUR_WHEEL_FOUR_TURN;
const int ControlCommand_ControlMode_ControlMode_ARRAYSIZE = ControlCommand_ControlMode_ControlMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlCommand_ControlMode_descriptor();
inline const ::std::string& ControlCommand_ControlMode_Name(ControlCommand_ControlMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlCommand_ControlMode_descriptor(), value);
}
inline bool ControlCommand_ControlMode_Parse(
    const ::std::string& name, ControlCommand_ControlMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlCommand_ControlMode>(
    ControlCommand_ControlMode_descriptor(), name, value);
}
// ===================================================================

class ControlCommand_Logic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.control.ControlCommand.Logic) */ {
 public:
  ControlCommand_Logic();
  virtual ~ControlCommand_Logic();

  ControlCommand_Logic(const ControlCommand_Logic& from);

  inline ControlCommand_Logic& operator=(const ControlCommand_Logic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlCommand_Logic(ControlCommand_Logic&& from) noexcept
    : ControlCommand_Logic() {
    *this = ::std::move(from);
  }

  inline ControlCommand_Logic& operator=(ControlCommand_Logic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlCommand_Logic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlCommand_Logic* internal_default_instance() {
    return reinterpret_cast<const ControlCommand_Logic*>(
               &_ControlCommand_Logic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ControlCommand_Logic* other);
  friend void swap(ControlCommand_Logic& a, ControlCommand_Logic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlCommand_Logic* New() const PROTOBUF_FINAL { return New(NULL); }

  ControlCommand_Logic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ControlCommand_Logic& from);
  void MergeFrom(const ControlCommand_Logic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ControlCommand_Logic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool low_beam = 1;
  void clear_low_beam();
  static const int kLowBeamFieldNumber = 1;
  bool low_beam() const;
  void set_low_beam(bool value);

  // bool high_beam = 2;
  void clear_high_beam();
  static const int kHighBeamFieldNumber = 2;
  bool high_beam() const;
  void set_high_beam(bool value);

  // bool turn_left_light = 3;
  void clear_turn_left_light();
  static const int kTurnLeftLightFieldNumber = 3;
  bool turn_left_light() const;
  void set_turn_left_light(bool value);

  // bool turn_right_light = 4;
  void clear_turn_right_light();
  static const int kTurnRightLightFieldNumber = 4;
  bool turn_right_light() const;
  void set_turn_right_light(bool value);

  // bool horn = 8;
  void clear_horn();
  static const int kHornFieldNumber = 8;
  bool horn() const;
  void set_horn(bool value);

  // @@protoc_insertion_point(class_scope:xsproto.control.ControlCommand.Logic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool low_beam_;
  bool high_beam_;
  bool turn_left_light_;
  bool turn_right_light_;
  bool horn_;
  mutable int _cached_size_;
  friend struct ::protobuf_control_2fcontrol_5fcommand_2eproto::TableStruct;
  friend void ::protobuf_control_2fcontrol_5fcommand_2eproto::InitDefaultsControlCommand_LogicImpl();
};
// -------------------------------------------------------------------

class ControlCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.control.ControlCommand) */ {
 public:
  ControlCommand();
  virtual ~ControlCommand();

  ControlCommand(const ControlCommand& from);

  inline ControlCommand& operator=(const ControlCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlCommand(ControlCommand&& from) noexcept
    : ControlCommand() {
    *this = ::std::move(from);
  }

  inline ControlCommand& operator=(ControlCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlCommand* internal_default_instance() {
    return reinterpret_cast<const ControlCommand*>(
               &_ControlCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ControlCommand* other);
  friend void swap(ControlCommand& a, ControlCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  ControlCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ControlCommand& from);
  void MergeFrom(const ControlCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ControlCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ControlCommand_Logic Logic;

  typedef ControlCommand_ControlMode ControlMode;
  static const ControlMode CONTROL_MODE_NONE =
    ControlCommand_ControlMode_CONTROL_MODE_NONE;
  static const ControlMode CONTROL_MODE_DIFF =
    ControlCommand_ControlMode_CONTROL_MODE_DIFF;
  static const ControlMode CONTROL_MODE_ACKERMAN =
    ControlCommand_ControlMode_CONTROL_MODE_ACKERMAN;
  static const ControlMode CONTROL_MODE_TURN_IN_PLACE =
    ControlCommand_ControlMode_CONTROL_MODE_TURN_IN_PLACE;
  static const ControlMode CONTROL_MODE_FOUR_WHEEL_FOUR_TURN =
    ControlCommand_ControlMode_CONTROL_MODE_FOUR_WHEEL_FOUR_TURN;
  static inline bool ControlMode_IsValid(int value) {
    return ControlCommand_ControlMode_IsValid(value);
  }
  static const ControlMode ControlMode_MIN =
    ControlCommand_ControlMode_ControlMode_MIN;
  static const ControlMode ControlMode_MAX =
    ControlCommand_ControlMode_ControlMode_MAX;
  static const int ControlMode_ARRAYSIZE =
    ControlCommand_ControlMode_ControlMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ControlMode_descriptor() {
    return ControlCommand_ControlMode_descriptor();
  }
  static inline const ::std::string& ControlMode_Name(ControlMode value) {
    return ControlCommand_ControlMode_Name(value);
  }
  static inline bool ControlMode_Parse(const ::std::string& name,
      ControlMode* value) {
    return ControlCommand_ControlMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .xsproto.control.ControlCommand.Logic logic = 8;
  bool has_logic() const;
  void clear_logic();
  static const int kLogicFieldNumber = 8;
  const ::xsproto::control::ControlCommand_Logic& logic() const;
  ::xsproto::control::ControlCommand_Logic* release_logic();
  ::xsproto::control::ControlCommand_Logic* mutable_logic();
  void set_allocated_logic(::xsproto::control::ControlCommand_Logic* logic);

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // double speed = 3;
  void clear_speed();
  static const int kSpeedFieldNumber = 3;
  double speed() const;
  void set_speed(double value);

  // double accel = 4;
  void clear_accel();
  static const int kAccelFieldNumber = 4;
  double accel() const;
  void set_accel(double value);

  // double front_wheel_angle = 5;
  void clear_front_wheel_angle();
  static const int kFrontWheelAngleFieldNumber = 5;
  double front_wheel_angle() const;
  void set_front_wheel_angle(double value);

  // double front_wheel_angle_rate = 6;
  void clear_front_wheel_angle_rate();
  static const int kFrontWheelAngleRateFieldNumber = 6;
  double front_wheel_angle_rate() const;
  void set_front_wheel_angle_rate(double value);

  // .xsproto.control.ControlCommand.ControlMode control_mode = 2;
  void clear_control_mode();
  static const int kControlModeFieldNumber = 2;
  ::xsproto::control::ControlCommand_ControlMode control_mode() const;
  void set_control_mode(::xsproto::control::ControlCommand_ControlMode value);

  // bool estop = 9;
  void clear_estop();
  static const int kEstopFieldNumber = 9;
  bool estop() const;
  void set_estop(bool value);

  // bool hand_brake = 12;
  void clear_hand_brake();
  static const int kHandBrakeFieldNumber = 12;
  bool hand_brake() const;
  void set_hand_brake(bool value);

  // double fuel_rate = 10;
  void clear_fuel_rate();
  static const int kFuelRateFieldNumber = 10;
  double fuel_rate() const;
  void set_fuel_rate(double value);

  // double brake_rate = 11;
  void clear_brake_rate();
  static const int kBrakeRateFieldNumber = 11;
  double brake_rate() const;
  void set_brake_rate(double value);

  // @@protoc_insertion_point(class_scope:xsproto.control.ControlCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::xsproto::control::ControlCommand_Logic* logic_;
  double timestamp_;
  double speed_;
  double accel_;
  double front_wheel_angle_;
  double front_wheel_angle_rate_;
  int control_mode_;
  bool estop_;
  bool hand_brake_;
  double fuel_rate_;
  double brake_rate_;
  mutable int _cached_size_;
  friend struct ::protobuf_control_2fcontrol_5fcommand_2eproto::TableStruct;
  friend void ::protobuf_control_2fcontrol_5fcommand_2eproto::InitDefaultsControlCommandImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlCommand_Logic

// bool low_beam = 1;
inline void ControlCommand_Logic::clear_low_beam() {
  low_beam_ = false;
}
inline bool ControlCommand_Logic::low_beam() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.Logic.low_beam)
  return low_beam_;
}
inline void ControlCommand_Logic::set_low_beam(bool value) {
  
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.Logic.low_beam)
}

// bool high_beam = 2;
inline void ControlCommand_Logic::clear_high_beam() {
  high_beam_ = false;
}
inline bool ControlCommand_Logic::high_beam() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.Logic.high_beam)
  return high_beam_;
}
inline void ControlCommand_Logic::set_high_beam(bool value) {
  
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.Logic.high_beam)
}

// bool turn_left_light = 3;
inline void ControlCommand_Logic::clear_turn_left_light() {
  turn_left_light_ = false;
}
inline bool ControlCommand_Logic::turn_left_light() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.Logic.turn_left_light)
  return turn_left_light_;
}
inline void ControlCommand_Logic::set_turn_left_light(bool value) {
  
  turn_left_light_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.Logic.turn_left_light)
}

// bool turn_right_light = 4;
inline void ControlCommand_Logic::clear_turn_right_light() {
  turn_right_light_ = false;
}
inline bool ControlCommand_Logic::turn_right_light() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.Logic.turn_right_light)
  return turn_right_light_;
}
inline void ControlCommand_Logic::set_turn_right_light(bool value) {
  
  turn_right_light_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.Logic.turn_right_light)
}

// bool horn = 8;
inline void ControlCommand_Logic::clear_horn() {
  horn_ = false;
}
inline bool ControlCommand_Logic::horn() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.Logic.horn)
  return horn_;
}
inline void ControlCommand_Logic::set_horn(bool value) {
  
  horn_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.Logic.horn)
}

// -------------------------------------------------------------------

// ControlCommand

// double timestamp = 1;
inline void ControlCommand::clear_timestamp() {
  timestamp_ = 0;
}
inline double ControlCommand::timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.timestamp)
  return timestamp_;
}
inline void ControlCommand::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.timestamp)
}

// .xsproto.control.ControlCommand.ControlMode control_mode = 2;
inline void ControlCommand::clear_control_mode() {
  control_mode_ = 0;
}
inline ::xsproto::control::ControlCommand_ControlMode ControlCommand::control_mode() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.control_mode)
  return static_cast< ::xsproto::control::ControlCommand_ControlMode >(control_mode_);
}
inline void ControlCommand::set_control_mode(::xsproto::control::ControlCommand_ControlMode value) {
  
  control_mode_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.control_mode)
}

// double speed = 3;
inline void ControlCommand::clear_speed() {
  speed_ = 0;
}
inline double ControlCommand::speed() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.speed)
  return speed_;
}
inline void ControlCommand::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.speed)
}

// double accel = 4;
inline void ControlCommand::clear_accel() {
  accel_ = 0;
}
inline double ControlCommand::accel() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.accel)
  return accel_;
}
inline void ControlCommand::set_accel(double value) {
  
  accel_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.accel)
}

// double front_wheel_angle = 5;
inline void ControlCommand::clear_front_wheel_angle() {
  front_wheel_angle_ = 0;
}
inline double ControlCommand::front_wheel_angle() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.front_wheel_angle)
  return front_wheel_angle_;
}
inline void ControlCommand::set_front_wheel_angle(double value) {
  
  front_wheel_angle_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.front_wheel_angle)
}

// double front_wheel_angle_rate = 6;
inline void ControlCommand::clear_front_wheel_angle_rate() {
  front_wheel_angle_rate_ = 0;
}
inline double ControlCommand::front_wheel_angle_rate() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.front_wheel_angle_rate)
  return front_wheel_angle_rate_;
}
inline void ControlCommand::set_front_wheel_angle_rate(double value) {
  
  front_wheel_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.front_wheel_angle_rate)
}

// .xsproto.control.ControlCommand.Logic logic = 8;
inline bool ControlCommand::has_logic() const {
  return this != internal_default_instance() && logic_ != NULL;
}
inline void ControlCommand::clear_logic() {
  if (GetArenaNoVirtual() == NULL && logic_ != NULL) {
    delete logic_;
  }
  logic_ = NULL;
}
inline const ::xsproto::control::ControlCommand_Logic& ControlCommand::logic() const {
  const ::xsproto::control::ControlCommand_Logic* p = logic_;
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.logic)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::control::ControlCommand_Logic*>(
      &::xsproto::control::_ControlCommand_Logic_default_instance_);
}
inline ::xsproto::control::ControlCommand_Logic* ControlCommand::release_logic() {
  // @@protoc_insertion_point(field_release:xsproto.control.ControlCommand.logic)
  
  ::xsproto::control::ControlCommand_Logic* temp = logic_;
  logic_ = NULL;
  return temp;
}
inline ::xsproto::control::ControlCommand_Logic* ControlCommand::mutable_logic() {
  
  if (logic_ == NULL) {
    logic_ = new ::xsproto::control::ControlCommand_Logic;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.control.ControlCommand.logic)
  return logic_;
}
inline void ControlCommand::set_allocated_logic(::xsproto::control::ControlCommand_Logic* logic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logic_;
  }
  if (logic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logic, submessage_arena);
    }
    
  } else {
    
  }
  logic_ = logic;
  // @@protoc_insertion_point(field_set_allocated:xsproto.control.ControlCommand.logic)
}

// bool estop = 9;
inline void ControlCommand::clear_estop() {
  estop_ = false;
}
inline bool ControlCommand::estop() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.estop)
  return estop_;
}
inline void ControlCommand::set_estop(bool value) {
  
  estop_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.estop)
}

// double fuel_rate = 10;
inline void ControlCommand::clear_fuel_rate() {
  fuel_rate_ = 0;
}
inline double ControlCommand::fuel_rate() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.fuel_rate)
  return fuel_rate_;
}
inline void ControlCommand::set_fuel_rate(double value) {
  
  fuel_rate_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.fuel_rate)
}

// double brake_rate = 11;
inline void ControlCommand::clear_brake_rate() {
  brake_rate_ = 0;
}
inline double ControlCommand::brake_rate() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.brake_rate)
  return brake_rate_;
}
inline void ControlCommand::set_brake_rate(double value) {
  
  brake_rate_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.brake_rate)
}

// bool hand_brake = 12;
inline void ControlCommand::clear_hand_brake() {
  hand_brake_ = false;
}
inline bool ControlCommand::hand_brake() const {
  // @@protoc_insertion_point(field_get:xsproto.control.ControlCommand.hand_brake)
  return hand_brake_;
}
inline void ControlCommand::set_hand_brake(bool value) {
  
  hand_brake_ = value;
  // @@protoc_insertion_point(field_set:xsproto.control.ControlCommand.hand_brake)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace xsproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xsproto::control::ControlCommand_ControlMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::control::ControlCommand_ControlMode>() {
  return ::xsproto::control::ControlCommand_ControlMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_control_2fcontrol_5fcommand_2eproto__INCLUDED
