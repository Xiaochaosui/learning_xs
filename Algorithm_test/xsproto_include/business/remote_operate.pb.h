// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business/remote_operate.proto

#ifndef PROTOBUF_business_2fremote_5foperate_2eproto__INCLUDED
#define PROTOBUF_business_2fremote_5foperate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_business_2fremote_5foperate_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRemoteOperateImpl();
void InitDefaultsRemoteOperate();
void InitDefaultsRemotePlanImpl();
void InitDefaultsRemotePlan();
void InitDefaultsRemotePlanPointImpl();
void InitDefaultsRemotePlanPoint();
void InitDefaultsRemoteDecisionImpl();
void InitDefaultsRemoteDecision();
void InitDefaultsRemoteMoveImpl();
void InitDefaultsRemoteMove();
inline void InitDefaults() {
  InitDefaultsRemoteOperate();
  InitDefaultsRemotePlan();
  InitDefaultsRemotePlanPoint();
  InitDefaultsRemoteDecision();
  InitDefaultsRemoteMove();
}
}  // namespace protobuf_business_2fremote_5foperate_2eproto
namespace xsproto {
namespace communication {
class RemoteDecision;
class RemoteDecisionDefaultTypeInternal;
extern RemoteDecisionDefaultTypeInternal _RemoteDecision_default_instance_;
class RemoteMove;
class RemoteMoveDefaultTypeInternal;
extern RemoteMoveDefaultTypeInternal _RemoteMove_default_instance_;
class RemoteOperate;
class RemoteOperateDefaultTypeInternal;
extern RemoteOperateDefaultTypeInternal _RemoteOperate_default_instance_;
class RemotePlan;
class RemotePlanDefaultTypeInternal;
extern RemotePlanDefaultTypeInternal _RemotePlan_default_instance_;
class RemotePlanPoint;
class RemotePlanPointDefaultTypeInternal;
extern RemotePlanPointDefaultTypeInternal _RemotePlanPoint_default_instance_;
}  // namespace communication
}  // namespace xsproto
namespace xsproto {
namespace communication {

// ===================================================================

class RemoteOperate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.RemoteOperate) */ {
 public:
  RemoteOperate();
  virtual ~RemoteOperate();

  RemoteOperate(const RemoteOperate& from);

  inline RemoteOperate& operator=(const RemoteOperate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoteOperate(RemoteOperate&& from) noexcept
    : RemoteOperate() {
    *this = ::std::move(from);
  }

  inline RemoteOperate& operator=(RemoteOperate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteOperate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteOperate* internal_default_instance() {
    return reinterpret_cast<const RemoteOperate*>(
               &_RemoteOperate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RemoteOperate* other);
  friend void swap(RemoteOperate& a, RemoteOperate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoteOperate* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoteOperate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoteOperate& from);
  void MergeFrom(const RemoteOperate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoteOperate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // .google.protobuf.Any msg_content = 5;
  bool has_msg_content() const;
  void clear_msg_content();
  static const int kMsgContentFieldNumber = 5;
  const ::google::protobuf::Any& msg_content() const;
  ::google::protobuf::Any* release_msg_content();
  ::google::protobuf::Any* mutable_msg_content();
  void set_allocated_msg_content(::google::protobuf::Any* msg_content);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int32 seq_num = 3;
  void clear_seq_num();
  static const int kSeqNumFieldNumber = 3;
  ::google::protobuf::int32 seq_num() const;
  void set_seq_num(::google::protobuf::int32 value);

  // int32 msg_code = 4;
  void clear_msg_code();
  static const int kMsgCodeFieldNumber = 4;
  ::google::protobuf::int32 msg_code() const;
  void set_msg_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.RemoteOperate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::xsproto::base::Header* header_;
  ::google::protobuf::Any* msg_content_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 seq_num_;
  ::google::protobuf::int32 msg_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fremote_5foperate_2eproto::TableStruct;
  friend void ::protobuf_business_2fremote_5foperate_2eproto::InitDefaultsRemoteOperateImpl();
};
// -------------------------------------------------------------------

class RemotePlan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.RemotePlan) */ {
 public:
  RemotePlan();
  virtual ~RemotePlan();

  RemotePlan(const RemotePlan& from);

  inline RemotePlan& operator=(const RemotePlan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemotePlan(RemotePlan&& from) noexcept
    : RemotePlan() {
    *this = ::std::move(from);
  }

  inline RemotePlan& operator=(RemotePlan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemotePlan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemotePlan* internal_default_instance() {
    return reinterpret_cast<const RemotePlan*>(
               &_RemotePlan_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RemotePlan* other);
  friend void swap(RemotePlan& a, RemotePlan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemotePlan* New() const PROTOBUF_FINAL { return New(NULL); }

  RemotePlan* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemotePlan& from);
  void MergeFrom(const RemotePlan& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemotePlan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xsproto.communication.RemotePlanPoint points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  const ::xsproto::communication::RemotePlanPoint& points(int index) const;
  ::xsproto::communication::RemotePlanPoint* mutable_points(int index);
  ::xsproto::communication::RemotePlanPoint* add_points();
  ::google::protobuf::RepeatedPtrField< ::xsproto::communication::RemotePlanPoint >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::communication::RemotePlanPoint >&
      points() const;

  // @@protoc_insertion_point(class_scope:xsproto.communication.RemotePlan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::communication::RemotePlanPoint > points_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fremote_5foperate_2eproto::TableStruct;
  friend void ::protobuf_business_2fremote_5foperate_2eproto::InitDefaultsRemotePlanImpl();
};
// -------------------------------------------------------------------

class RemotePlanPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.RemotePlanPoint) */ {
 public:
  RemotePlanPoint();
  virtual ~RemotePlanPoint();

  RemotePlanPoint(const RemotePlanPoint& from);

  inline RemotePlanPoint& operator=(const RemotePlanPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemotePlanPoint(RemotePlanPoint&& from) noexcept
    : RemotePlanPoint() {
    *this = ::std::move(from);
  }

  inline RemotePlanPoint& operator=(RemotePlanPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemotePlanPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemotePlanPoint* internal_default_instance() {
    return reinterpret_cast<const RemotePlanPoint*>(
               &_RemotePlanPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RemotePlanPoint* other);
  friend void swap(RemotePlanPoint& a, RemotePlanPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemotePlanPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  RemotePlanPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemotePlanPoint& from);
  void MergeFrom(const RemotePlanPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemotePlanPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double velocity = 3;
  void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  double velocity() const;
  void set_velocity(double value);

  // double yaw = 4;
  void clear_yaw();
  static const int kYawFieldNumber = 4;
  double yaw() const;
  void set_yaw(double value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.RemotePlanPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double velocity_;
  double yaw_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fremote_5foperate_2eproto::TableStruct;
  friend void ::protobuf_business_2fremote_5foperate_2eproto::InitDefaultsRemotePlanPointImpl();
};
// -------------------------------------------------------------------

class RemoteDecision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.RemoteDecision) */ {
 public:
  RemoteDecision();
  virtual ~RemoteDecision();

  RemoteDecision(const RemoteDecision& from);

  inline RemoteDecision& operator=(const RemoteDecision& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoteDecision(RemoteDecision&& from) noexcept
    : RemoteDecision() {
    *this = ::std::move(from);
  }

  inline RemoteDecision& operator=(RemoteDecision&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteDecision& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteDecision* internal_default_instance() {
    return reinterpret_cast<const RemoteDecision*>(
               &_RemoteDecision_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RemoteDecision* other);
  friend void swap(RemoteDecision& a, RemoteDecision& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoteDecision* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoteDecision* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoteDecision& from);
  void MergeFrom(const RemoteDecision& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoteDecision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double distance = 2;
  void clear_distance();
  static const int kDistanceFieldNumber = 2;
  double distance() const;
  void set_distance(double value);

  // int32 command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::google::protobuf::int32 command() const;
  void set_command(::google::protobuf::int32 value);

  // int32 direction = 3;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // int32 lane_num = 4;
  void clear_lane_num();
  static const int kLaneNumFieldNumber = 4;
  ::google::protobuf::int32 lane_num() const;
  void set_lane_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.RemoteDecision)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double distance_;
  ::google::protobuf::int32 command_;
  ::google::protobuf::int32 direction_;
  ::google::protobuf::int32 lane_num_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fremote_5foperate_2eproto::TableStruct;
  friend void ::protobuf_business_2fremote_5foperate_2eproto::InitDefaultsRemoteDecisionImpl();
};
// -------------------------------------------------------------------

class RemoteMove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.RemoteMove) */ {
 public:
  RemoteMove();
  virtual ~RemoteMove();

  RemoteMove(const RemoteMove& from);

  inline RemoteMove& operator=(const RemoteMove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoteMove(RemoteMove&& from) noexcept
    : RemoteMove() {
    *this = ::std::move(from);
  }

  inline RemoteMove& operator=(RemoteMove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteMove* internal_default_instance() {
    return reinterpret_cast<const RemoteMove*>(
               &_RemoteMove_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RemoteMove* other);
  friend void swap(RemoteMove& a, RemoteMove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoteMove* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoteMove* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoteMove& from);
  void MergeFrom(const RemoteMove& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoteMove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double linear_speed = 1;
  void clear_linear_speed();
  static const int kLinearSpeedFieldNumber = 1;
  double linear_speed() const;
  void set_linear_speed(double value);

  // double angular_speed = 2;
  void clear_angular_speed();
  static const int kAngularSpeedFieldNumber = 2;
  double angular_speed() const;
  void set_angular_speed(double value);

  // int32 valid = 3;
  void clear_valid();
  static const int kValidFieldNumber = 3;
  ::google::protobuf::int32 valid() const;
  void set_valid(::google::protobuf::int32 value);

  // int32 obstacle_attribute = 4;
  void clear_obstacle_attribute();
  static const int kObstacleAttributeFieldNumber = 4;
  ::google::protobuf::int32 obstacle_attribute() const;
  void set_obstacle_attribute(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.RemoteMove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double linear_speed_;
  double angular_speed_;
  ::google::protobuf::int32 valid_;
  ::google::protobuf::int32 obstacle_attribute_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2fremote_5foperate_2eproto::TableStruct;
  friend void ::protobuf_business_2fremote_5foperate_2eproto::InitDefaultsRemoteMoveImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RemoteOperate

// .xsproto.base.Header header = 1;
inline bool RemoteOperate::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& RemoteOperate::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.communication.RemoteOperate.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* RemoteOperate::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.communication.RemoteOperate.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* RemoteOperate::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.RemoteOperate.header)
  return header_;
}
inline void RemoteOperate::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.RemoteOperate.header)
}

// int64 timestamp = 2;
inline void RemoteOperate::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RemoteOperate::timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemoteOperate.timestamp)
  return timestamp_;
}
inline void RemoteOperate::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemoteOperate.timestamp)
}

// int32 seq_num = 3;
inline void RemoteOperate::clear_seq_num() {
  seq_num_ = 0;
}
inline ::google::protobuf::int32 RemoteOperate::seq_num() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemoteOperate.seq_num)
  return seq_num_;
}
inline void RemoteOperate::set_seq_num(::google::protobuf::int32 value) {
  
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemoteOperate.seq_num)
}

// int32 msg_code = 4;
inline void RemoteOperate::clear_msg_code() {
  msg_code_ = 0;
}
inline ::google::protobuf::int32 RemoteOperate::msg_code() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemoteOperate.msg_code)
  return msg_code_;
}
inline void RemoteOperate::set_msg_code(::google::protobuf::int32 value) {
  
  msg_code_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemoteOperate.msg_code)
}

// .google.protobuf.Any msg_content = 5;
inline bool RemoteOperate::has_msg_content() const {
  return this != internal_default_instance() && msg_content_ != NULL;
}
inline const ::google::protobuf::Any& RemoteOperate::msg_content() const {
  const ::google::protobuf::Any* p = msg_content_;
  // @@protoc_insertion_point(field_get:xsproto.communication.RemoteOperate.msg_content)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* RemoteOperate::release_msg_content() {
  // @@protoc_insertion_point(field_release:xsproto.communication.RemoteOperate.msg_content)
  
  ::google::protobuf::Any* temp = msg_content_;
  msg_content_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* RemoteOperate::mutable_msg_content() {
  
  if (msg_content_ == NULL) {
    msg_content_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.RemoteOperate.msg_content)
  return msg_content_;
}
inline void RemoteOperate::set_allocated_msg_content(::google::protobuf::Any* msg_content) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(msg_content_);
  }
  if (msg_content) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msg_content = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg_content, submessage_arena);
    }
    
  } else {
    
  }
  msg_content_ = msg_content;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.RemoteOperate.msg_content)
}

// -------------------------------------------------------------------

// RemotePlan

// repeated .xsproto.communication.RemotePlanPoint points = 1;
inline int RemotePlan::points_size() const {
  return points_.size();
}
inline void RemotePlan::clear_points() {
  points_.Clear();
}
inline const ::xsproto::communication::RemotePlanPoint& RemotePlan::points(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemotePlan.points)
  return points_.Get(index);
}
inline ::xsproto::communication::RemotePlanPoint* RemotePlan::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.communication.RemotePlan.points)
  return points_.Mutable(index);
}
inline ::xsproto::communication::RemotePlanPoint* RemotePlan::add_points() {
  // @@protoc_insertion_point(field_add:xsproto.communication.RemotePlan.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::communication::RemotePlanPoint >*
RemotePlan::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.communication.RemotePlan.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::communication::RemotePlanPoint >&
RemotePlan::points() const {
  // @@protoc_insertion_point(field_list:xsproto.communication.RemotePlan.points)
  return points_;
}

// -------------------------------------------------------------------

// RemotePlanPoint

// double x = 1;
inline void RemotePlanPoint::clear_x() {
  x_ = 0;
}
inline double RemotePlanPoint::x() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemotePlanPoint.x)
  return x_;
}
inline void RemotePlanPoint::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemotePlanPoint.x)
}

// double y = 2;
inline void RemotePlanPoint::clear_y() {
  y_ = 0;
}
inline double RemotePlanPoint::y() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemotePlanPoint.y)
  return y_;
}
inline void RemotePlanPoint::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemotePlanPoint.y)
}

// double velocity = 3;
inline void RemotePlanPoint::clear_velocity() {
  velocity_ = 0;
}
inline double RemotePlanPoint::velocity() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemotePlanPoint.velocity)
  return velocity_;
}
inline void RemotePlanPoint::set_velocity(double value) {
  
  velocity_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemotePlanPoint.velocity)
}

// double yaw = 4;
inline void RemotePlanPoint::clear_yaw() {
  yaw_ = 0;
}
inline double RemotePlanPoint::yaw() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemotePlanPoint.yaw)
  return yaw_;
}
inline void RemotePlanPoint::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemotePlanPoint.yaw)
}

// -------------------------------------------------------------------

// RemoteDecision

// int32 command = 1;
inline void RemoteDecision::clear_command() {
  command_ = 0;
}
inline ::google::protobuf::int32 RemoteDecision::command() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemoteDecision.command)
  return command_;
}
inline void RemoteDecision::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemoteDecision.command)
}

// double distance = 2;
inline void RemoteDecision::clear_distance() {
  distance_ = 0;
}
inline double RemoteDecision::distance() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemoteDecision.distance)
  return distance_;
}
inline void RemoteDecision::set_distance(double value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemoteDecision.distance)
}

// int32 direction = 3;
inline void RemoteDecision::clear_direction() {
  direction_ = 0;
}
inline ::google::protobuf::int32 RemoteDecision::direction() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemoteDecision.direction)
  return direction_;
}
inline void RemoteDecision::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemoteDecision.direction)
}

// int32 lane_num = 4;
inline void RemoteDecision::clear_lane_num() {
  lane_num_ = 0;
}
inline ::google::protobuf::int32 RemoteDecision::lane_num() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemoteDecision.lane_num)
  return lane_num_;
}
inline void RemoteDecision::set_lane_num(::google::protobuf::int32 value) {
  
  lane_num_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemoteDecision.lane_num)
}

// -------------------------------------------------------------------

// RemoteMove

// double linear_speed = 1;
inline void RemoteMove::clear_linear_speed() {
  linear_speed_ = 0;
}
inline double RemoteMove::linear_speed() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemoteMove.linear_speed)
  return linear_speed_;
}
inline void RemoteMove::set_linear_speed(double value) {
  
  linear_speed_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemoteMove.linear_speed)
}

// double angular_speed = 2;
inline void RemoteMove::clear_angular_speed() {
  angular_speed_ = 0;
}
inline double RemoteMove::angular_speed() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemoteMove.angular_speed)
  return angular_speed_;
}
inline void RemoteMove::set_angular_speed(double value) {
  
  angular_speed_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemoteMove.angular_speed)
}

// int32 valid = 3;
inline void RemoteMove::clear_valid() {
  valid_ = 0;
}
inline ::google::protobuf::int32 RemoteMove::valid() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemoteMove.valid)
  return valid_;
}
inline void RemoteMove::set_valid(::google::protobuf::int32 value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemoteMove.valid)
}

// int32 obstacle_attribute = 4;
inline void RemoteMove::clear_obstacle_attribute() {
  obstacle_attribute_ = 0;
}
inline ::google::protobuf::int32 RemoteMove::obstacle_attribute() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.RemoteMove.obstacle_attribute)
  return obstacle_attribute_;
}
inline void RemoteMove::set_obstacle_attribute(::google::protobuf::int32 value) {
  
  obstacle_attribute_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.RemoteMove.obstacle_attribute)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_business_2fremote_5foperate_2eproto__INCLUDED
