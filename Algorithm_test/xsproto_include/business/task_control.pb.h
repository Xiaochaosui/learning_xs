// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business/task_control.proto

#ifndef PROTOBUF_business_2ftask_5fcontrol_2eproto__INCLUDED
#define PROTOBUF_business_2ftask_5fcontrol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "business/ci_common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_business_2ftask_5fcontrol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTaskControlImpl();
void InitDefaultsTaskControl();
inline void InitDefaults() {
  InitDefaultsTaskControl();
}
}  // namespace protobuf_business_2ftask_5fcontrol_2eproto
namespace xsproto {
namespace communication {
class TaskControl;
class TaskControlDefaultTypeInternal;
extern TaskControlDefaultTypeInternal _TaskControl_default_instance_;
}  // namespace communication
}  // namespace xsproto
namespace xsproto {
namespace communication {

enum TaskControl_ControlType {
  TaskControl_ControlType_RUN = 0,
  TaskControl_ControlType_SUSPEND = 1,
  TaskControl_ControlType_CANCEL = 2,
  TaskControl_ControlType_RESUME = 3,
  TaskControl_ControlType_PULL_OVER = 4,
  TaskControl_ControlType_SLOW_DOWN = 5,
  TaskControl_ControlType_WAIT = 6,
  TaskControl_ControlType_WAIT_FINISH = 7,
  TaskControl_ControlType_TaskControl_ControlType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TaskControl_ControlType_TaskControl_ControlType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TaskControl_ControlType_IsValid(int value);
const TaskControl_ControlType TaskControl_ControlType_ControlType_MIN = TaskControl_ControlType_RUN;
const TaskControl_ControlType TaskControl_ControlType_ControlType_MAX = TaskControl_ControlType_WAIT_FINISH;
const int TaskControl_ControlType_ControlType_ARRAYSIZE = TaskControl_ControlType_ControlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskControl_ControlType_descriptor();
inline const ::std::string& TaskControl_ControlType_Name(TaskControl_ControlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskControl_ControlType_descriptor(), value);
}
inline bool TaskControl_ControlType_Parse(
    const ::std::string& name, TaskControl_ControlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskControl_ControlType>(
    TaskControl_ControlType_descriptor(), name, value);
}
// ===================================================================

class TaskControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.communication.TaskControl) */ {
 public:
  TaskControl();
  virtual ~TaskControl();

  TaskControl(const TaskControl& from);

  inline TaskControl& operator=(const TaskControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskControl(TaskControl&& from) noexcept
    : TaskControl() {
    *this = ::std::move(from);
  }

  inline TaskControl& operator=(TaskControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskControl* internal_default_instance() {
    return reinterpret_cast<const TaskControl*>(
               &_TaskControl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TaskControl* other);
  friend void swap(TaskControl& a, TaskControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskControl* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskControl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskControl& from);
  void MergeFrom(const TaskControl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TaskControl_ControlType ControlType;
  static const ControlType RUN =
    TaskControl_ControlType_RUN;
  static const ControlType SUSPEND =
    TaskControl_ControlType_SUSPEND;
  static const ControlType CANCEL =
    TaskControl_ControlType_CANCEL;
  static const ControlType RESUME =
    TaskControl_ControlType_RESUME;
  static const ControlType PULL_OVER =
    TaskControl_ControlType_PULL_OVER;
  static const ControlType SLOW_DOWN =
    TaskControl_ControlType_SLOW_DOWN;
  static const ControlType WAIT =
    TaskControl_ControlType_WAIT;
  static const ControlType WAIT_FINISH =
    TaskControl_ControlType_WAIT_FINISH;
  static inline bool ControlType_IsValid(int value) {
    return TaskControl_ControlType_IsValid(value);
  }
  static const ControlType ControlType_MIN =
    TaskControl_ControlType_ControlType_MIN;
  static const ControlType ControlType_MAX =
    TaskControl_ControlType_ControlType_MAX;
  static const int ControlType_ARRAYSIZE =
    TaskControl_ControlType_ControlType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ControlType_descriptor() {
    return TaskControl_ControlType_descriptor();
  }
  static inline const ::std::string& ControlType_Name(ControlType value) {
    return TaskControl_ControlType_Name(value);
  }
  static inline bool ControlType_Parse(const ::std::string& name,
      ControlType* value) {
    return TaskControl_ControlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .xsproto.communication.Point pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  const ::xsproto::communication::Point& pose() const;
  ::xsproto::communication::Point* release_pose();
  ::xsproto::communication::Point* mutable_pose();
  void set_allocated_pose(::xsproto::communication::Point* pose);

  // .xsproto.communication.TaskControl.ControlType control_type = 1;
  void clear_control_type();
  static const int kControlTypeFieldNumber = 1;
  ::xsproto::communication::TaskControl_ControlType control_type() const;
  void set_control_type(::xsproto::communication::TaskControl_ControlType value);

  // int32 wait_time = 3;
  void clear_wait_time();
  static const int kWaitTimeFieldNumber = 3;
  ::google::protobuf::int32 wait_time() const;
  void set_wait_time(::google::protobuf::int32 value);

  // int32 wait_point_id = 4;
  void clear_wait_point_id();
  static const int kWaitPointIdFieldNumber = 4;
  ::google::protobuf::int32 wait_point_id() const;
  void set_wait_point_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.communication.TaskControl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::xsproto::communication::Point* pose_;
  int control_type_;
  ::google::protobuf::int32 wait_time_;
  ::google::protobuf::int32 wait_point_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_business_2ftask_5fcontrol_2eproto::TableStruct;
  friend void ::protobuf_business_2ftask_5fcontrol_2eproto::InitDefaultsTaskControlImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskControl

// .xsproto.communication.TaskControl.ControlType control_type = 1;
inline void TaskControl::clear_control_type() {
  control_type_ = 0;
}
inline ::xsproto::communication::TaskControl_ControlType TaskControl::control_type() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.TaskControl.control_type)
  return static_cast< ::xsproto::communication::TaskControl_ControlType >(control_type_);
}
inline void TaskControl::set_control_type(::xsproto::communication::TaskControl_ControlType value) {
  
  control_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.TaskControl.control_type)
}

// .xsproto.communication.Point pose = 2;
inline bool TaskControl::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::xsproto::communication::Point& TaskControl::pose() const {
  const ::xsproto::communication::Point* p = pose_;
  // @@protoc_insertion_point(field_get:xsproto.communication.TaskControl.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::communication::Point*>(
      &::xsproto::communication::_Point_default_instance_);
}
inline ::xsproto::communication::Point* TaskControl::release_pose() {
  // @@protoc_insertion_point(field_release:xsproto.communication.TaskControl.pose)
  
  ::xsproto::communication::Point* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::xsproto::communication::Point* TaskControl::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::xsproto::communication::Point;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.communication.TaskControl.pose)
  return pose_;
}
inline void TaskControl::set_allocated_pose(::xsproto::communication::Point* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:xsproto.communication.TaskControl.pose)
}

// int32 wait_time = 3;
inline void TaskControl::clear_wait_time() {
  wait_time_ = 0;
}
inline ::google::protobuf::int32 TaskControl::wait_time() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.TaskControl.wait_time)
  return wait_time_;
}
inline void TaskControl::set_wait_time(::google::protobuf::int32 value) {
  
  wait_time_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.TaskControl.wait_time)
}

// int32 wait_point_id = 4;
inline void TaskControl::clear_wait_point_id() {
  wait_point_id_ = 0;
}
inline ::google::protobuf::int32 TaskControl::wait_point_id() const {
  // @@protoc_insertion_point(field_get:xsproto.communication.TaskControl.wait_point_id)
  return wait_point_id_;
}
inline void TaskControl::set_wait_point_id(::google::protobuf::int32 value) {
  
  wait_point_id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.communication.TaskControl.wait_point_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace communication
}  // namespace xsproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xsproto::communication::TaskControl_ControlType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsproto::communication::TaskControl_ControlType>() {
  return ::xsproto::communication::TaskControl_ControlType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_business_2ftask_5fcontrol_2eproto__INCLUDED
