// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/curbinfo.proto

#ifndef PROTOBUF_perception_2fcurbinfo_2eproto__INCLUDED
#define PROTOBUF_perception_2fcurbinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_perception_2fcurbinfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCurbPointImpl();
void InitDefaultsCurbPoint();
void InitDefaultsCurbInfoMsgImpl();
void InitDefaultsCurbInfoMsg();
inline void InitDefaults() {
  InitDefaultsCurbPoint();
  InitDefaultsCurbInfoMsg();
}
}  // namespace protobuf_perception_2fcurbinfo_2eproto
namespace xsproto {
namespace perception {
class CurbInfoMsg;
class CurbInfoMsgDefaultTypeInternal;
extern CurbInfoMsgDefaultTypeInternal _CurbInfoMsg_default_instance_;
class CurbPoint;
class CurbPointDefaultTypeInternal;
extern CurbPointDefaultTypeInternal _CurbPoint_default_instance_;
}  // namespace perception
}  // namespace xsproto
namespace xsproto {
namespace perception {

// ===================================================================

class CurbPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.CurbPoint) */ {
 public:
  CurbPoint();
  virtual ~CurbPoint();

  CurbPoint(const CurbPoint& from);

  inline CurbPoint& operator=(const CurbPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CurbPoint(CurbPoint&& from) noexcept
    : CurbPoint() {
    *this = ::std::move(from);
  }

  inline CurbPoint& operator=(CurbPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CurbPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurbPoint* internal_default_instance() {
    return reinterpret_cast<const CurbPoint*>(
               &_CurbPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CurbPoint* other);
  friend void swap(CurbPoint& a, CurbPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CurbPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  CurbPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CurbPoint& from);
  void MergeFrom(const CurbPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CurbPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // sint32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.perception.CurbPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2fcurbinfo_2eproto::TableStruct;
  friend void ::protobuf_perception_2fcurbinfo_2eproto::InitDefaultsCurbPointImpl();
};
// -------------------------------------------------------------------

class CurbInfoMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.CurbInfoMsg) */ {
 public:
  CurbInfoMsg();
  virtual ~CurbInfoMsg();

  CurbInfoMsg(const CurbInfoMsg& from);

  inline CurbInfoMsg& operator=(const CurbInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CurbInfoMsg(CurbInfoMsg&& from) noexcept
    : CurbInfoMsg() {
    *this = ::std::move(from);
  }

  inline CurbInfoMsg& operator=(CurbInfoMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CurbInfoMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurbInfoMsg* internal_default_instance() {
    return reinterpret_cast<const CurbInfoMsg*>(
               &_CurbInfoMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CurbInfoMsg* other);
  friend void swap(CurbInfoMsg& a, CurbInfoMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CurbInfoMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  CurbInfoMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CurbInfoMsg& from);
  void MergeFrom(const CurbInfoMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CurbInfoMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xsproto.perception.CurbPoint left_curb = 2;
  int left_curb_size() const;
  void clear_left_curb();
  static const int kLeftCurbFieldNumber = 2;
  const ::xsproto::perception::CurbPoint& left_curb(int index) const;
  ::xsproto::perception::CurbPoint* mutable_left_curb(int index);
  ::xsproto::perception::CurbPoint* add_left_curb();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >*
      mutable_left_curb();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >&
      left_curb() const;

  // repeated .xsproto.perception.CurbPoint right_curb = 3;
  int right_curb_size() const;
  void clear_right_curb();
  static const int kRightCurbFieldNumber = 3;
  const ::xsproto::perception::CurbPoint& right_curb(int index) const;
  ::xsproto::perception::CurbPoint* mutable_right_curb(int index);
  ::xsproto::perception::CurbPoint* add_right_curb();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >*
      mutable_right_curb();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >&
      right_curb() const;

  // repeated .xsproto.perception.CurbPoint left_guided_curve = 4;
  int left_guided_curve_size() const;
  void clear_left_guided_curve();
  static const int kLeftGuidedCurveFieldNumber = 4;
  const ::xsproto::perception::CurbPoint& left_guided_curve(int index) const;
  ::xsproto::perception::CurbPoint* mutable_left_guided_curve(int index);
  ::xsproto::perception::CurbPoint* add_left_guided_curve();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >*
      mutable_left_guided_curve();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >&
      left_guided_curve() const;

  // repeated .xsproto.perception.CurbPoint right_guided_curve = 5;
  int right_guided_curve_size() const;
  void clear_right_guided_curve();
  static const int kRightGuidedCurveFieldNumber = 5;
  const ::xsproto::perception::CurbPoint& right_guided_curve(int index) const;
  ::xsproto::perception::CurbPoint* mutable_right_guided_curve(int index);
  ::xsproto::perception::CurbPoint* add_right_guided_curve();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >*
      mutable_right_guided_curve();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >&
      right_guided_curve() const;

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // @@protoc_insertion_point(class_scope:xsproto.perception.CurbInfoMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint > left_curb_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint > right_curb_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint > left_guided_curve_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint > right_guided_curve_;
  ::xsproto::base::Header* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2fcurbinfo_2eproto::TableStruct;
  friend void ::protobuf_perception_2fcurbinfo_2eproto::InitDefaultsCurbInfoMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CurbPoint

// double x = 1;
inline void CurbPoint::clear_x() {
  x_ = 0;
}
inline double CurbPoint::x() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.CurbPoint.x)
  return x_;
}
inline void CurbPoint::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.CurbPoint.x)
}

// double y = 2;
inline void CurbPoint::clear_y() {
  y_ = 0;
}
inline double CurbPoint::y() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.CurbPoint.y)
  return y_;
}
inline void CurbPoint::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.CurbPoint.y)
}

// sint32 type = 3;
inline void CurbPoint::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CurbPoint::type() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.CurbPoint.type)
  return type_;
}
inline void CurbPoint::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.CurbPoint.type)
}

// -------------------------------------------------------------------

// CurbInfoMsg

// .xsproto.base.Header header = 1;
inline bool CurbInfoMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& CurbInfoMsg::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.perception.CurbInfoMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* CurbInfoMsg::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.perception.CurbInfoMsg.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* CurbInfoMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.CurbInfoMsg.header)
  return header_;
}
inline void CurbInfoMsg::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.CurbInfoMsg.header)
}

// repeated .xsproto.perception.CurbPoint left_curb = 2;
inline int CurbInfoMsg::left_curb_size() const {
  return left_curb_.size();
}
inline void CurbInfoMsg::clear_left_curb() {
  left_curb_.Clear();
}
inline const ::xsproto::perception::CurbPoint& CurbInfoMsg::left_curb(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.CurbInfoMsg.left_curb)
  return left_curb_.Get(index);
}
inline ::xsproto::perception::CurbPoint* CurbInfoMsg::mutable_left_curb(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.CurbInfoMsg.left_curb)
  return left_curb_.Mutable(index);
}
inline ::xsproto::perception::CurbPoint* CurbInfoMsg::add_left_curb() {
  // @@protoc_insertion_point(field_add:xsproto.perception.CurbInfoMsg.left_curb)
  return left_curb_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >*
CurbInfoMsg::mutable_left_curb() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.CurbInfoMsg.left_curb)
  return &left_curb_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >&
CurbInfoMsg::left_curb() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.CurbInfoMsg.left_curb)
  return left_curb_;
}

// repeated .xsproto.perception.CurbPoint right_curb = 3;
inline int CurbInfoMsg::right_curb_size() const {
  return right_curb_.size();
}
inline void CurbInfoMsg::clear_right_curb() {
  right_curb_.Clear();
}
inline const ::xsproto::perception::CurbPoint& CurbInfoMsg::right_curb(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.CurbInfoMsg.right_curb)
  return right_curb_.Get(index);
}
inline ::xsproto::perception::CurbPoint* CurbInfoMsg::mutable_right_curb(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.CurbInfoMsg.right_curb)
  return right_curb_.Mutable(index);
}
inline ::xsproto::perception::CurbPoint* CurbInfoMsg::add_right_curb() {
  // @@protoc_insertion_point(field_add:xsproto.perception.CurbInfoMsg.right_curb)
  return right_curb_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >*
CurbInfoMsg::mutable_right_curb() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.CurbInfoMsg.right_curb)
  return &right_curb_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >&
CurbInfoMsg::right_curb() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.CurbInfoMsg.right_curb)
  return right_curb_;
}

// repeated .xsproto.perception.CurbPoint left_guided_curve = 4;
inline int CurbInfoMsg::left_guided_curve_size() const {
  return left_guided_curve_.size();
}
inline void CurbInfoMsg::clear_left_guided_curve() {
  left_guided_curve_.Clear();
}
inline const ::xsproto::perception::CurbPoint& CurbInfoMsg::left_guided_curve(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.CurbInfoMsg.left_guided_curve)
  return left_guided_curve_.Get(index);
}
inline ::xsproto::perception::CurbPoint* CurbInfoMsg::mutable_left_guided_curve(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.CurbInfoMsg.left_guided_curve)
  return left_guided_curve_.Mutable(index);
}
inline ::xsproto::perception::CurbPoint* CurbInfoMsg::add_left_guided_curve() {
  // @@protoc_insertion_point(field_add:xsproto.perception.CurbInfoMsg.left_guided_curve)
  return left_guided_curve_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >*
CurbInfoMsg::mutable_left_guided_curve() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.CurbInfoMsg.left_guided_curve)
  return &left_guided_curve_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >&
CurbInfoMsg::left_guided_curve() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.CurbInfoMsg.left_guided_curve)
  return left_guided_curve_;
}

// repeated .xsproto.perception.CurbPoint right_guided_curve = 5;
inline int CurbInfoMsg::right_guided_curve_size() const {
  return right_guided_curve_.size();
}
inline void CurbInfoMsg::clear_right_guided_curve() {
  right_guided_curve_.Clear();
}
inline const ::xsproto::perception::CurbPoint& CurbInfoMsg::right_guided_curve(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.CurbInfoMsg.right_guided_curve)
  return right_guided_curve_.Get(index);
}
inline ::xsproto::perception::CurbPoint* CurbInfoMsg::mutable_right_guided_curve(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.CurbInfoMsg.right_guided_curve)
  return right_guided_curve_.Mutable(index);
}
inline ::xsproto::perception::CurbPoint* CurbInfoMsg::add_right_guided_curve() {
  // @@protoc_insertion_point(field_add:xsproto.perception.CurbInfoMsg.right_guided_curve)
  return right_guided_curve_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >*
CurbInfoMsg::mutable_right_guided_curve() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.CurbInfoMsg.right_guided_curve)
  return &right_guided_curve_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoint >&
CurbInfoMsg::right_guided_curve() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.CurbInfoMsg.right_guided_curve)
  return right_guided_curve_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2fcurbinfo_2eproto__INCLUDED
