// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/beckon_info.proto

#ifndef PROTOBUF_perception_2fbeckon_5finfo_2eproto__INCLUDED
#define PROTOBUF_perception_2fbeckon_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_perception_2fbeckon_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPersonStateImpl();
void InitDefaultsPersonState();
void InitDefaultsBeckonInfoImpl();
void InitDefaultsBeckonInfo();
inline void InitDefaults() {
  InitDefaultsPersonState();
  InitDefaultsBeckonInfo();
}
}  // namespace protobuf_perception_2fbeckon_5finfo_2eproto
namespace xsproto {
namespace perception {
class BeckonInfo;
class BeckonInfoDefaultTypeInternal;
extern BeckonInfoDefaultTypeInternal _BeckonInfo_default_instance_;
class PersonState;
class PersonStateDefaultTypeInternal;
extern PersonStateDefaultTypeInternal _PersonState_default_instance_;
}  // namespace perception
}  // namespace xsproto
namespace xsproto {
namespace perception {

// ===================================================================

class PersonState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.PersonState) */ {
 public:
  PersonState();
  virtual ~PersonState();

  PersonState(const PersonState& from);

  inline PersonState& operator=(const PersonState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PersonState(PersonState&& from) noexcept
    : PersonState() {
    *this = ::std::move(from);
  }

  inline PersonState& operator=(PersonState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersonState* internal_default_instance() {
    return reinterpret_cast<const PersonState*>(
               &_PersonState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PersonState* other);
  friend void swap(PersonState& a, PersonState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PersonState* New() const PROTOBUF_FINAL { return New(NULL); }

  PersonState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PersonState& from);
  void MergeFrom(const PersonState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PersonState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 front_back = 2;
  void clear_front_back();
  static const int kFrontBackFieldNumber = 2;
  ::google::protobuf::int32 front_back() const;
  void set_front_back(::google::protobuf::int32 value);

  // int32 rhand_count = 3;
  void clear_rhand_count();
  static const int kRhandCountFieldNumber = 3;
  ::google::protobuf::int32 rhand_count() const;
  void set_rhand_count(::google::protobuf::int32 value);

  // int32 lhand_count = 4;
  void clear_lhand_count();
  static const int kLhandCountFieldNumber = 4;
  ::google::protobuf::int32 lhand_count() const;
  void set_lhand_count(::google::protobuf::int32 value);

  // float coord_x = 5;
  void clear_coord_x();
  static const int kCoordXFieldNumber = 5;
  float coord_x() const;
  void set_coord_x(float value);

  // float coord_y = 6;
  void clear_coord_y();
  static const int kCoordYFieldNumber = 6;
  float coord_y() const;
  void set_coord_y(float value);

  // @@protoc_insertion_point(class_scope:xsproto.perception.PersonState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 front_back_;
  ::google::protobuf::int32 rhand_count_;
  ::google::protobuf::int32 lhand_count_;
  float coord_x_;
  float coord_y_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2fbeckon_5finfo_2eproto::TableStruct;
  friend void ::protobuf_perception_2fbeckon_5finfo_2eproto::InitDefaultsPersonStateImpl();
};
// -------------------------------------------------------------------

class BeckonInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.BeckonInfo) */ {
 public:
  BeckonInfo();
  virtual ~BeckonInfo();

  BeckonInfo(const BeckonInfo& from);

  inline BeckonInfo& operator=(const BeckonInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeckonInfo(BeckonInfo&& from) noexcept
    : BeckonInfo() {
    *this = ::std::move(from);
  }

  inline BeckonInfo& operator=(BeckonInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BeckonInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeckonInfo* internal_default_instance() {
    return reinterpret_cast<const BeckonInfo*>(
               &_BeckonInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BeckonInfo* other);
  friend void swap(BeckonInfo& a, BeckonInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeckonInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  BeckonInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BeckonInfo& from);
  void MergeFrom(const BeckonInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BeckonInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xsproto.perception.PersonState person = 2;
  int person_size() const;
  void clear_person();
  static const int kPersonFieldNumber = 2;
  const ::xsproto::perception::PersonState& person(int index) const;
  ::xsproto::perception::PersonState* mutable_person(int index);
  ::xsproto::perception::PersonState* add_person();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PersonState >*
      mutable_person();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PersonState >&
      person() const;

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // @@protoc_insertion_point(class_scope:xsproto.perception.BeckonInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PersonState > person_;
  ::xsproto::base::Header* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2fbeckon_5finfo_2eproto::TableStruct;
  friend void ::protobuf_perception_2fbeckon_5finfo_2eproto::InitDefaultsBeckonInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PersonState

// int32 id = 1;
inline void PersonState::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 PersonState::id() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.PersonState.id)
  return id_;
}
inline void PersonState::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.PersonState.id)
}

// int32 front_back = 2;
inline void PersonState::clear_front_back() {
  front_back_ = 0;
}
inline ::google::protobuf::int32 PersonState::front_back() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.PersonState.front_back)
  return front_back_;
}
inline void PersonState::set_front_back(::google::protobuf::int32 value) {
  
  front_back_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.PersonState.front_back)
}

// int32 rhand_count = 3;
inline void PersonState::clear_rhand_count() {
  rhand_count_ = 0;
}
inline ::google::protobuf::int32 PersonState::rhand_count() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.PersonState.rhand_count)
  return rhand_count_;
}
inline void PersonState::set_rhand_count(::google::protobuf::int32 value) {
  
  rhand_count_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.PersonState.rhand_count)
}

// int32 lhand_count = 4;
inline void PersonState::clear_lhand_count() {
  lhand_count_ = 0;
}
inline ::google::protobuf::int32 PersonState::lhand_count() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.PersonState.lhand_count)
  return lhand_count_;
}
inline void PersonState::set_lhand_count(::google::protobuf::int32 value) {
  
  lhand_count_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.PersonState.lhand_count)
}

// float coord_x = 5;
inline void PersonState::clear_coord_x() {
  coord_x_ = 0;
}
inline float PersonState::coord_x() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.PersonState.coord_x)
  return coord_x_;
}
inline void PersonState::set_coord_x(float value) {
  
  coord_x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.PersonState.coord_x)
}

// float coord_y = 6;
inline void PersonState::clear_coord_y() {
  coord_y_ = 0;
}
inline float PersonState::coord_y() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.PersonState.coord_y)
  return coord_y_;
}
inline void PersonState::set_coord_y(float value) {
  
  coord_y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.PersonState.coord_y)
}

// -------------------------------------------------------------------

// BeckonInfo

// .xsproto.base.Header header = 1;
inline bool BeckonInfo::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& BeckonInfo::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.perception.BeckonInfo.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* BeckonInfo::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.perception.BeckonInfo.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* BeckonInfo::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.BeckonInfo.header)
  return header_;
}
inline void BeckonInfo::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.BeckonInfo.header)
}

// repeated .xsproto.perception.PersonState person = 2;
inline int BeckonInfo::person_size() const {
  return person_.size();
}
inline void BeckonInfo::clear_person() {
  person_.Clear();
}
inline const ::xsproto::perception::PersonState& BeckonInfo::person(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.BeckonInfo.person)
  return person_.Get(index);
}
inline ::xsproto::perception::PersonState* BeckonInfo::mutable_person(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.BeckonInfo.person)
  return person_.Mutable(index);
}
inline ::xsproto::perception::PersonState* BeckonInfo::add_person() {
  // @@protoc_insertion_point(field_add:xsproto.perception.BeckonInfo.person)
  return person_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PersonState >*
BeckonInfo::mutable_person() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.BeckonInfo.person)
  return &person_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::PersonState >&
BeckonInfo::person() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.BeckonInfo.person)
  return person_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2fbeckon_5finfo_2eproto__INCLUDED
