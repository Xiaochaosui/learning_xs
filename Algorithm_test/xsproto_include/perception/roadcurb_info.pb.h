// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/roadcurb_info.proto

#ifndef PROTOBUF_perception_2froadcurb_5finfo_2eproto__INCLUDED
#define PROTOBUF_perception_2froadcurb_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_perception_2froadcurb_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCurbPointsImpl();
void InitDefaultsCurbPoints();
void InitDefaultsRoadCurbInfoImpl();
void InitDefaultsRoadCurbInfo();
inline void InitDefaults() {
  InitDefaultsCurbPoints();
  InitDefaultsRoadCurbInfo();
}
}  // namespace protobuf_perception_2froadcurb_5finfo_2eproto
namespace xsproto {
namespace perception {
class CurbPoints;
class CurbPointsDefaultTypeInternal;
extern CurbPointsDefaultTypeInternal _CurbPoints_default_instance_;
class RoadCurbInfo;
class RoadCurbInfoDefaultTypeInternal;
extern RoadCurbInfoDefaultTypeInternal _RoadCurbInfo_default_instance_;
}  // namespace perception
}  // namespace xsproto
namespace xsproto {
namespace perception {

// ===================================================================

class CurbPoints : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.CurbPoints) */ {
 public:
  CurbPoints();
  virtual ~CurbPoints();

  CurbPoints(const CurbPoints& from);

  inline CurbPoints& operator=(const CurbPoints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CurbPoints(CurbPoints&& from) noexcept
    : CurbPoints() {
    *this = ::std::move(from);
  }

  inline CurbPoints& operator=(CurbPoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CurbPoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurbPoints* internal_default_instance() {
    return reinterpret_cast<const CurbPoints*>(
               &_CurbPoints_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CurbPoints* other);
  friend void swap(CurbPoints& a, CurbPoints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CurbPoints* New() const PROTOBUF_FINAL { return New(NULL); }

  CurbPoints* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CurbPoints& from);
  void MergeFrom(const CurbPoints& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CurbPoints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float x = 5;
  int x_size() const;
  void clear_x();
  static const int kXFieldNumber = 5;
  float x(int index) const;
  void set_x(int index, float value);
  void add_x(float value);
  const ::google::protobuf::RepeatedField< float >&
      x() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_x();

  // repeated float y = 6;
  int y_size() const;
  void clear_y();
  static const int kYFieldNumber = 6;
  float y(int index) const;
  void set_y(int index, float value);
  void add_y(float value);
  const ::google::protobuf::RepeatedField< float >&
      y() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_y();

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // float score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  float score() const;
  void set_score(float value);

  // int32 position = 3;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // int32 num = 4;
  void clear_num();
  static const int kNumFieldNumber = 4;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.perception.CurbPoints)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > x_;
  mutable int _x_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > y_;
  mutable int _y_cached_byte_size_;
  ::google::protobuf::int32 id_;
  float score_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 num_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2froadcurb_5finfo_2eproto::TableStruct;
  friend void ::protobuf_perception_2froadcurb_5finfo_2eproto::InitDefaultsCurbPointsImpl();
};
// -------------------------------------------------------------------

class RoadCurbInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.RoadCurbInfo) */ {
 public:
  RoadCurbInfo();
  virtual ~RoadCurbInfo();

  RoadCurbInfo(const RoadCurbInfo& from);

  inline RoadCurbInfo& operator=(const RoadCurbInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoadCurbInfo(RoadCurbInfo&& from) noexcept
    : RoadCurbInfo() {
    *this = ::std::move(from);
  }

  inline RoadCurbInfo& operator=(RoadCurbInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadCurbInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadCurbInfo* internal_default_instance() {
    return reinterpret_cast<const RoadCurbInfo*>(
               &_RoadCurbInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RoadCurbInfo* other);
  friend void swap(RoadCurbInfo& a, RoadCurbInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoadCurbInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RoadCurbInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoadCurbInfo& from);
  void MergeFrom(const RoadCurbInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoadCurbInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xsproto.perception.CurbPoints roda_curb = 2;
  int roda_curb_size() const;
  void clear_roda_curb();
  static const int kRodaCurbFieldNumber = 2;
  const ::xsproto::perception::CurbPoints& roda_curb(int index) const;
  ::xsproto::perception::CurbPoints* mutable_roda_curb(int index);
  ::xsproto::perception::CurbPoints* add_roda_curb();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoints >*
      mutable_roda_curb();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoints >&
      roda_curb() const;

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // @@protoc_insertion_point(class_scope:xsproto.perception.RoadCurbInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoints > roda_curb_;
  ::xsproto::base::Header* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2froadcurb_5finfo_2eproto::TableStruct;
  friend void ::protobuf_perception_2froadcurb_5finfo_2eproto::InitDefaultsRoadCurbInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CurbPoints

// int32 id = 1;
inline void CurbPoints::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 CurbPoints::id() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.CurbPoints.id)
  return id_;
}
inline void CurbPoints::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.CurbPoints.id)
}

// float score = 2;
inline void CurbPoints::clear_score() {
  score_ = 0;
}
inline float CurbPoints::score() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.CurbPoints.score)
  return score_;
}
inline void CurbPoints::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.CurbPoints.score)
}

// int32 position = 3;
inline void CurbPoints::clear_position() {
  position_ = 0;
}
inline ::google::protobuf::int32 CurbPoints::position() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.CurbPoints.position)
  return position_;
}
inline void CurbPoints::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.CurbPoints.position)
}

// int32 num = 4;
inline void CurbPoints::clear_num() {
  num_ = 0;
}
inline ::google::protobuf::int32 CurbPoints::num() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.CurbPoints.num)
  return num_;
}
inline void CurbPoints::set_num(::google::protobuf::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.CurbPoints.num)
}

// repeated float x = 5;
inline int CurbPoints::x_size() const {
  return x_.size();
}
inline void CurbPoints::clear_x() {
  x_.Clear();
}
inline float CurbPoints::x(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.CurbPoints.x)
  return x_.Get(index);
}
inline void CurbPoints::set_x(int index, float value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:xsproto.perception.CurbPoints.x)
}
inline void CurbPoints::add_x(float value) {
  x_.Add(value);
  // @@protoc_insertion_point(field_add:xsproto.perception.CurbPoints.x)
}
inline const ::google::protobuf::RepeatedField< float >&
CurbPoints::x() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.CurbPoints.x)
  return x_;
}
inline ::google::protobuf::RepeatedField< float >*
CurbPoints::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.CurbPoints.x)
  return &x_;
}

// repeated float y = 6;
inline int CurbPoints::y_size() const {
  return y_.size();
}
inline void CurbPoints::clear_y() {
  y_.Clear();
}
inline float CurbPoints::y(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.CurbPoints.y)
  return y_.Get(index);
}
inline void CurbPoints::set_y(int index, float value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:xsproto.perception.CurbPoints.y)
}
inline void CurbPoints::add_y(float value) {
  y_.Add(value);
  // @@protoc_insertion_point(field_add:xsproto.perception.CurbPoints.y)
}
inline const ::google::protobuf::RepeatedField< float >&
CurbPoints::y() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.CurbPoints.y)
  return y_;
}
inline ::google::protobuf::RepeatedField< float >*
CurbPoints::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.CurbPoints.y)
  return &y_;
}

// -------------------------------------------------------------------

// RoadCurbInfo

// .xsproto.base.Header header = 1;
inline bool RoadCurbInfo::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& RoadCurbInfo::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.perception.RoadCurbInfo.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* RoadCurbInfo::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.perception.RoadCurbInfo.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* RoadCurbInfo::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.RoadCurbInfo.header)
  return header_;
}
inline void RoadCurbInfo::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.RoadCurbInfo.header)
}

// repeated .xsproto.perception.CurbPoints roda_curb = 2;
inline int RoadCurbInfo::roda_curb_size() const {
  return roda_curb_.size();
}
inline void RoadCurbInfo::clear_roda_curb() {
  roda_curb_.Clear();
}
inline const ::xsproto::perception::CurbPoints& RoadCurbInfo::roda_curb(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.RoadCurbInfo.roda_curb)
  return roda_curb_.Get(index);
}
inline ::xsproto::perception::CurbPoints* RoadCurbInfo::mutable_roda_curb(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.RoadCurbInfo.roda_curb)
  return roda_curb_.Mutable(index);
}
inline ::xsproto::perception::CurbPoints* RoadCurbInfo::add_roda_curb() {
  // @@protoc_insertion_point(field_add:xsproto.perception.RoadCurbInfo.roda_curb)
  return roda_curb_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoints >*
RoadCurbInfo::mutable_roda_curb() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.RoadCurbInfo.roda_curb)
  return &roda_curb_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::CurbPoints >&
RoadCurbInfo::roda_curb() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.RoadCurbInfo.roda_curb)
  return roda_curb_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2froadcurb_5finfo_2eproto__INCLUDED
