// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/traffic_light_info.proto

#ifndef PROTOBUF_perception_2ftraffic_5flight_5finfo_2eproto__INCLUDED
#define PROTOBUF_perception_2ftraffic_5flight_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base/header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_perception_2ftraffic_5flight_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTrafficLightObjectImpl();
void InitDefaultsTrafficLightObject();
void InitDefaultsTrafficLightImpl();
void InitDefaultsTrafficLight();
void InitDefaultsTrafficLightInfoImpl();
void InitDefaultsTrafficLightInfo();
inline void InitDefaults() {
  InitDefaultsTrafficLightObject();
  InitDefaultsTrafficLight();
  InitDefaultsTrafficLightInfo();
}
}  // namespace protobuf_perception_2ftraffic_5flight_5finfo_2eproto
namespace xsproto {
namespace perception {
class TrafficLight;
class TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
class TrafficLightInfo;
class TrafficLightInfoDefaultTypeInternal;
extern TrafficLightInfoDefaultTypeInternal _TrafficLightInfo_default_instance_;
class TrafficLightObject;
class TrafficLightObjectDefaultTypeInternal;
extern TrafficLightObjectDefaultTypeInternal _TrafficLightObject_default_instance_;
}  // namespace perception
}  // namespace xsproto
namespace xsproto {
namespace perception {

// ===================================================================

class TrafficLightObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.TrafficLightObject) */ {
 public:
  TrafficLightObject();
  virtual ~TrafficLightObject();

  TrafficLightObject(const TrafficLightObject& from);

  inline TrafficLightObject& operator=(const TrafficLightObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficLightObject(TrafficLightObject&& from) noexcept
    : TrafficLightObject() {
    *this = ::std::move(from);
  }

  inline TrafficLightObject& operator=(TrafficLightObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLightObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightObject* internal_default_instance() {
    return reinterpret_cast<const TrafficLightObject*>(
               &_TrafficLightObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TrafficLightObject* other);
  friend void swap(TrafficLightObject& a, TrafficLightObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightObject* New() const PROTOBUF_FINAL { return New(NULL); }

  TrafficLightObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrafficLightObject& from);
  void MergeFrom(const TrafficLightObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrafficLightObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double birth_timestamp = 1;
  void clear_birth_timestamp();
  static const int kBirthTimestampFieldNumber = 1;
  double birth_timestamp() const;
  void set_birth_timestamp(double value);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 category = 3;
  void clear_category();
  static const int kCategoryFieldNumber = 3;
  ::google::protobuf::uint32 category() const;
  void set_category(::google::protobuf::uint32 value);

  // uint32 color = 4;
  void clear_color();
  static const int kColorFieldNumber = 4;
  ::google::protobuf::uint32 color() const;
  void set_color(::google::protobuf::uint32 value);

  // int32 zero_count = 5;
  void clear_zero_count();
  static const int kZeroCountFieldNumber = 5;
  ::google::protobuf::int32 zero_count() const;
  void set_zero_count(::google::protobuf::int32 value);

  // bool flash_flag = 6;
  void clear_flash_flag();
  static const int kFlashFlagFieldNumber = 6;
  bool flash_flag() const;
  void set_flash_flag(bool value);

  // float coor_x = 7;
  void clear_coor_x();
  static const int kCoorXFieldNumber = 7;
  float coor_x() const;
  void set_coor_x(float value);

  // float coor_y = 8;
  void clear_coor_y();
  static const int kCoorYFieldNumber = 8;
  float coor_y() const;
  void set_coor_y(float value);

  // float coor_z = 9;
  void clear_coor_z();
  static const int kCoorZFieldNumber = 9;
  float coor_z() const;
  void set_coor_z(float value);

  // float confidence = 10;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 10;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:xsproto.perception.TrafficLightObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double birth_timestamp_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 category_;
  ::google::protobuf::uint32 color_;
  ::google::protobuf::int32 zero_count_;
  bool flash_flag_;
  float coor_x_;
  float coor_y_;
  float coor_z_;
  float confidence_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2ftraffic_5flight_5finfo_2eproto::TableStruct;
  friend void ::protobuf_perception_2ftraffic_5flight_5finfo_2eproto::InitDefaultsTrafficLightObjectImpl();
};
// -------------------------------------------------------------------

class TrafficLight : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.TrafficLight) */ {
 public:
  TrafficLight();
  virtual ~TrafficLight();

  TrafficLight(const TrafficLight& from);

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficLight(TrafficLight&& from) noexcept
    : TrafficLight() {
    *this = ::std::move(from);
  }

  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TrafficLight* other);
  friend void swap(TrafficLight& a, TrafficLight& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficLight* New() const PROTOBUF_FINAL { return New(NULL); }

  TrafficLight* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrafficLight& from);
  void MergeFrom(const TrafficLight& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrafficLight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xsproto.perception.TrafficLightObject tfl_objs = 7;
  int tfl_objs_size() const;
  void clear_tfl_objs();
  static const int kTflObjsFieldNumber = 7;
  const ::xsproto::perception::TrafficLightObject& tfl_objs(int index) const;
  ::xsproto::perception::TrafficLightObject* mutable_tfl_objs(int index);
  ::xsproto::perception::TrafficLightObject* add_tfl_objs();
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::TrafficLightObject >*
      mutable_tfl_objs();
  const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::TrafficLightObject >&
      tfl_objs() const;

  // uint32 forward_type = 1;
  void clear_forward_type();
  static const int kForwardTypeFieldNumber = 1;
  ::google::protobuf::uint32 forward_type() const;
  void set_forward_type(::google::protobuf::uint32 value);

  // uint32 left_type = 2;
  void clear_left_type();
  static const int kLeftTypeFieldNumber = 2;
  ::google::protobuf::uint32 left_type() const;
  void set_left_type(::google::protobuf::uint32 value);

  // uint32 right_type = 3;
  void clear_right_type();
  static const int kRightTypeFieldNumber = 3;
  ::google::protobuf::uint32 right_type() const;
  void set_right_type(::google::protobuf::uint32 value);

  // uint32 uturn_type = 4;
  void clear_uturn_type();
  static const int kUturnTypeFieldNumber = 4;
  ::google::protobuf::uint32 uturn_type() const;
  void set_uturn_type(::google::protobuf::uint32 value);

  // uint32 non_motorv_type = 5;
  void clear_non_motorv_type();
  static const int kNonMotorvTypeFieldNumber = 5;
  ::google::protobuf::uint32 non_motorv_type() const;
  void set_non_motorv_type(::google::protobuf::uint32 value);

  // uint32 pedestrian_type = 6;
  void clear_pedestrian_type();
  static const int kPedestrianTypeFieldNumber = 6;
  ::google::protobuf::uint32 pedestrian_type() const;
  void set_pedestrian_type(::google::protobuf::uint32 value);

  // int32 forward_remain_time = 8;
  void clear_forward_remain_time();
  static const int kForwardRemainTimeFieldNumber = 8;
  ::google::protobuf::int32 forward_remain_time() const;
  void set_forward_remain_time(::google::protobuf::int32 value);

  // int32 left_remain_time = 9;
  void clear_left_remain_time();
  static const int kLeftRemainTimeFieldNumber = 9;
  ::google::protobuf::int32 left_remain_time() const;
  void set_left_remain_time(::google::protobuf::int32 value);

  // int32 right_remain_time = 10;
  void clear_right_remain_time();
  static const int kRightRemainTimeFieldNumber = 10;
  ::google::protobuf::int32 right_remain_time() const;
  void set_right_remain_time(::google::protobuf::int32 value);

  // int32 uturn_remain_time = 11;
  void clear_uturn_remain_time();
  static const int kUturnRemainTimeFieldNumber = 11;
  ::google::protobuf::int32 uturn_remain_time() const;
  void set_uturn_remain_time(::google::protobuf::int32 value);

  // int32 non_motorv_remain_time = 12;
  void clear_non_motorv_remain_time();
  static const int kNonMotorvRemainTimeFieldNumber = 12;
  ::google::protobuf::int32 non_motorv_remain_time() const;
  void set_non_motorv_remain_time(::google::protobuf::int32 value);

  // int32 pedestrian_remain_time = 13;
  void clear_pedestrian_remain_time();
  static const int kPedestrianRemainTimeFieldNumber = 13;
  ::google::protobuf::int32 pedestrian_remain_time() const;
  void set_pedestrian_remain_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xsproto.perception.TrafficLight)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xsproto::perception::TrafficLightObject > tfl_objs_;
  ::google::protobuf::uint32 forward_type_;
  ::google::protobuf::uint32 left_type_;
  ::google::protobuf::uint32 right_type_;
  ::google::protobuf::uint32 uturn_type_;
  ::google::protobuf::uint32 non_motorv_type_;
  ::google::protobuf::uint32 pedestrian_type_;
  ::google::protobuf::int32 forward_remain_time_;
  ::google::protobuf::int32 left_remain_time_;
  ::google::protobuf::int32 right_remain_time_;
  ::google::protobuf::int32 uturn_remain_time_;
  ::google::protobuf::int32 non_motorv_remain_time_;
  ::google::protobuf::int32 pedestrian_remain_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2ftraffic_5flight_5finfo_2eproto::TableStruct;
  friend void ::protobuf_perception_2ftraffic_5flight_5finfo_2eproto::InitDefaultsTrafficLightImpl();
};
// -------------------------------------------------------------------

class TrafficLightInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.perception.TrafficLightInfo) */ {
 public:
  TrafficLightInfo();
  virtual ~TrafficLightInfo();

  TrafficLightInfo(const TrafficLightInfo& from);

  inline TrafficLightInfo& operator=(const TrafficLightInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficLightInfo(TrafficLightInfo&& from) noexcept
    : TrafficLightInfo() {
    *this = ::std::move(from);
  }

  inline TrafficLightInfo& operator=(TrafficLightInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLightInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightInfo* internal_default_instance() {
    return reinterpret_cast<const TrafficLightInfo*>(
               &_TrafficLightInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TrafficLightInfo* other);
  friend void swap(TrafficLightInfo& a, TrafficLightInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TrafficLightInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrafficLightInfo& from);
  void MergeFrom(const TrafficLightInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrafficLightInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xsproto.base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::xsproto::base::Header& header() const;
  ::xsproto::base::Header* release_header();
  ::xsproto::base::Header* mutable_header();
  void set_allocated_header(::xsproto::base::Header* header);

  // .xsproto.perception.TrafficLight traffic_light = 2;
  bool has_traffic_light() const;
  void clear_traffic_light();
  static const int kTrafficLightFieldNumber = 2;
  const ::xsproto::perception::TrafficLight& traffic_light() const;
  ::xsproto::perception::TrafficLight* release_traffic_light();
  ::xsproto::perception::TrafficLight* mutable_traffic_light();
  void set_allocated_traffic_light(::xsproto::perception::TrafficLight* traffic_light);

  // @@protoc_insertion_point(class_scope:xsproto.perception.TrafficLightInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::xsproto::base::Header* header_;
  ::xsproto::perception::TrafficLight* traffic_light_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_2ftraffic_5flight_5finfo_2eproto::TableStruct;
  friend void ::protobuf_perception_2ftraffic_5flight_5finfo_2eproto::InitDefaultsTrafficLightInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrafficLightObject

// double birth_timestamp = 1;
inline void TrafficLightObject::clear_birth_timestamp() {
  birth_timestamp_ = 0;
}
inline double TrafficLightObject::birth_timestamp() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLightObject.birth_timestamp)
  return birth_timestamp_;
}
inline void TrafficLightObject::set_birth_timestamp(double value) {
  
  birth_timestamp_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLightObject.birth_timestamp)
}

// uint32 id = 2;
inline void TrafficLightObject::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrafficLightObject::id() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLightObject.id)
  return id_;
}
inline void TrafficLightObject::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLightObject.id)
}

// uint32 category = 3;
inline void TrafficLightObject::clear_category() {
  category_ = 0u;
}
inline ::google::protobuf::uint32 TrafficLightObject::category() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLightObject.category)
  return category_;
}
inline void TrafficLightObject::set_category(::google::protobuf::uint32 value) {
  
  category_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLightObject.category)
}

// uint32 color = 4;
inline void TrafficLightObject::clear_color() {
  color_ = 0u;
}
inline ::google::protobuf::uint32 TrafficLightObject::color() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLightObject.color)
  return color_;
}
inline void TrafficLightObject::set_color(::google::protobuf::uint32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLightObject.color)
}

// int32 zero_count = 5;
inline void TrafficLightObject::clear_zero_count() {
  zero_count_ = 0;
}
inline ::google::protobuf::int32 TrafficLightObject::zero_count() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLightObject.zero_count)
  return zero_count_;
}
inline void TrafficLightObject::set_zero_count(::google::protobuf::int32 value) {
  
  zero_count_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLightObject.zero_count)
}

// bool flash_flag = 6;
inline void TrafficLightObject::clear_flash_flag() {
  flash_flag_ = false;
}
inline bool TrafficLightObject::flash_flag() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLightObject.flash_flag)
  return flash_flag_;
}
inline void TrafficLightObject::set_flash_flag(bool value) {
  
  flash_flag_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLightObject.flash_flag)
}

// float coor_x = 7;
inline void TrafficLightObject::clear_coor_x() {
  coor_x_ = 0;
}
inline float TrafficLightObject::coor_x() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLightObject.coor_x)
  return coor_x_;
}
inline void TrafficLightObject::set_coor_x(float value) {
  
  coor_x_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLightObject.coor_x)
}

// float coor_y = 8;
inline void TrafficLightObject::clear_coor_y() {
  coor_y_ = 0;
}
inline float TrafficLightObject::coor_y() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLightObject.coor_y)
  return coor_y_;
}
inline void TrafficLightObject::set_coor_y(float value) {
  
  coor_y_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLightObject.coor_y)
}

// float coor_z = 9;
inline void TrafficLightObject::clear_coor_z() {
  coor_z_ = 0;
}
inline float TrafficLightObject::coor_z() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLightObject.coor_z)
  return coor_z_;
}
inline void TrafficLightObject::set_coor_z(float value) {
  
  coor_z_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLightObject.coor_z)
}

// float confidence = 10;
inline void TrafficLightObject::clear_confidence() {
  confidence_ = 0;
}
inline float TrafficLightObject::confidence() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLightObject.confidence)
  return confidence_;
}
inline void TrafficLightObject::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLightObject.confidence)
}

// -------------------------------------------------------------------

// TrafficLight

// uint32 forward_type = 1;
inline void TrafficLight::clear_forward_type() {
  forward_type_ = 0u;
}
inline ::google::protobuf::uint32 TrafficLight::forward_type() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLight.forward_type)
  return forward_type_;
}
inline void TrafficLight::set_forward_type(::google::protobuf::uint32 value) {
  
  forward_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLight.forward_type)
}

// uint32 left_type = 2;
inline void TrafficLight::clear_left_type() {
  left_type_ = 0u;
}
inline ::google::protobuf::uint32 TrafficLight::left_type() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLight.left_type)
  return left_type_;
}
inline void TrafficLight::set_left_type(::google::protobuf::uint32 value) {
  
  left_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLight.left_type)
}

// uint32 right_type = 3;
inline void TrafficLight::clear_right_type() {
  right_type_ = 0u;
}
inline ::google::protobuf::uint32 TrafficLight::right_type() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLight.right_type)
  return right_type_;
}
inline void TrafficLight::set_right_type(::google::protobuf::uint32 value) {
  
  right_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLight.right_type)
}

// uint32 uturn_type = 4;
inline void TrafficLight::clear_uturn_type() {
  uturn_type_ = 0u;
}
inline ::google::protobuf::uint32 TrafficLight::uturn_type() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLight.uturn_type)
  return uturn_type_;
}
inline void TrafficLight::set_uturn_type(::google::protobuf::uint32 value) {
  
  uturn_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLight.uturn_type)
}

// uint32 non_motorv_type = 5;
inline void TrafficLight::clear_non_motorv_type() {
  non_motorv_type_ = 0u;
}
inline ::google::protobuf::uint32 TrafficLight::non_motorv_type() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLight.non_motorv_type)
  return non_motorv_type_;
}
inline void TrafficLight::set_non_motorv_type(::google::protobuf::uint32 value) {
  
  non_motorv_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLight.non_motorv_type)
}

// uint32 pedestrian_type = 6;
inline void TrafficLight::clear_pedestrian_type() {
  pedestrian_type_ = 0u;
}
inline ::google::protobuf::uint32 TrafficLight::pedestrian_type() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLight.pedestrian_type)
  return pedestrian_type_;
}
inline void TrafficLight::set_pedestrian_type(::google::protobuf::uint32 value) {
  
  pedestrian_type_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLight.pedestrian_type)
}

// repeated .xsproto.perception.TrafficLightObject tfl_objs = 7;
inline int TrafficLight::tfl_objs_size() const {
  return tfl_objs_.size();
}
inline void TrafficLight::clear_tfl_objs() {
  tfl_objs_.Clear();
}
inline const ::xsproto::perception::TrafficLightObject& TrafficLight::tfl_objs(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLight.tfl_objs)
  return tfl_objs_.Get(index);
}
inline ::xsproto::perception::TrafficLightObject* TrafficLight::mutable_tfl_objs(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.perception.TrafficLight.tfl_objs)
  return tfl_objs_.Mutable(index);
}
inline ::xsproto::perception::TrafficLightObject* TrafficLight::add_tfl_objs() {
  // @@protoc_insertion_point(field_add:xsproto.perception.TrafficLight.tfl_objs)
  return tfl_objs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xsproto::perception::TrafficLightObject >*
TrafficLight::mutable_tfl_objs() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.perception.TrafficLight.tfl_objs)
  return &tfl_objs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xsproto::perception::TrafficLightObject >&
TrafficLight::tfl_objs() const {
  // @@protoc_insertion_point(field_list:xsproto.perception.TrafficLight.tfl_objs)
  return tfl_objs_;
}

// int32 forward_remain_time = 8;
inline void TrafficLight::clear_forward_remain_time() {
  forward_remain_time_ = 0;
}
inline ::google::protobuf::int32 TrafficLight::forward_remain_time() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLight.forward_remain_time)
  return forward_remain_time_;
}
inline void TrafficLight::set_forward_remain_time(::google::protobuf::int32 value) {
  
  forward_remain_time_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLight.forward_remain_time)
}

// int32 left_remain_time = 9;
inline void TrafficLight::clear_left_remain_time() {
  left_remain_time_ = 0;
}
inline ::google::protobuf::int32 TrafficLight::left_remain_time() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLight.left_remain_time)
  return left_remain_time_;
}
inline void TrafficLight::set_left_remain_time(::google::protobuf::int32 value) {
  
  left_remain_time_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLight.left_remain_time)
}

// int32 right_remain_time = 10;
inline void TrafficLight::clear_right_remain_time() {
  right_remain_time_ = 0;
}
inline ::google::protobuf::int32 TrafficLight::right_remain_time() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLight.right_remain_time)
  return right_remain_time_;
}
inline void TrafficLight::set_right_remain_time(::google::protobuf::int32 value) {
  
  right_remain_time_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLight.right_remain_time)
}

// int32 uturn_remain_time = 11;
inline void TrafficLight::clear_uturn_remain_time() {
  uturn_remain_time_ = 0;
}
inline ::google::protobuf::int32 TrafficLight::uturn_remain_time() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLight.uturn_remain_time)
  return uturn_remain_time_;
}
inline void TrafficLight::set_uturn_remain_time(::google::protobuf::int32 value) {
  
  uturn_remain_time_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLight.uturn_remain_time)
}

// int32 non_motorv_remain_time = 12;
inline void TrafficLight::clear_non_motorv_remain_time() {
  non_motorv_remain_time_ = 0;
}
inline ::google::protobuf::int32 TrafficLight::non_motorv_remain_time() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLight.non_motorv_remain_time)
  return non_motorv_remain_time_;
}
inline void TrafficLight::set_non_motorv_remain_time(::google::protobuf::int32 value) {
  
  non_motorv_remain_time_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLight.non_motorv_remain_time)
}

// int32 pedestrian_remain_time = 13;
inline void TrafficLight::clear_pedestrian_remain_time() {
  pedestrian_remain_time_ = 0;
}
inline ::google::protobuf::int32 TrafficLight::pedestrian_remain_time() const {
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLight.pedestrian_remain_time)
  return pedestrian_remain_time_;
}
inline void TrafficLight::set_pedestrian_remain_time(::google::protobuf::int32 value) {
  
  pedestrian_remain_time_ = value;
  // @@protoc_insertion_point(field_set:xsproto.perception.TrafficLight.pedestrian_remain_time)
}

// -------------------------------------------------------------------

// TrafficLightInfo

// .xsproto.base.Header header = 1;
inline bool TrafficLightInfo::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::xsproto::base::Header& TrafficLightInfo::header() const {
  const ::xsproto::base::Header* p = header_;
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLightInfo.header)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::base::Header*>(
      &::xsproto::base::_Header_default_instance_);
}
inline ::xsproto::base::Header* TrafficLightInfo::release_header() {
  // @@protoc_insertion_point(field_release:xsproto.perception.TrafficLightInfo.header)
  
  ::xsproto::base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::xsproto::base::Header* TrafficLightInfo::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::xsproto::base::Header;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.TrafficLightInfo.header)
  return header_;
}
inline void TrafficLightInfo::set_allocated_header(::xsproto::base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.TrafficLightInfo.header)
}

// .xsproto.perception.TrafficLight traffic_light = 2;
inline bool TrafficLightInfo::has_traffic_light() const {
  return this != internal_default_instance() && traffic_light_ != NULL;
}
inline void TrafficLightInfo::clear_traffic_light() {
  if (GetArenaNoVirtual() == NULL && traffic_light_ != NULL) {
    delete traffic_light_;
  }
  traffic_light_ = NULL;
}
inline const ::xsproto::perception::TrafficLight& TrafficLightInfo::traffic_light() const {
  const ::xsproto::perception::TrafficLight* p = traffic_light_;
  // @@protoc_insertion_point(field_get:xsproto.perception.TrafficLightInfo.traffic_light)
  return p != NULL ? *p : *reinterpret_cast<const ::xsproto::perception::TrafficLight*>(
      &::xsproto::perception::_TrafficLight_default_instance_);
}
inline ::xsproto::perception::TrafficLight* TrafficLightInfo::release_traffic_light() {
  // @@protoc_insertion_point(field_release:xsproto.perception.TrafficLightInfo.traffic_light)
  
  ::xsproto::perception::TrafficLight* temp = traffic_light_;
  traffic_light_ = NULL;
  return temp;
}
inline ::xsproto::perception::TrafficLight* TrafficLightInfo::mutable_traffic_light() {
  
  if (traffic_light_ == NULL) {
    traffic_light_ = new ::xsproto::perception::TrafficLight;
  }
  // @@protoc_insertion_point(field_mutable:xsproto.perception.TrafficLightInfo.traffic_light)
  return traffic_light_;
}
inline void TrafficLightInfo::set_allocated_traffic_light(::xsproto::perception::TrafficLight* traffic_light) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete traffic_light_;
  }
  if (traffic_light) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      traffic_light = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, traffic_light, submessage_arena);
    }
    
  } else {
    
  }
  traffic_light_ = traffic_light;
  // @@protoc_insertion_point(field_set_allocated:xsproto.perception.TrafficLightInfo.traffic_light)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2ftraffic_5flight_5finfo_2eproto__INCLUDED
