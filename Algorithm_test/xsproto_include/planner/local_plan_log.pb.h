// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planner/local_plan_log.proto

#ifndef PROTOBUF_planner_2flocal_5fplan_5flog_2eproto__INCLUDED
#define PROTOBUF_planner_2flocal_5fplan_5flog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_planner_2flocal_5fplan_5flog_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLocalPlanLogImpl();
void InitDefaultsLocalPlanLog();
inline void InitDefaults() {
  InitDefaultsLocalPlanLog();
}
}  // namespace protobuf_planner_2flocal_5fplan_5flog_2eproto
namespace xsproto {
namespace planner {
class LocalPlanLog;
class LocalPlanLogDefaultTypeInternal;
extern LocalPlanLogDefaultTypeInternal _LocalPlanLog_default_instance_;
}  // namespace planner
}  // namespace xsproto
namespace xsproto {
namespace planner {

// ===================================================================

class LocalPlanLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xsproto.planner.LocalPlanLog) */ {
 public:
  LocalPlanLog();
  virtual ~LocalPlanLog();

  LocalPlanLog(const LocalPlanLog& from);

  inline LocalPlanLog& operator=(const LocalPlanLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalPlanLog(LocalPlanLog&& from) noexcept
    : LocalPlanLog() {
    *this = ::std::move(from);
  }

  inline LocalPlanLog& operator=(LocalPlanLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalPlanLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalPlanLog* internal_default_instance() {
    return reinterpret_cast<const LocalPlanLog*>(
               &_LocalPlanLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LocalPlanLog* other);
  friend void swap(LocalPlanLog& a, LocalPlanLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalPlanLog* New() const PROTOBUF_FINAL { return New(NULL); }

  LocalPlanLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocalPlanLog& from);
  void MergeFrom(const LocalPlanLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocalPlanLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes str = 2;
  int str_size() const;
  void clear_str();
  static const int kStrFieldNumber = 2;
  const ::std::string& str(int index) const;
  ::std::string* mutable_str(int index);
  void set_str(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_str(int index, ::std::string&& value);
  #endif
  void set_str(int index, const char* value);
  void set_str(int index, const void* value, size_t size);
  ::std::string* add_str();
  void add_str(const ::std::string& value);
  #if LANG_CXX11
  void add_str(::std::string&& value);
  #endif
  void add_str(const char* value);
  void add_str(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& str() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_str();

  // optional double time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // @@protoc_insertion_point(class_scope:xsproto.planner.LocalPlanLog)
 private:
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> str_;
  double time_;
  friend struct ::protobuf_planner_2flocal_5fplan_5flog_2eproto::TableStruct;
  friend void ::protobuf_planner_2flocal_5fplan_5flog_2eproto::InitDefaultsLocalPlanLogImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocalPlanLog

// optional double time = 1;
inline bool LocalPlanLog::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalPlanLog::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocalPlanLog::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocalPlanLog::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double LocalPlanLog::time() const {
  // @@protoc_insertion_point(field_get:xsproto.planner.LocalPlanLog.time)
  return time_;
}
inline void LocalPlanLog::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:xsproto.planner.LocalPlanLog.time)
}

// repeated bytes str = 2;
inline int LocalPlanLog::str_size() const {
  return str_.size();
}
inline void LocalPlanLog::clear_str() {
  str_.Clear();
}
inline const ::std::string& LocalPlanLog::str(int index) const {
  // @@protoc_insertion_point(field_get:xsproto.planner.LocalPlanLog.str)
  return str_.Get(index);
}
inline ::std::string* LocalPlanLog::mutable_str(int index) {
  // @@protoc_insertion_point(field_mutable:xsproto.planner.LocalPlanLog.str)
  return str_.Mutable(index);
}
inline void LocalPlanLog::set_str(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xsproto.planner.LocalPlanLog.str)
  str_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LocalPlanLog::set_str(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:xsproto.planner.LocalPlanLog.str)
  str_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LocalPlanLog::set_str(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xsproto.planner.LocalPlanLog.str)
}
inline void LocalPlanLog::set_str(int index, const void* value, size_t size) {
  str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xsproto.planner.LocalPlanLog.str)
}
inline ::std::string* LocalPlanLog::add_str() {
  // @@protoc_insertion_point(field_add_mutable:xsproto.planner.LocalPlanLog.str)
  return str_.Add();
}
inline void LocalPlanLog::add_str(const ::std::string& value) {
  str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xsproto.planner.LocalPlanLog.str)
}
#if LANG_CXX11
inline void LocalPlanLog::add_str(::std::string&& value) {
  str_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xsproto.planner.LocalPlanLog.str)
}
#endif
inline void LocalPlanLog::add_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xsproto.planner.LocalPlanLog.str)
}
inline void LocalPlanLog::add_str(const void* value, size_t size) {
  str_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xsproto.planner.LocalPlanLog.str)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LocalPlanLog::str() const {
  // @@protoc_insertion_point(field_list:xsproto.planner.LocalPlanLog.str)
  return str_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LocalPlanLog::mutable_str() {
  // @@protoc_insertion_point(field_mutable_list:xsproto.planner.LocalPlanLog.str)
  return &str_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planner
}  // namespace xsproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planner_2flocal_5fplan_5flog_2eproto__INCLUDED
